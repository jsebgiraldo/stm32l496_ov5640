
Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000114a4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000edc  08011654  08011654  00021654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012530  08012530  00030114  2**0
                  CONTENTS
  4 .ARM          00000008  08012530  08012530  00022530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012538  08012538  00030114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012538  08012538  00022538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801253c  0801253c  0002253c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  08012540  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001fb1c  20000114  08012654  00030114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001fc30  08012654  0003fc30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026034  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f0f  00000000  00000000  00056178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f58  00000000  00000000  0005b088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d20  00000000  00000000  0005cfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000310ba  00000000  00000000  0005ed00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000247e9  00000000  00000000  0008fdba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114c7c  00000000  00000000  000b45a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c921f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b50  00000000  00000000  001c9270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000114 	.word	0x20000114
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801163c 	.word	0x0801163c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000118 	.word	0x20000118
 80001ec:	0801163c 	.word	0x0801163c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <head_ptr_advance>:
 * @brief Advance head pointer by 1 position
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void head_ptr_advance(ring_buffer_handle_t rb)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d105      	bne.n	80005ae <head_ptr_advance+0x1a>
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <head_ptr_advance+0x74>)
 80005a4:	4a19      	ldr	r2, [pc, #100]	; (800060c <head_ptr_advance+0x78>)
 80005a6:	2126      	movs	r1, #38	; 0x26
 80005a8:	4819      	ldr	r0, [pc, #100]	; (8000610 <head_ptr_advance+0x7c>)
 80005aa:	f00f ff85 	bl	80104b8 <__assert_func>

    if (rb->full)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7c1b      	ldrb	r3, [r3, #16]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00b      	beq.n	80005ce <head_ptr_advance+0x3a>
    {
        rb->tail = (rb->tail + 1) % rb->length;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	3301      	adds	r3, #1
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	68d2      	ldr	r2, [r2, #12]
 80005c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80005c4:	fb01 f202 	mul.w	r2, r1, r2
 80005c8:	1a9a      	subs	r2, r3, r2
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	609a      	str	r2, [r3, #8]
    }

    // We mark full because we will advance tail on the next time around
    rb->head = (rb->head + 1) % rb->length;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	3301      	adds	r3, #1
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	68d2      	ldr	r2, [r2, #12]
 80005d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80005dc:	fb01 f202 	mul.w	r2, r1, r2
 80005e0:	1a9a      	subs	r2, r3, r2
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	605a      	str	r2, [r3, #4]
    rb->full = (rb->head == rb->tail);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685a      	ldr	r2, [r3, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	bf0c      	ite	eq
 80005f2:	2301      	moveq	r3, #1
 80005f4:	2300      	movne	r3, #0
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	741a      	strb	r2, [r3, #16]
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	08011654 	.word	0x08011654
 800060c:	080119d8 	.word	0x080119d8
 8000610:	08011658 	.word	0x08011658

08000614 <tail_ptr_retreat>:
 * @brief Retreat tail pointer by 1 position
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
static void tail_ptr_retreat(ring_buffer_handle_t rb)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d105      	bne.n	800062e <tail_ptr_retreat+0x1a>
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <tail_ptr_retreat+0x40>)
 8000624:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <tail_ptr_retreat+0x44>)
 8000626:	2139      	movs	r1, #57	; 0x39
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <tail_ptr_retreat+0x48>)
 800062a:	f00f ff45 	bl	80104b8 <__assert_func>

    rb->full = 0;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	741a      	strb	r2, [r3, #16]
    rb->tail = (rb->tail + 1) % rb->length;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	3301      	adds	r3, #1
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	68d2      	ldr	r2, [r2, #12]
 800063e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000642:	fb01 f202 	mul.w	r2, r1, r2
 8000646:	1a9a      	subs	r2, r3, r2
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	609a      	str	r2, [r3, #8]
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	08011654 	.word	0x08011654
 8000658:	080119ec 	.word	0x080119ec
 800065c:	08011658 	.word	0x08011658

08000660 <is_ring_buffer_empty>:
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @return uint8_t return 1 if ring buffer is empty, return 0 otherwise.
 */
uint8_t is_ring_buffer_empty(ring_buffer_handle_t rb)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
    assert(rb);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d105      	bne.n	800067a <is_ring_buffer_empty+0x1a>
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <is_ring_buffer_empty+0x40>)
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <is_ring_buffer_empty+0x44>)
 8000672:	214e      	movs	r1, #78	; 0x4e
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <is_ring_buffer_empty+0x48>)
 8000676:	f00f ff1f 	bl	80104b8 <__assert_func>

    return (!rb->full && (rb->tail == rb->head));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7c1b      	ldrb	r3, [r3, #16]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d107      	bne.n	8000692 <is_ring_buffer_empty+0x32>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	689a      	ldr	r2, [r3, #8]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	429a      	cmp	r2, r3
 800068c:	d101      	bne.n	8000692 <is_ring_buffer_empty+0x32>
 800068e:	2301      	movs	r3, #1
 8000690:	e000      	b.n	8000694 <is_ring_buffer_empty+0x34>
 8000692:	2300      	movs	r3, #0
 8000694:	b2db      	uxtb	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	08011654 	.word	0x08011654
 80006a4:	08011a00 	.word	0x08011a00
 80006a8:	08011658 	.word	0x08011658

080006ac <ring_buffer_init>:
 * @param buffer  pointer to a buffer reserved in memory by the user that is going to be register in ring buffer
 * @param size    size of the buffer to be register.
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the initialized ring buffer.
 */
ring_buffer_handle_t ring_buffer_init(uint16_t *buffer, size_t size)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
    assert(buffer && size);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <ring_buffer_init+0x16>
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d105      	bne.n	80006ce <ring_buffer_init+0x22>
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <ring_buffer_init+0x74>)
 80006c4:	4a17      	ldr	r2, [pc, #92]	; (8000724 <ring_buffer_init+0x78>)
 80006c6:	2169      	movs	r1, #105	; 0x69
 80006c8:	4817      	ldr	r0, [pc, #92]	; (8000728 <ring_buffer_init+0x7c>)
 80006ca:	f00f fef5 	bl	80104b8 <__assert_func>

    ring_buffer_handle_t rb = malloc(sizeof(ring_buffer_t));
 80006ce:	2014      	movs	r0, #20
 80006d0:	f00f ff4c 	bl	801056c <malloc>
 80006d4:	4603      	mov	r3, r0
 80006d6:	60fb      	str	r3, [r7, #12]
    assert(rb);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d105      	bne.n	80006ea <ring_buffer_init+0x3e>
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <ring_buffer_init+0x80>)
 80006e0:	4a10      	ldr	r2, [pc, #64]	; (8000724 <ring_buffer_init+0x78>)
 80006e2:	216c      	movs	r1, #108	; 0x6c
 80006e4:	4810      	ldr	r0, [pc, #64]	; (8000728 <ring_buffer_init+0x7c>)
 80006e6:	f00f fee7 	bl	80104b8 <__assert_func>

    rb->buffer = buffer;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	601a      	str	r2, [r3, #0]
    rb->length = size;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	60da      	str	r2, [r3, #12]
    ring_buffer_reset(rb);
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f000 f81c 	bl	8000734 <ring_buffer_reset>

    assert(is_ring_buffer_empty(rb));
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f7ff ffaf 	bl	8000660 <is_ring_buffer_empty>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d105      	bne.n	8000714 <ring_buffer_init+0x68>
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <ring_buffer_init+0x84>)
 800070a:	4a06      	ldr	r2, [pc, #24]	; (8000724 <ring_buffer_init+0x78>)
 800070c:	2172      	movs	r1, #114	; 0x72
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <ring_buffer_init+0x7c>)
 8000710:	f00f fed2 	bl	80104b8 <__assert_func>

    return rb;
 8000714:	68fb      	ldr	r3, [r7, #12]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	0801167c 	.word	0x0801167c
 8000724:	08011a18 	.word	0x08011a18
 8000728:	08011658 	.word	0x08011658
 800072c:	08011654 	.word	0x08011654
 8000730:	0801168c 	.word	0x0801168c

08000734 <ring_buffer_reset>:
 * @brief Reset ring buffer to default configuration
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 */
void ring_buffer_reset(ring_buffer_handle_t rb)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    assert(rb);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d105      	bne.n	800074e <ring_buffer_reset+0x1a>
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <ring_buffer_reset+0x34>)
 8000744:	4a09      	ldr	r2, [pc, #36]	; (800076c <ring_buffer_reset+0x38>)
 8000746:	2189      	movs	r1, #137	; 0x89
 8000748:	4809      	ldr	r0, [pc, #36]	; (8000770 <ring_buffer_reset+0x3c>)
 800074a:	f00f feb5 	bl	80104b8 <__assert_func>
    rb->head = 0;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
    rb->tail = 0;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
    rb->full = 0;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2200      	movs	r2, #0
 800075e:	741a      	strb	r2, [r3, #16]
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	08011654 	.word	0x08011654
 800076c:	08011a2c 	.word	0x08011a2c
 8000770:	08011658 	.word	0x08011658

08000774 <ring_buffer_put>:
 *
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data byte to be written in buffer.
 */
void ring_buffer_put(ring_buffer_handle_t rb, uint16_t data)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	807b      	strh	r3, [r7, #2]
    assert(rb && rb->buffer);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d003      	beq.n	800078e <ring_buffer_put+0x1a>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d105      	bne.n	800079a <ring_buffer_put+0x26>
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <ring_buffer_put+0x44>)
 8000790:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <ring_buffer_put+0x48>)
 8000792:	21ca      	movs	r1, #202	; 0xca
 8000794:	480a      	ldr	r0, [pc, #40]	; (80007c0 <ring_buffer_put+0x4c>)
 8000796:	f00f fe8f 	bl	80104b8 <__assert_func>

    rb->buffer[rb->head] = data;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	887a      	ldrh	r2, [r7, #2]
 80007a8:	801a      	strh	r2, [r3, #0]

    head_ptr_advance(rb);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff fef2 	bl	8000594 <head_ptr_advance>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	080116a8 	.word	0x080116a8
 80007bc:	08011a40 	.word	0x08011a40
 80007c0:	08011658 	.word	0x08011658

080007c4 <ring_buffer_get>:
 * @param rb variable of type ring_buffer_t* which contains the struct associated to the ring buffer
 * @param data   pointer to a variable to be fill whit the data in buffer.
 * @return uint8_t  return 0 if there is not data available to be read, return 1 otherwise.
 */
uint8_t ring_buffer_get(ring_buffer_handle_t rb, uint16_t *data)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
    assert(rb && data && rb->buffer);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d006      	beq.n	80007e2 <ring_buffer_get+0x1e>
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d003      	beq.n	80007e2 <ring_buffer_get+0x1e>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d105      	bne.n	80007ee <ring_buffer_get+0x2a>
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <ring_buffer_get+0x64>)
 80007e4:	4a11      	ldr	r2, [pc, #68]	; (800082c <ring_buffer_get+0x68>)
 80007e6:	21da      	movs	r1, #218	; 0xda
 80007e8:	4811      	ldr	r0, [pc, #68]	; (8000830 <ring_buffer_get+0x6c>)
 80007ea:	f00f fe65 	bl	80104b8 <__assert_func>

    int r = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]

    if (!is_ring_buffer_empty(rb))
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ff34 	bl	8000660 <is_ring_buffer_empty>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10d      	bne.n	800081a <ring_buffer_get+0x56>
    {
        *data = rb->buffer[rb->tail];
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	4413      	add	r3, r2
 800080a:	881a      	ldrh	r2, [r3, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	801a      	strh	r2, [r3, #0]
        tail_ptr_retreat(rb);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff feff 	bl	8000614 <tail_ptr_retreat>

        r = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
    }

    return r;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	b2db      	uxtb	r3, r3
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	080116bc 	.word	0x080116bc
 800082c:	08011a50 	.word	0x08011a50
 8000830:	08011658 	.word	0x08011658

08000834 <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	4618      	mov	r0, r3
 8000842:	f000 ffd1 	bl	80017e8 <mfxstm32l152_GetInstance>
 8000846:	4603      	mov	r3, r0
 8000848:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	2bff      	cmp	r3, #255	; 0xff
 800084e:	d10e      	bne.n	800086e <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8000850:	2000      	movs	r0, #0
 8000852:	f000 ffc9 	bl	80017e8 <mfxstm32l152_GetInstance>
 8000856:	4603      	mov	r3, r0
 8000858:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d806      	bhi.n	800086e <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	88fa      	ldrh	r2, [r7, #6]
 8000864:	b2d1      	uxtb	r1, r2
 8000866:	4a09      	ldr	r2, [pc, #36]	; (800088c <mfxstm32l152_Init+0x58>)
 8000868:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 800086a:	f001 faa3 	bl	8001db4 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	2102      	movs	r1, #2
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f8db 	bl	8000a2e <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8000878:	88fb      	ldrh	r3, [r7, #6]
 800087a:	2101      	movs	r1, #1
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f8fc 	bl	8000a7a <mfxstm32l152_SetIrqOutPinType>
}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000130 	.word	0x20000130

08000890 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	4618      	mov	r0, r3
 800089e:	f000 ffc3 	bl	8001828 <mfxstm32l152_ReleaseInstance>
 80008a2:	4603      	mov	r3, r0
 80008a4:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	2bff      	cmp	r3, #255	; 0xff
 80008aa:	d001      	beq.n	80008b0 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 80008ac:	f001 fa92 	bl	8001dd4 <MFX_IO_DeInit>
  }
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	2140      	movs	r1, #64	; 0x40
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 fb25 	bl	8001f18 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 80008ce:	200a      	movs	r0, #10
 80008d0:	f001 fb64 	bl	8001f9c <MFX_IO_Delay>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	2240      	movs	r2, #64	; 0x40
 80008ea:	2140      	movs	r1, #64	; 0x40
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 fb13 	bl	8001f18 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 80008f2:	f001 fad9 	bl	8001ea8 <MFX_IO_EnableWakeupPin>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b084      	sub	sp, #16
 8000902:	af00      	add	r7, sp, #0
 8000904:	4603      	mov	r3, r0
 8000906:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	4618      	mov	r0, r3
 800090c:	f000 ff6c 	bl	80017e8 <mfxstm32l152_GetInstance>
 8000910:	4603      	mov	r3, r0
 8000912:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	2bff      	cmp	r3, #255	; 0xff
 8000918:	d101      	bne.n	800091e <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 800091a:	f001 fac5 	bl	8001ea8 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 800091e:	f001 fae7 	bl	8001ef0 <MFX_IO_Wakeup>
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b084      	sub	sp, #16
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 8000934:	2001      	movs	r0, #1
 8000936:	f001 fb31 	bl	8001f9c <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 800093a:	f001 fa3b 	bl	8001db4 <MFX_IO_Init>


  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f001 fafc 	bl	8001f40 <MFX_IO_Read>
 8000948:	4603      	mov	r3, r0
 800094a:	73fb      	strb	r3, [r7, #15]
  /* Return the device ID value */
  return (id);
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	b29b      	uxth	r3, r3
}
 8000950:	4618      	mov	r0, r3
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	460a      	mov	r2, r1
 8000962:	80fb      	strh	r3, [r7, #6]
 8000964:	4613      	mov	r3, r2
 8000966:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	2142      	movs	r1, #66	; 0x42
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fae5 	bl	8001f40 <MFX_IO_Read>
 8000976:	4603      	mov	r3, r0
 8000978:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 800097a:	7bfa      	ldrb	r2, [r7, #15]
 800097c:	797b      	ldrb	r3, [r7, #5]
 800097e:	4313      	orrs	r3, r2
 8000980:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8000982:	7bfa      	ldrb	r2, [r7, #15]
 8000984:	88fb      	ldrh	r3, [r7, #6]
 8000986:	2142      	movs	r1, #66	; 0x42
 8000988:	4618      	mov	r0, r3
 800098a:	f001 fac5 	bl	8001f18 <MFX_IO_Write>
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b084      	sub	sp, #16
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	460a      	mov	r2, r1
 80009a0:	80fb      	strh	r3, [r7, #6]
 80009a2:	4613      	mov	r3, r2
 80009a4:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	2142      	movs	r1, #66	; 0x42
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 fac6 	bl	8001f40 <MFX_IO_Read>
 80009b4:	4603      	mov	r3, r0
 80009b6:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 80009b8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80009bc:	43db      	mvns	r3, r3
 80009be:	b25a      	sxtb	r2, r3
 80009c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c4:	4013      	ands	r3, r2
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 80009ca:	7bfa      	ldrb	r2, [r7, #15]
 80009cc:	88fb      	ldrh	r3, [r7, #6]
 80009ce:	2142      	movs	r1, #66	; 0x42
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 faa1 	bl	8001f18 <MFX_IO_Write>
}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	460a      	mov	r2, r1
 80009e8:	80fb      	strh	r3, [r7, #6]
 80009ea:	4613      	mov	r3, r2
 80009ec:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 80009ee:	88fb      	ldrh	r3, [r7, #6]
 80009f0:	2108      	movs	r1, #8
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 faa4 	bl	8001f40 <MFX_IO_Read>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	797b      	ldrb	r3, [r7, #5]
 80009fe:	4013      	ands	r3, r2
 8000a00:	b2db      	uxtb	r3, r3
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	460a      	mov	r2, r1
 8000a14:	80fb      	strh	r3, [r7, #6]
 8000a16:	4613      	mov	r3, r2
 8000a18:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 8000a1a:	797a      	ldrb	r2, [r7, #5]
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	2144      	movs	r1, #68	; 0x44
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 fa79 	bl	8001f18 <MFX_IO_Write>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b084      	sub	sp, #16
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	460a      	mov	r2, r1
 8000a38:	80fb      	strh	r3, [r7, #6]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	2141      	movs	r1, #65	; 0x41
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 fa7a 	bl	8001f40 <MFX_IO_Read>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	f023 0302 	bic.w	r3, r3, #2
 8000a56:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8000a58:	7bfa      	ldrb	r2, [r7, #15]
 8000a5a:	797b      	ldrb	r3, [r7, #5]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000a60:	7bfa      	ldrb	r2, [r7, #15]
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	2141      	movs	r1, #65	; 0x41
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 fa56 	bl	8001f18 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f001 fa95 	bl	8001f9c <MFX_IO_Delay>

}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4603      	mov	r3, r0
 8000a82:	460a      	mov	r2, r1
 8000a84:	80fb      	strh	r3, [r7, #6]
 8000a86:	4613      	mov	r3, r2
 8000a88:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	2141      	movs	r1, #65	; 0x41
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fa54 	bl	8001f40 <MFX_IO_Read>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	f023 0301 	bic.w	r3, r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 8000aa4:	7bfa      	ldrb	r2, [r7, #15]
 8000aa6:	797b      	ldrb	r3, [r7, #5]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000aac:	7bfa      	ldrb	r2, [r7, #15]
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	2141      	movs	r1, #65	; 0x41
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fa30 	bl	8001f18 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f001 fa6f 	bl	8001f9c <MFX_IO_Delay>

}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b084      	sub	sp, #16
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	6039      	str	r1, [r7, #0]
 8000ad0:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fa32 	bl	8001f40 <MFX_IO_Read>
 8000adc:	4603      	mov	r3, r0
 8000ade:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aee:	d304      	bcc.n	8000afa <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	f043 0308 	orr.w	r3, r3, #8
 8000af6:	73fb      	strb	r3, [r7, #15]
 8000af8:	e003      	b.n	8000b02 <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	f023 0308 	bic.w	r3, r3, #8
 8000b00:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8000b02:	7bfa      	ldrb	r2, [r7, #15]
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	2140      	movs	r1, #64	; 0x40
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 fa05 	bl	8001f18 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f001 fa44 	bl	8001f9c <MFX_IO_Delay>
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	80fb      	strh	r3, [r7, #6]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 8000b30:	797b      	ldrb	r3, [r7, #5]
 8000b32:	2b17      	cmp	r3, #23
 8000b34:	f200 82d4 	bhi.w	80010e0 <mfxstm32l152_IO_Config+0x5c4>
 8000b38:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <mfxstm32l152_IO_Config+0x24>)
 8000b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3e:	bf00      	nop
 8000b40:	08000bd1 	.word	0x08000bd1
 8000b44:	08000c61 	.word	0x08000c61
 8000b48:	08000d21 	.word	0x08000d21
 8000b4c:	08000e11 	.word	0x08000e11
 8000b50:	08000f01 	.word	0x08000f01
 8000b54:	08000ff1 	.word	0x08000ff1
 8000b58:	08000ba1 	.word	0x08000ba1
 8000b5c:	08000ba1 	.word	0x08000ba1
 8000b60:	08000c01 	.word	0x08000c01
 8000b64:	08000c31 	.word	0x08000c31
 8000b68:	080010e1 	.word	0x080010e1
 8000b6c:	08000cf1 	.word	0x08000cf1
 8000b70:	08000cc1 	.word	0x08000cc1
 8000b74:	080010e1 	.word	0x080010e1
 8000b78:	08000c91 	.word	0x08000c91
 8000b7c:	08000c61 	.word	0x08000c61
 8000b80:	08000d71 	.word	0x08000d71
 8000b84:	08000dc1 	.word	0x08000dc1
 8000b88:	08000e61 	.word	0x08000e61
 8000b8c:	08000eb1 	.word	0x08000eb1
 8000b90:	08000f51 	.word	0x08000f51
 8000b94:	08000fa1 	.word	0x08000fa1
 8000b98:	08001041 	.word	0x08001041
 8000b9c:	08001091 	.word	0x08001091
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fb67 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	2200      	movs	r2, #0
 8000bae:	6839      	ldr	r1, [r7, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fa9d 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000bb6:	88f8      	ldrh	r0, [r7, #6]
 8000bb8:	2300      	movs	r3, #0
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	2164      	movs	r1, #100	; 0x64
 8000bbe:	f000 fe57 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000bc2:	88f8      	ldrh	r0, [r7, #6]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	2168      	movs	r1, #104	; 0x68
 8000bca:	f000 fe51 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000bce:	e28a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	6839      	ldr	r1, [r7, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fb4f 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	6839      	ldr	r1, [r7, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fa85 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000be6:	88f8      	ldrh	r0, [r7, #6]
 8000be8:	2300      	movs	r3, #0
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	2164      	movs	r1, #100	; 0x64
 8000bee:	f000 fe3f 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000bf2:	88f8      	ldrh	r0, [r7, #6]
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	683a      	ldr	r2, [r7, #0]
 8000bf8:	2168      	movs	r1, #104	; 0x68
 8000bfa:	f000 fe39 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000bfe:	e272      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	6839      	ldr	r1, [r7, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fb37 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	6839      	ldr	r1, [r7, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fa6d 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000c16:	88f8      	ldrh	r0, [r7, #6]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	2164      	movs	r1, #100	; 0x64
 8000c1e:	f000 fe27 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000c22:	88f8      	ldrh	r0, [r7, #6]
 8000c24:	2301      	movs	r3, #1
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	2168      	movs	r1, #104	; 0x68
 8000c2a:	f000 fe21 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000c2e:	e25a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	6839      	ldr	r1, [r7, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 fb1f 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6839      	ldr	r1, [r7, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 fa55 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000c46:	88f8      	ldrh	r0, [r7, #6]
 8000c48:	2301      	movs	r3, #1
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	2164      	movs	r1, #100	; 0x64
 8000c4e:	f000 fe0f 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000c52:	88f8      	ldrh	r0, [r7, #6]
 8000c54:	2300      	movs	r3, #0
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	2168      	movs	r1, #104	; 0x68
 8000c5a:	f000 fe09 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000c5e:	e242      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	6839      	ldr	r1, [r7, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fb07 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	6839      	ldr	r1, [r7, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fa3d 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8000c76:	88f8      	ldrh	r0, [r7, #6]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	2164      	movs	r1, #100	; 0x64
 8000c7e:	f000 fdf7 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000c82:	88f8      	ldrh	r0, [r7, #6]
 8000c84:	2300      	movs	r3, #0
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	2168      	movs	r1, #104	; 0x68
 8000c8a:	f000 fdf1 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000c8e:	e22a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	6839      	ldr	r1, [r7, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 faef 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	6839      	ldr	r1, [r7, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 fa25 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8000ca6:	88f8      	ldrh	r0, [r7, #6]
 8000ca8:	2300      	movs	r3, #0
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	2164      	movs	r1, #100	; 0x64
 8000cae:	f000 fddf 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000cb2:	88f8      	ldrh	r0, [r7, #6]
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	2168      	movs	r1, #104	; 0x68
 8000cba:	f000 fdd9 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000cbe:	e212      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	6839      	ldr	r1, [r7, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fad7 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	6839      	ldr	r1, [r7, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fa0d 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8000cd6:	88f8      	ldrh	r0, [r7, #6]
 8000cd8:	2301      	movs	r3, #1
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	2164      	movs	r1, #100	; 0x64
 8000cde:	f000 fdc7 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000ce2:	88f8      	ldrh	r0, [r7, #6]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	2168      	movs	r1, #104	; 0x68
 8000cea:	f000 fdc1 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000cee:	e1fa      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	6839      	ldr	r1, [r7, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 fabf 	bl	8001278 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	6839      	ldr	r1, [r7, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f9f5 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8000d06:	88f8      	ldrh	r0, [r7, #6]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	2164      	movs	r1, #100	; 0x64
 8000d0e:	f000 fdaf 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000d12:	88f8      	ldrh	r0, [r7, #6]
 8000d14:	2301      	movs	r3, #1
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	2168      	movs	r1, #104	; 0x68
 8000d1a:	f000 fda9 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    break;
 8000d1e:	e1e2      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fa7a 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	6839      	ldr	r1, [r7, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f9de 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000d34:	88f8      	ldrh	r0, [r7, #6]
 8000d36:	2300      	movs	r3, #0
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	2164      	movs	r1, #100	; 0x64
 8000d3c:	f000 fd98 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000d40:	88f8      	ldrh	r0, [r7, #6]
 8000d42:	2301      	movs	r3, #1
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	2168      	movs	r1, #104	; 0x68
 8000d48:	f000 fd92 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	6839      	ldr	r1, [r7, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f9de 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	6839      	ldr	r1, [r7, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f9ed 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	6839      	ldr	r1, [r7, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 fa75 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000d6e:	e1ba      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fa52 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	6839      	ldr	r1, [r7, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f9b6 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000d84:	88f8      	ldrh	r0, [r7, #6]
 8000d86:	2301      	movs	r3, #1
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	2164      	movs	r1, #100	; 0x64
 8000d8c:	f000 fd70 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000d90:	88f8      	ldrh	r0, [r7, #6]
 8000d92:	2301      	movs	r3, #1
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	2168      	movs	r1, #104	; 0x68
 8000d98:	f000 fd6a 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	6839      	ldr	r1, [r7, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f9b6 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	2201      	movs	r2, #1
 8000dac:	6839      	ldr	r1, [r7, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f9c5 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	6839      	ldr	r1, [r7, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fa4d 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000dbe:	e192      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 fa2a 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	6839      	ldr	r1, [r7, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f98e 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000dd4:	88f8      	ldrh	r0, [r7, #6]
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	2164      	movs	r1, #100	; 0x64
 8000ddc:	f000 fd48 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000de0:	88f8      	ldrh	r0, [r7, #6]
 8000de2:	2300      	movs	r3, #0
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	2168      	movs	r1, #104	; 0x68
 8000de8:	f000 fd42 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	2201      	movs	r2, #1
 8000df0:	6839      	ldr	r1, [r7, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f98e 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	6839      	ldr	r1, [r7, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f99d 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	6839      	ldr	r1, [r7, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 fa25 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000e0e:	e16a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fa02 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	6839      	ldr	r1, [r7, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f966 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000e24:	88f8      	ldrh	r0, [r7, #6]
 8000e26:	2300      	movs	r3, #0
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	2164      	movs	r1, #100	; 0x64
 8000e2c:	f000 fd20 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000e30:	88f8      	ldrh	r0, [r7, #6]
 8000e32:	2301      	movs	r3, #1
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	2168      	movs	r1, #104	; 0x68
 8000e38:	f000 fd1a 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	6839      	ldr	r1, [r7, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f966 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	6839      	ldr	r1, [r7, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f975 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	6839      	ldr	r1, [r7, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f9fd 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000e5e:	e142      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f9da 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	6839      	ldr	r1, [r7, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f93e 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000e74:	88f8      	ldrh	r0, [r7, #6]
 8000e76:	2301      	movs	r3, #1
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	2164      	movs	r1, #100	; 0x64
 8000e7c:	f000 fcf8 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000e80:	88f8      	ldrh	r0, [r7, #6]
 8000e82:	2301      	movs	r3, #1
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	2168      	movs	r1, #104	; 0x68
 8000e88:	f000 fcf2 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	6839      	ldr	r1, [r7, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f93e 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	6839      	ldr	r1, [r7, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f94d 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	6839      	ldr	r1, [r7, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f9d5 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000eae:	e11a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f9b2 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	6839      	ldr	r1, [r7, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f916 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000ec4:	88f8      	ldrh	r0, [r7, #6]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	2164      	movs	r1, #100	; 0x64
 8000ecc:	f000 fcd0 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000ed0:	88f8      	ldrh	r0, [r7, #6]
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	2168      	movs	r1, #104	; 0x68
 8000ed8:	f000 fcca 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	6839      	ldr	r1, [r7, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f916 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	2200      	movs	r2, #0
 8000eec:	6839      	ldr	r1, [r7, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f925 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f9ad 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000efe:	e0f2      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f98a 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f8ee 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000f14:	88f8      	ldrh	r0, [r7, #6]
 8000f16:	2300      	movs	r3, #0
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	2164      	movs	r1, #100	; 0x64
 8000f1c:	f000 fca8 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000f20:	88f8      	ldrh	r0, [r7, #6]
 8000f22:	2301      	movs	r3, #1
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	2168      	movs	r1, #104	; 0x68
 8000f28:	f000 fca2 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	6839      	ldr	r1, [r7, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f8ee 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	6839      	ldr	r1, [r7, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f8fd 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	6839      	ldr	r1, [r7, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 f985 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000f4e:	e0ca      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f962 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	6839      	ldr	r1, [r7, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f8c6 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000f64:	88f8      	ldrh	r0, [r7, #6]
 8000f66:	2301      	movs	r3, #1
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	2164      	movs	r1, #100	; 0x64
 8000f6c:	f000 fc80 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000f70:	88f8      	ldrh	r0, [r7, #6]
 8000f72:	2301      	movs	r3, #1
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	2168      	movs	r1, #104	; 0x68
 8000f78:	f000 fc7a 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	6839      	ldr	r1, [r7, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f8c6 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	6839      	ldr	r1, [r7, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f8d5 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f95d 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000f9e:	e0a2      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f93a 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	2200      	movs	r2, #0
 8000fac:	6839      	ldr	r1, [r7, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f89e 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000fb4:	88f8      	ldrh	r0, [r7, #6]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	2164      	movs	r1, #100	; 0x64
 8000fbc:	f000 fc58 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000fc0:	88f8      	ldrh	r0, [r7, #6]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	2168      	movs	r1, #104	; 0x68
 8000fc8:	f000 fc52 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	6839      	ldr	r1, [r7, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f89e 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6839      	ldr	r1, [r7, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f8ad 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	6839      	ldr	r1, [r7, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f935 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 8000fee:	e07a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f912 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	6839      	ldr	r1, [r7, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f876 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8001004:	88f8      	ldrh	r0, [r7, #6]
 8001006:	2300      	movs	r3, #0
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	2164      	movs	r1, #100	; 0x64
 800100c:	f000 fc30 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001010:	88f8      	ldrh	r0, [r7, #6]
 8001012:	2301      	movs	r3, #1
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	2168      	movs	r1, #104	; 0x68
 8001018:	f000 fc2a 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	2200      	movs	r2, #0
 8001020:	6839      	ldr	r1, [r7, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f876 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	2201      	movs	r2, #1
 800102c:	6839      	ldr	r1, [r7, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f885 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	6839      	ldr	r1, [r7, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f90d 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 800103e:	e052      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f8ea 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	2200      	movs	r2, #0
 800104c:	6839      	ldr	r1, [r7, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f84e 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8001054:	88f8      	ldrh	r0, [r7, #6]
 8001056:	2301      	movs	r3, #1
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	2164      	movs	r1, #100	; 0x64
 800105c:	f000 fc08 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001060:	88f8      	ldrh	r0, [r7, #6]
 8001062:	2301      	movs	r3, #1
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	2168      	movs	r1, #104	; 0x68
 8001068:	f000 fc02 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	2200      	movs	r2, #0
 8001070:	6839      	ldr	r1, [r7, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f84e 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	2201      	movs	r2, #1
 800107c:	6839      	ldr	r1, [r7, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f85d 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	6839      	ldr	r1, [r7, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f000 f8e5 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 800108e:	e02a      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f8c2 	bl	800121c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	2200      	movs	r2, #0
 800109c:	6839      	ldr	r1, [r7, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f826 	bl	80010f0 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80010a4:	88f8      	ldrh	r0, [r7, #6]
 80010a6:	2301      	movs	r3, #1
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	2164      	movs	r1, #100	; 0x64
 80010ac:	f000 fbe0 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80010b0:	88f8      	ldrh	r0, [r7, #6]
 80010b2:	2300      	movs	r3, #0
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	2168      	movs	r1, #104	; 0x68
 80010b8:	f000 fbda 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	2200      	movs	r2, #0
 80010c0:	6839      	ldr	r1, [r7, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f826 	bl	8001114 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	2201      	movs	r2, #1
 80010cc:	6839      	ldr	r1, [r7, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f835 	bl	800113e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	6839      	ldr	r1, [r7, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f8bd 	bl	8001258 <mfxstm32l152_IO_EnablePinIT>
    break;
 80010de:	e002      	b.n	80010e6 <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 80010e0:	797b      	ldrb	r3, [r7, #5]
 80010e2:	73fb      	strb	r3, [r7, #15]
    break;
 80010e4:	bf00      	nop
  }

  return error_code;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	80fb      	strh	r3, [r7, #6]
 80010fc:	4613      	mov	r3, r2
 80010fe:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8001100:	797b      	ldrb	r3, [r7, #5]
 8001102:	88f8      	ldrh	r0, [r7, #6]
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	2160      	movs	r1, #96	; 0x60
 8001108:	f000 fbb2 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	80fb      	strh	r3, [r7, #6]
 8001120:	4613      	mov	r3, r2
 8001122:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8001124:	797b      	ldrb	r3, [r7, #5]
 8001126:	88f8      	ldrh	r0, [r7, #6]
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	214c      	movs	r1, #76	; 0x4c
 800112c:	f000 fba0 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f000 ff33 	bl	8001f9c <MFX_IO_Delay>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	6039      	str	r1, [r7, #0]
 8001148:	80fb      	strh	r3, [r7, #6]
 800114a:	4613      	mov	r3, r2
 800114c:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 800114e:	797b      	ldrb	r3, [r7, #5]
 8001150:	88f8      	ldrh	r0, [r7, #6]
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	2150      	movs	r1, #80	; 0x50
 8001156:	f000 fb8b 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f000 ff1e 	bl	8001f9c <MFX_IO_Delay>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	80fb      	strh	r3, [r7, #6]
 8001174:	4613      	mov	r3, r2
 8001176:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8001178:	797b      	ldrb	r3, [r7, #5]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d006      	beq.n	800118c <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 800117e:	88f8      	ldrh	r0, [r7, #6]
 8001180:	2301      	movs	r3, #1
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	216c      	movs	r1, #108	; 0x6c
 8001186:	f000 fb73 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 800118a:	e005      	b.n	8001198 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 800118c:	88f8      	ldrh	r0, [r7, #6]
 800118e:	2301      	movs	r3, #1
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	2170      	movs	r1, #112	; 0x70
 8001194:	f000 fb6c 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d006      	beq.n	80011ce <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	2110      	movs	r1, #16
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 febb 	bl	8001f40 <MFX_IO_Read>
 80011ca:	4603      	mov	r3, r0
 80011cc:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d006      	beq.n	80011e6 <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	2111      	movs	r1, #17
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 feaf 	bl	8001f40 <MFX_IO_Read>
 80011e2:	4603      	mov	r3, r0
 80011e4:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d006      	beq.n	80011fe <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	2112      	movs	r1, #18
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 fea3 	bl	8001f40 <MFX_IO_Read>
 80011fa:	4603      	mov	r3, r0
 80011fc:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	021a      	lsls	r2, r3, #8
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	441a      	add	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	041b      	lsls	r3, r3, #16
 800120a:	4413      	add	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	4013      	ands	r3, r2
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8001226:	f000 fe11 	bl	8001e4c <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	2101      	movs	r1, #1
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fb92 	bl	8000958 <mfxstm32l152_EnableITSource>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	2101      	movs	r1, #1
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fba3 	bl	8000996 <mfxstm32l152_DisableITSource>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8001264:	88f8      	ldrh	r0, [r7, #6]
 8001266:	2301      	movs	r3, #1
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	2148      	movs	r1, #72	; 0x48
 800126c:	f000 fb00 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8001284:	88f8      	ldrh	r0, [r7, #6]
 8001286:	2300      	movs	r3, #0
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	2148      	movs	r1, #72	; 0x48
 800128c:	f000 faf0 	bl	8001870 <mfxstm32l152_reg24_setPinValue>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	210c      	movs	r1, #12
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fe3f 	bl	8001f40 <MFX_IO_Read>
 80012c2:	4603      	mov	r3, r0
 80012c4:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80012cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d006      	beq.n	80012e2 <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	210d      	movs	r1, #13
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fe31 	bl	8001f40 <MFX_IO_Read>
 80012de:	4603      	mov	r3, r0
 80012e0:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	0c1b      	lsrs	r3, r3, #16
 80012e6:	041b      	lsls	r3, r3, #16
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	210e      	movs	r1, #14
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fe25 	bl	8001f40 <MFX_IO_Read>
 80012f6:	4603      	mov	r3, r0
 80012f8:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	89bb      	ldrh	r3, [r7, #12]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	4413      	add	r3, r2
 8001302:	461a      	mov	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	041b      	lsls	r3, r3, #16
 8001308:	4413      	add	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	4013      	ands	r3, r2
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	6039      	str	r1, [r7, #0]
 8001324:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	0c1b      	lsrs	r3, r3, #16
 8001334:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	2154      	movs	r1, #84	; 0x54
 8001342:	4618      	mov	r0, r3
 8001344:	f000 fde8 	bl	8001f18 <MFX_IO_Write>
  }
  if (pin_8_15)
 8001348:	7bbb      	ldrb	r3, [r7, #14]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 800134e:	7bba      	ldrb	r2, [r7, #14]
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	2155      	movs	r1, #85	; 0x55
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fddf 	bl	8001f18 <MFX_IO_Write>
  }
  if (pin_16_23)
 800135a:	7b7b      	ldrb	r3, [r7, #13]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8001360:	7b7a      	ldrb	r2, [r7, #13]
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	2156      	movs	r1, #86	; 0x56
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fdd6 	bl	8001f18 <MFX_IO_Write>
  }
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	b29b      	uxth	r3, r3
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	4618      	mov	r0, r3
 800138c:	f000 fdd8 	bl	8001f40 <MFX_IO_Read>
 8001390:	4603      	mov	r3, r0
 8001392:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fdb6 	bl	8001f18 <MFX_IO_Write>
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 80013b4:	b084      	sub	sp, #16
 80013b6:	b590      	push	{r4, r7, lr}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4604      	mov	r4, r0
 80013be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80013c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80013c6:	4623      	mov	r3, r4
 80013c8:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	2140      	movs	r1, #64	; 0x40
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fdb0 	bl	8001f40 <MFX_IO_Read>
 80013e0:	4603      	mov	r3, r0
 80013e2:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 80013e4:	7bbb      	ldrb	r3, [r7, #14]
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10b      	bne.n	8001406 <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	7bba      	ldrb	r2, [r7, #14]
 80013fe:	2140      	movs	r1, #64	; 0x40
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fd89 	bl	8001f18 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8001406:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	b2db      	uxtb	r3, r3
 800140e:	f003 030e 	and.w	r3, r3, #14
 8001412:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8001414:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001418:	b25b      	sxtb	r3, r3
 800141a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800141e:	b25a      	sxtb	r2, r3
 8001420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001424:	4313      	orrs	r3, r2
 8001426:	b25b      	sxtb	r3, r3
 8001428:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 800142a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800142e:	b25b      	sxtb	r3, r3
 8001430:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001434:	b25a      	sxtb	r2, r3
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143a:	4313      	orrs	r3, r2
 800143c:	b25b      	sxtb	r3, r3
 800143e:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	b29b      	uxth	r3, r3
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	2180      	movs	r1, #128	; 0x80
 800144a:	4618      	mov	r0, r3
 800144c:	f000 fd64 	bl	8001f18 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001450:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001454:	b25b      	sxtb	r3, r3
 8001456:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800145a:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 800145c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001460:	b25b      	sxtb	r3, r3
 8001462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001466:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001468:	4313      	orrs	r3, r2
 800146a:	b25b      	sxtb	r3, r3
 800146c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	b29b      	uxth	r3, r3
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	2181      	movs	r1, #129	; 0x81
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fd4d 	bl	8001f18 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 800147e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	b29b      	uxth	r3, r3
 8001484:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	b29b      	uxth	r3, r3
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	2182      	movs	r1, #130	; 0x82
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fd41 	bl	8001f18 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 8001496:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001498:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	b29b      	uxth	r3, r3
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	2183      	movs	r1, #131	; 0x83
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 fd37 	bl	8001f18 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 80014aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	2184      	movs	r1, #132	; 0x84
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fd2b 	bl	8001f18 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 80014c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014c4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	2185      	movs	r1, #133	; 0x85
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 fd21 	bl	8001f18 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 80014d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	b29b      	uxth	r3, r3
 80014dc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	2186      	movs	r1, #134	; 0x86
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 fd15 	bl	8001f18 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 80014ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014f0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	2187      	movs	r1, #135	; 0x87
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 fd0b 	bl	8001f18 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 8001502:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	b29b      	uxth	r3, r3
 8001508:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	b29b      	uxth	r3, r3
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	2188      	movs	r1, #136	; 0x88
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fcff 	bl	8001f18 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 800151a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800151c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	b29b      	uxth	r3, r3
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	2189      	movs	r1, #137	; 0x89
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fcf5 	bl	8001f18 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 800152e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	b29b      	uxth	r3, r3
 8001534:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	b29b      	uxth	r3, r3
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	218a      	movs	r1, #138	; 0x8a
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fce9 	bl	8001f18 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 8001546:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001548:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	218b      	movs	r1, #139	; 0x8b
 8001554:	4618      	mov	r0, r3
 8001556:	f000 fcdf 	bl	8001f18 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 800155a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800155c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	b29b      	uxth	r3, r3
 8001564:	7bfa      	ldrb	r2, [r7, #15]
 8001566:	2190      	movs	r1, #144	; 0x90
 8001568:	4618      	mov	r0, r3
 800156a:	f000 fcd5 	bl	8001f18 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 800156e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001570:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	b29b      	uxth	r3, r3
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	2191      	movs	r1, #145	; 0x91
 800157c:	4618      	mov	r0, r3
 800157e:	f000 fccb 	bl	8001f18 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 8001582:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001584:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	b29b      	uxth	r3, r3
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	2192      	movs	r1, #146	; 0x92
 8001590:	4618      	mov	r0, r3
 8001592:	f000 fcc1 	bl	8001f18 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 8001596:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001598:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b29b      	uxth	r3, r3
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	2193      	movs	r1, #147	; 0x93
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 fcb7 	bl	8001f18 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 80015aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80015ac:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	2194      	movs	r1, #148	; 0x94
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fcad 	bl	8001f18 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 80015be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	218c      	movs	r1, #140	; 0x8c
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fca1 	bl	8001f18 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 80015d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015d8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	b29b      	uxth	r3, r3
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	218d      	movs	r1, #141	; 0x8d
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 fc97 	bl	8001f18 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 80015ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	218e      	movs	r1, #142	; 0x8e
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 fc8b 	bl	8001f18 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 8001602:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001604:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	b29b      	uxth	r3, r3
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	218f      	movs	r1, #143	; 0x8f
 8001610:	4618      	mov	r0, r3
 8001612:	f000 fc81 	bl	8001f18 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 8001616:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800161a:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	b29b      	uxth	r3, r3
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	2196      	movs	r1, #150	; 0x96
 8001626:	4618      	mov	r0, r3
 8001628:	f000 fc76 	bl	8001f18 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 800162c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001630:	b25b      	sxtb	r3, r3
 8001632:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001636:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8001638:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800163c:	b25b      	sxtb	r3, r3
 800163e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001642:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8001644:	4313      	orrs	r3, r2
 8001646:	b25b      	sxtb	r3, r3
 8001648:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	b29b      	uxth	r3, r3
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	2197      	movs	r1, #151	; 0x97
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fc5f 	bl	8001f18 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 800165a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800165e:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	b29b      	uxth	r3, r3
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	2198      	movs	r1, #152	; 0x98
 800166a:	4618      	mov	r0, r3
 800166c:	f000 fc54 	bl	8001f18 <MFX_IO_Write>
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800167a:	b004      	add	sp, #16
 800167c:	4770      	bx	lr

0800167e <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	6039      	str	r1, [r7, #0]
 8001688:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	b298      	uxth	r0, r3
 8001690:	f107 020c 	add.w	r2, r7, #12
 8001694:	2303      	movs	r3, #3
 8001696:	2114      	movs	r1, #20
 8001698:	f000 fc66 	bl	8001f68 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 800169c:	7b3b      	ldrb	r3, [r7, #12]
 800169e:	041a      	lsls	r2, r3, #16
 80016a0:	7b7b      	ldrb	r3, [r7, #13]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	4313      	orrs	r3, r2
 80016a6:	7bba      	ldrb	r2, [r7, #14]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	461a      	mov	r2, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	601a      	str	r2, [r3, #0]

}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 80016c2:	f000 fbc3 	bl	8001e4c <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	2102      	movs	r1, #2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff f944 	bl	8000958 <mfxstm32l152_EnableITSource>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	2102      	movs	r1, #2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff f98f 	bl	8000a0a <mfxstm32l152_ClearGlobalIT>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	2102      	movs	r1, #2
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff f96b 	bl	80009de <mfxstm32l152_GlobalITStatus>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	2102      	movs	r1, #2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff f938 	bl	8000996 <mfxstm32l152_DisableITSource>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	b29b      	uxth	r3, r3
 800173e:	2103      	movs	r1, #3
 8001740:	4618      	mov	r0, r3
 8001742:	f000 fbfd 	bl	8001f40 <MFX_IO_Read>
 8001746:	4603      	mov	r3, r0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	b29b      	uxth	r3, r3
 8001760:	2104      	movs	r1, #4
 8001762:	4618      	mov	r0, r3
 8001764:	f000 fbec 	bl	8001f40 <MFX_IO_Read>
 8001768:	4603      	mov	r3, r0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 800177c:	f000 fb66 	bl	8001e4c <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	2104      	movs	r1, #4
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff f8e7 	bl	8000958 <mfxstm32l152_EnableITSource>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	2104      	movs	r1, #4
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff f932 	bl	8000a0a <mfxstm32l152_ClearGlobalIT>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	2104      	movs	r1, #4
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff f90e 	bl	80009de <mfxstm32l152_GlobalITStatus>
 80017c2:	4603      	mov	r3, r0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	2104      	movs	r1, #4
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f8db 	bl	8000996 <mfxstm32l152_DisableITSource>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]
 80017f6:	e00b      	b.n	8001810 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <mfxstm32l152_GetInstance+0x3c>)
 80017fc:	5cd3      	ldrb	r3, [r2, r3]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	88fa      	ldrh	r2, [r7, #6]
 8001802:	429a      	cmp	r2, r3
 8001804:	d101      	bne.n	800180a <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	e006      	b.n	8001818 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	3301      	adds	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d9f0      	bls.n	80017f8 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 8001816:	23ff      	movs	r3, #255	; 0xff
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	20000130 	.word	0x20000130

08001828 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001832:	2300      	movs	r3, #0
 8001834:	73fb      	strb	r3, [r7, #15]
 8001836:	e00f      	b.n	8001858 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	4a0c      	ldr	r2, [pc, #48]	; (800186c <mfxstm32l152_ReleaseInstance+0x44>)
 800183c:	5cd3      	ldrb	r3, [r2, r3]
 800183e:	b29b      	uxth	r3, r3
 8001840:	88fa      	ldrh	r2, [r7, #6]
 8001842:	429a      	cmp	r2, r3
 8001844:	d105      	bne.n	8001852 <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	4a08      	ldr	r2, [pc, #32]	; (800186c <mfxstm32l152_ReleaseInstance+0x44>)
 800184a:	2100      	movs	r1, #0
 800184c:	54d1      	strb	r1, [r2, r3]
      return idx;
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	e006      	b.n	8001860 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	3301      	adds	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d9ec      	bls.n	8001838 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 800185e:	23ff      	movs	r3, #255	; 0xff
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	20000130 	.word	0x20000130

08001870 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	603a      	str	r2, [r7, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4603      	mov	r3, r0
 800187c:	80fb      	strh	r3, [r7, #6]
 800187e:	460b      	mov	r3, r1
 8001880:	717b      	strb	r3, [r7, #5]
 8001882:	4613      	mov	r3, r2
 8001884:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	0c1b      	lsrs	r3, r3, #16
 8001898:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 800189a:	7bbb      	ldrb	r3, [r7, #14]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d01e      	beq.n	80018de <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 80018a0:	797a      	ldrb	r2, [r7, #5]
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fb4a 	bl	8001f40 <MFX_IO_Read>
 80018ac:	4603      	mov	r3, r0
 80018ae:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80018b0:	793b      	ldrb	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d004      	beq.n	80018c0 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	7bbb      	ldrb	r3, [r7, #14]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	73fb      	strb	r3, [r7, #15]
 80018be:	e008      	b.n	80018d2 <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 80018c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	b25a      	sxtb	r2, r3
 80018c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018cc:	4013      	ands	r3, r2
 80018ce:	b25b      	sxtb	r3, r3
 80018d0:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	7979      	ldrb	r1, [r7, #5]
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 fb1d 	bl	8001f18 <MFX_IO_Write>
  }

  if (pin_8_15)
 80018de:	7b7b      	ldrb	r3, [r7, #13]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d022      	beq.n	800192a <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 80018e4:	797b      	ldrb	r3, [r7, #5]
 80018e6:	3301      	adds	r3, #1
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 fb26 	bl	8001f40 <MFX_IO_Read>
 80018f4:	4603      	mov	r3, r0
 80018f6:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80018f8:	793b      	ldrb	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d004      	beq.n	8001908 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	7b7b      	ldrb	r3, [r7, #13]
 8001902:	4313      	orrs	r3, r2
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	e008      	b.n	800191a <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8001908:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800190c:	43db      	mvns	r3, r3
 800190e:	b25a      	sxtb	r2, r3
 8001910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001914:	4013      	ands	r3, r2
 8001916:	b25b      	sxtb	r3, r3
 8001918:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 800191a:	797b      	ldrb	r3, [r7, #5]
 800191c:	3301      	adds	r3, #1
 800191e:	b2d9      	uxtb	r1, r3
 8001920:	7bfa      	ldrb	r2, [r7, #15]
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	4618      	mov	r0, r3
 8001926:	f000 faf7 	bl	8001f18 <MFX_IO_Write>
  }

  if (pin_16_23)
 800192a:	7b3b      	ldrb	r3, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d022      	beq.n	8001976 <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 8001930:	797b      	ldrb	r3, [r7, #5]
 8001932:	3302      	adds	r3, #2
 8001934:	b2da      	uxtb	r2, r3
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fb00 	bl	8001f40 <MFX_IO_Read>
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8001944:	793b      	ldrb	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	7b3b      	ldrb	r3, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	e008      	b.n	8001966 <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8001954:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001958:	43db      	mvns	r3, r3
 800195a:	b25a      	sxtb	r2, r3
 800195c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001960:	4013      	ands	r3, r2
 8001962:	b25b      	sxtb	r3, r3
 8001964:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 8001966:	797b      	ldrb	r3, [r7, #5]
 8001968:	3302      	adds	r3, #2
 800196a:	b2d9      	uxtb	r1, r3
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	4618      	mov	r0, r3
 8001972:	f000 fad1 	bl	8001f18 <MFX_IO_Write>
  }
}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  while (1);
 8001982:	e7fe      	b.n	8001982 <BSP_ErrorHandler+0x4>

08001984 <BSP_LED_On>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d109      	bne.n	80019a8 <BSP_LED_On+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_RESET);
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <BSP_LED_On+0x3c>)
 8001998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800199c:	2200      	movs	r2, #0
 800199e:	4619      	mov	r1, r3
 80019a0:	4808      	ldr	r0, [pc, #32]	; (80019c4 <BSP_LED_On+0x40>)
 80019a2:	f004 fc39 	bl	8006218 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
  }
}
 80019a6:	e007      	b.n	80019b8 <BSP_LED_On+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <BSP_LED_On+0x3c>)
 80019ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fd24 	bl	8002400 <BSP_IO_WritePin>
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	08011a60 	.word	0x08011a60
 80019c4:	48000400 	.word	0x48000400

080019c8 <BSP_LED_Off>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d109      	bne.n	80019ec <BSP_LED_Off+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_SET);
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <BSP_LED_Off+0x3c>)
 80019dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019e0:	2201      	movs	r2, #1
 80019e2:	4619      	mov	r1, r3
 80019e4:	4808      	ldr	r0, [pc, #32]	; (8001a08 <BSP_LED_Off+0x40>)
 80019e6:	f004 fc17 	bl	8006218 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }
}
 80019ea:	e007      	b.n	80019fc <BSP_LED_Off+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <BSP_LED_Off+0x3c>)
 80019f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019f4:	2101      	movs	r1, #1
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 fd02 	bl	8002400 <BSP_IO_WritePin>
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	08011a60 	.word	0x08011a60
 8001a08:	48000400 	.word	0x48000400

08001a0c <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 8001a10:	4812      	ldr	r0, [pc, #72]	; (8001a5c <I2C2_Init+0x50>)
 8001a12:	f005 f838 	bl	8006a86 <HAL_I2C_GetState>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d11d      	bne.n	8001a58 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <I2C2_Init+0x50>)
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <I2C2_Init+0x54>)
 8001a20:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <I2C2_Init+0x50>)
 8001a24:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <I2C2_Init+0x58>)
 8001a26:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <I2C2_Init+0x50>)
 8001a2a:	2270      	movs	r2, #112	; 0x70
 8001a2c:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <I2C2_Init+0x50>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <I2C2_Init+0x50>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <I2C2_Init+0x50>)
 8001a3c:	22ff      	movs	r2, #255	; 0xff
 8001a3e:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <I2C2_Init+0x50>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <I2C2_Init+0x50>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 8001a4c:	4803      	ldr	r0, [pc, #12]	; (8001a5c <I2C2_Init+0x50>)
 8001a4e:	f000 f80b 	bl	8001a68 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 8001a52:	4802      	ldr	r0, [pc, #8]	; (8001a5c <I2C2_Init+0x50>)
 8001a54:	f004 fc10 	bl	8006278 <HAL_I2C_Init>
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000134 	.word	0x20000134
 8001a60:	40005800 	.word	0x40005800
 8001a64:	40403e5d 	.word	0x40403e5d

08001a68 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b0ae      	sub	sp, #184	; 0xb8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a37      	ldr	r2, [pc, #220]	; (8001b54 <I2C2_MspInit+0xec>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d168      	bne.n	8001b4c <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8001a7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a82:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8001a84:	f107 0318 	add.w	r3, r7, #24
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f006 f997 	bl	8007dbc <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8001a8e:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	4a31      	ldr	r2, [pc, #196]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9a:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8001aa6:	4b2c      	ldr	r3, [pc, #176]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	4a2b      	ldr	r2, [pc, #172]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab2:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 8001abe:	2310      	movs	r3, #16
 8001ac0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8001ac4:	2312      	movs	r3, #18
 8001ac6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 8001adc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	481e      	ldr	r0, [pc, #120]	; (8001b5c <I2C2_MspInit+0xf4>)
 8001ae4:	f004 f914 	bl	8005d10 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 8001ae8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 8001af0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001af4:	4619      	mov	r1, r3
 8001af6:	481a      	ldr	r0, [pc, #104]	; (8001b60 <I2C2_MspInit+0xf8>)
 8001af8:	f004 f90a 	bl	8005d10 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 8001afc:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b00:	4a15      	ldr	r2, [pc, #84]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001b02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b06:	6593      	str	r3, [r2, #88]	; 0x58
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b18:	4a0f      	ldr	r2, [pc, #60]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001b1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b1e:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b24:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <I2C2_MspInit+0xf0>)
 8001b26:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b2a:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2100      	movs	r1, #0
 8001b30:	2021      	movs	r0, #33	; 0x21
 8001b32:	f003 f946 	bl	8004dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8001b36:	2021      	movs	r0, #33	; 0x21
 8001b38:	f003 f95f 	bl	8004dfa <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2100      	movs	r1, #0
 8001b40:	2022      	movs	r0, #34	; 0x22
 8001b42:	f003 f93e 	bl	8004dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8001b46:	2022      	movs	r0, #34	; 0x22
 8001b48:	f003 f957 	bl	8004dfa <HAL_NVIC_EnableIRQ>
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	37b8      	adds	r7, #184	; 0xb8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40005800 	.word	0x40005800
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	48001c00 	.word	0x48001c00
 8001b60:	48000400 	.word	0x48000400

08001b64 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 8001b68:	4806      	ldr	r0, [pc, #24]	; (8001b84 <I2C2_DeInit+0x20>)
 8001b6a:	f004 ff8c 	bl	8006a86 <HAL_I2C_GetState>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 8001b74:	4803      	ldr	r0, [pc, #12]	; (8001b84 <I2C2_DeInit+0x20>)
 8001b76:	f004 fc0e 	bl	8006396 <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 8001b7a:	4802      	ldr	r0, [pc, #8]	; (8001b84 <I2C2_DeInit+0x20>)
 8001b7c:	f000 f804 	bl	8001b88 <I2C2_MspDeInit>
  }
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000134 	.word	0x20000134

08001b88 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1f      	ldr	r2, [pc, #124]	; (8001c14 <I2C2_MspDeInit+0x8c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d138      	bne.n	8001c0c <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	4a1e      	ldr	r2, [pc, #120]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	4a18      	ldr	r2, [pc, #96]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 8001bca:	2110      	movs	r1, #16
 8001bcc:	4813      	ldr	r0, [pc, #76]	; (8001c1c <I2C2_MspDeInit+0x94>)
 8001bce:	f004 fa31 	bl	8006034 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 8001bd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bd6:	4812      	ldr	r0, [pc, #72]	; (8001c20 <I2C2_MspDeInit+0x98>)
 8001bd8:	f004 fa2c 	bl	8006034 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be0:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001be2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001be6:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bec:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001bee:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001bf2:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf8:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <I2C2_MspDeInit+0x90>)
 8001bfa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001bfe:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8001c00:	2021      	movs	r0, #33	; 0x21
 8001c02:	f003 f908 	bl	8004e16 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8001c06:	2022      	movs	r0, #34	; 0x22
 8001c08:	f003 f905 	bl	8004e16 <HAL_NVIC_DisableIRQ>
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40005800 	.word	0x40005800
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	48001c00 	.word	0x48001c00
 8001c20:	48000400 	.word	0x48000400

08001c24 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af04      	add	r7, sp, #16
 8001c2a:	4604      	mov	r4, r0
 8001c2c:	4608      	mov	r0, r1
 8001c2e:	4611      	mov	r1, r2
 8001c30:	461a      	mov	r2, r3
 8001c32:	4623      	mov	r3, r4
 8001c34:	80fb      	strh	r3, [r7, #6]
 8001c36:	4603      	mov	r3, r0
 8001c38:	80bb      	strh	r3, [r7, #4]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	807b      	strh	r3, [r7, #2]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c46:	b672      	cpsid	i
}
 8001c48:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <I2C2_WriteData+0x5c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	8878      	ldrh	r0, [r7, #2]
 8001c50:	88ba      	ldrh	r2, [r7, #4]
 8001c52:	88f9      	ldrh	r1, [r7, #6]
 8001c54:	9302      	str	r3, [sp, #8]
 8001c56:	2301      	movs	r3, #1
 8001c58:	9301      	str	r3, [sp, #4]
 8001c5a:	1c7b      	adds	r3, r7, #1
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4808      	ldr	r0, [pc, #32]	; (8001c84 <I2C2_WriteData+0x60>)
 8001c62:	f004 fbdb 	bl	800641c <HAL_I2C_Mem_Write>
 8001c66:	4603      	mov	r3, r0
 8001c68:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c6a:	b662      	cpsie	i
}
 8001c6c:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8001c74:	f000 f890 	bl	8001d98 <I2C2_Error>
  }
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}
 8001c80:	20000078 	.word	0x20000078
 8001c84:	20000134 	.word	0x20000134

08001c88 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af04      	add	r7, sp, #16
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
 8001c92:	460b      	mov	r3, r1
 8001c94:	80bb      	strh	r3, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca2:	b672      	cpsid	i
}
 8001ca4:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <I2C2_ReadData+0x60>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	8878      	ldrh	r0, [r7, #2]
 8001cac:	88ba      	ldrh	r2, [r7, #4]
 8001cae:	88f9      	ldrh	r1, [r7, #6]
 8001cb0:	9302      	str	r3, [sp, #8]
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	f107 030e 	add.w	r3, r7, #14
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	480b      	ldr	r0, [pc, #44]	; (8001cec <I2C2_ReadData+0x64>)
 8001cc0:	f004 fcc0 	bl	8006644 <HAL_I2C_Mem_Read>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8001cc8:	b662      	cpsie	i
}
 8001cca:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d004      	beq.n	8001cdc <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8001cd2:	f000 f861 	bl	8001d98 <I2C2_Error>
    HAL_Delay(200);
 8001cd6:	20c8      	movs	r0, #200	; 0xc8
 8001cd8:	f002 ff50 	bl	8004b7c <HAL_Delay>
  }

  return value;
 8001cdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000078 	.word	0x20000078
 8001cec:	20000134 	.word	0x20000134

08001cf0 <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d04:	b672      	cpsid	i
}
 8001d06:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 8001d08:	88f9      	ldrh	r1, [r7, #6]
 8001d0a:	2332      	movs	r3, #50	; 0x32
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	480a      	ldr	r0, [pc, #40]	; (8001d38 <I2C2_isDeviceReady+0x48>)
 8001d10:	f004 fdb2 	bl	8006878 <HAL_I2C_IsDeviceReady>
 8001d14:	4603      	mov	r3, r0
 8001d16:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d18:	b662      	cpsie	i
}
 8001d1a:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d004      	beq.n	8001d2c <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8001d22:	f000 f839 	bl	8001d98 <I2C2_Error>
    HAL_Delay(200);
 8001d26:	20c8      	movs	r0, #200	; 0xc8
 8001d28:	f002 ff28 	bl	8004b7c <HAL_Delay>
  }

  return value;
 8001d2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000134 	.word	0x20000134

08001d3c <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af04      	add	r7, sp, #16
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	4603      	mov	r3, r0
 8001d46:	81fb      	strh	r3, [r7, #14]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	81bb      	strh	r3, [r7, #12]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d54:	b672      	cpsid	i
}
 8001d56:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <I2C2_ReadBuffer+0x54>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	8978      	ldrh	r0, [r7, #10]
 8001d5e:	89ba      	ldrh	r2, [r7, #12]
 8001d60:	89f9      	ldrh	r1, [r7, #14]
 8001d62:	9302      	str	r3, [sp, #8]
 8001d64:	8c3b      	ldrh	r3, [r7, #32]
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4809      	ldr	r0, [pc, #36]	; (8001d94 <I2C2_ReadBuffer+0x58>)
 8001d70:	f004 fc68 	bl	8006644 <HAL_I2C_Mem_Read>
 8001d74:	4603      	mov	r3, r0
 8001d76:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d78:	b662      	cpsie	i
}
 8001d7a:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8001d82:	f000 f809 	bl	8001d98 <I2C2_Error>
  }

  return status;
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000078 	.word	0x20000078
 8001d94:	20000134 	.word	0x20000134

08001d98 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 8001d9c:	f7ff fdef 	bl	800197e <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 8001da0:	4803      	ldr	r0, [pc, #12]	; (8001db0 <I2C2_Error+0x18>)
 8001da2:	f004 faf8 	bl	8006396 <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 8001da6:	f7ff fe31 	bl	8001a0c <I2C2_Init>
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000134 	.word	0x20000134

08001db4 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 8001db8:	f7ff fe28 	bl	8001a0c <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 8001dbc:	2104      	movs	r1, #4
 8001dbe:	2084      	movs	r0, #132	; 0x84
 8001dc0:	f7ff ff96 	bl	8001cf0 <I2C2_isDeviceReady>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 8001dca:	f7ff fdd8 	bl	800197e <BSP_ErrorHandler>
  }
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <MFX_IO_DeInit+0x6c>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <MFX_IO_DeInit+0x6c>)
 8001de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <MFX_IO_DeInit+0x6c>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8001df2:	2340      	movs	r3, #64	; 0x40
 8001df4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	4619      	mov	r1, r3
 8001e08:	480e      	ldr	r0, [pc, #56]	; (8001e44 <MFX_IO_DeInit+0x70>)
 8001e0a:	f003 ff81 	bl	8005d10 <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 8001e0e:	2017      	movs	r0, #23
 8001e10:	f003 f801 	bl	8004e16 <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 8001e14:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <MFX_IO_DeInit+0x6c>)
 8001e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e18:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <MFX_IO_DeInit+0x6c>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <MFX_IO_DeInit+0x6c>)
 8001e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 8001e2c:	2120      	movs	r1, #32
 8001e2e:	4806      	ldr	r0, [pc, #24]	; (8001e48 <MFX_IO_DeInit+0x74>)
 8001e30:	f004 f900 	bl	8006034 <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 8001e34:	f7ff fe96 	bl	8001b64 <I2C2_DeInit>
}
 8001e38:	bf00      	nop
 8001e3a:	3720      	adds	r7, #32
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000
 8001e44:	48001c00 	.word	0x48001c00
 8001e48:	48000800 	.word	0x48000800

08001e4c <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 8001e52:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <MFX_IO_ITConfig+0x54>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <MFX_IO_ITConfig+0x54>)
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <MFX_IO_ITConfig+0x54>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 8001e76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e7a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4808      	ldr	r0, [pc, #32]	; (8001ea4 <MFX_IO_ITConfig+0x58>)
 8001e82:	f003 ff45 	bl	8005d10 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 8001e86:	220f      	movs	r2, #15
 8001e88:	210f      	movs	r1, #15
 8001e8a:	2017      	movs	r0, #23
 8001e8c:	f002 ff99 	bl	8004dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 8001e90:	2017      	movs	r0, #23
 8001e92:	f002 ffb2 	bl	8004dfa <HAL_NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	48000800 	.word	0x48000800

08001ea8 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MFX_IO_EnableWakeupPin+0x40>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <MFX_IO_EnableWakeupPin+0x40>)
 8001eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MFX_IO_EnableWakeupPin+0x40>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8001ec6:	2340      	movs	r3, #64	; 0x40
 8001ec8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4804      	ldr	r0, [pc, #16]	; (8001eec <MFX_IO_EnableWakeupPin+0x44>)
 8001edc:	f003 ff18 	bl	8005d10 <HAL_GPIO_Init>
}
 8001ee0:	bf00      	nop
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	48001c00 	.word	0x48001c00

08001ef0 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2140      	movs	r1, #64	; 0x40
 8001ef8:	4806      	ldr	r0, [pc, #24]	; (8001f14 <MFX_IO_Wakeup+0x24>)
 8001efa:	f004 f98d 	bl	8006218 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 8001efe:	2001      	movs	r0, #1
 8001f00:	f002 fe3c 	bl	8004b7c <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2140      	movs	r1, #64	; 0x40
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <MFX_IO_Wakeup+0x24>)
 8001f0a:	f004 f985 	bl	8006218 <HAL_GPIO_WritePin>
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	48001c00 	.word	0x48001c00

08001f18 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80fb      	strh	r3, [r7, #6]
 8001f22:	460b      	mov	r3, r1
 8001f24:	717b      	strb	r3, [r7, #5]
 8001f26:	4613      	mov	r3, r2
 8001f28:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 8001f2a:	797b      	ldrb	r3, [r7, #5]
 8001f2c:	b299      	uxth	r1, r3
 8001f2e:	793b      	ldrb	r3, [r7, #4]
 8001f30:	88f8      	ldrh	r0, [r7, #6]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f7ff fe76 	bl	8001c24 <I2C2_WriteData>
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	460a      	mov	r2, r1
 8001f4a:	80fb      	strh	r3, [r7, #6]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 8001f50:	797b      	ldrb	r3, [r7, #5]
 8001f52:	b299      	uxth	r1, r3
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	2201      	movs	r2, #1
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fe95 	bl	8001c88 <I2C2_ReadData>
 8001f5e:	4603      	mov	r3, r0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	60ba      	str	r2, [r7, #8]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4603      	mov	r3, r0
 8001f74:	81fb      	strh	r3, [r7, #14]
 8001f76:	460b      	mov	r3, r1
 8001f78:	737b      	strb	r3, [r7, #13]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001f7e:	7b7b      	ldrb	r3, [r7, #13]
 8001f80:	b299      	uxth	r1, r3
 8001f82:	89f8      	ldrh	r0, [r7, #14]
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f7ff fed6 	bl	8001d3c <I2C2_ReadBuffer>
 8001f90:	4603      	mov	r3, r0
 8001f92:	b29b      	uxth	r3, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f002 fde9 	bl	8004b7c <HAL_Delay>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <BSP_CAMERA_Init>:
  * @param  Resolution : camera sensor requested resolution (x, y) : standard resolution
  *         naming QQVGA, QVGA, VGA ...
  * @retval Camera status
  */
uint8_t BSP_CAMERA_Init(uint32_t Resolution)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08c      	sub	sp, #48	; 0x30
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *phdcmi;
  uint8_t status = CAMERA_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	OV5640_IO_t              IOCtx;
	static OV5640_Object_t   OV5640Obj;

	/* Configure the audio driver */
	IOCtx.Address     = 0x78U; //# CAMERA_OV5640_ADDRESS
 8001fc2:	2378      	movs	r3, #120	; 0x78
 8001fc4:	833b      	strh	r3, [r7, #24]
	IOCtx.Init        = I2C2_Init;
 8001fc6:	4b4e      	ldr	r3, [pc, #312]	; (8002100 <BSP_CAMERA_Init+0x14c>)
 8001fc8:	613b      	str	r3, [r7, #16]
	IOCtx.DeInit      = I2C2_DeInit;
 8001fca:	4b4e      	ldr	r3, [pc, #312]	; (8002104 <BSP_CAMERA_Init+0x150>)
 8001fcc:	617b      	str	r3, [r7, #20]

  /* Get the DCMI handle structure */
  phdcmi = &hdcmi;
 8001fce:	4b4e      	ldr	r3, [pc, #312]	; (8002108 <BSP_CAMERA_Init+0x154>)
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize the IO functionalities */
  BSP_IO_Init();
 8001fd2:	f000 f9b5 	bl	8002340 <BSP_IO_Init>


  /*** Configures the DCMI to interface with the camera module ***/
  /* DCMI configuration */
  phdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 8001fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd8:	2200      	movs	r2, #0
 8001fda:	615a      	str	r2, [r3, #20]
  phdcmi->Init.HSPolarity       = DCMI_HSPOLARITY_HIGH;
 8001fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fde:	2240      	movs	r2, #64	; 0x40
 8001fe0:	611a      	str	r2, [r3, #16]
  phdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 8001fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	605a      	str	r2, [r3, #4]
  phdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 8001fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	60da      	str	r2, [r3, #12]
  phdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  phdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 8001ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	609a      	str	r2, [r3, #8]
  phdcmi->Init.ByteSelectMode   = DCMI_BSM_ALL;
 8001ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24
  phdcmi->Init.LineSelectMode   = DCMI_LSM_ALL;
 8002000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002002:	2200      	movs	r2, #0
 8002004:	62da      	str	r2, [r3, #44]	; 0x2c
  phdcmi->Init.JPEGMode			= DCMI_JPEG_ENABLE;
 8002006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002008:	2208      	movs	r2, #8
 800200a:	621a      	str	r2, [r3, #32]
  phdcmi->Instance              = DCMI;
 800200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200e:	4a3f      	ldr	r2, [pc, #252]	; (800210c <BSP_CAMERA_Init+0x158>)
 8002010:	601a      	str	r2, [r3, #0]

  /* Camera initialization */
  BSP_CAMERA_MspInit(&hdcmi, NULL);
 8002012:	2100      	movs	r1, #0
 8002014:	483c      	ldr	r0, [pc, #240]	; (8002108 <BSP_CAMERA_Init+0x154>)
 8002016:	f000 f885 	bl	8002124 <BSP_CAMERA_MspInit>

  uint32_t CameraId;
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800201a:	f107 0310 	add.w	r3, r7, #16
 800201e:	4619      	mov	r1, r3
 8002020:	483b      	ldr	r0, [pc, #236]	; (8002110 <BSP_CAMERA_Init+0x15c>)
 8002022:	f001 fb91 	bl	8003748 <OV5640_RegisterBusIO>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <BSP_CAMERA_Init+0x7e>
  {
	  printf("OV5640_RegisterBusIO ERROR!\r\n");
 800202c:	4839      	ldr	r0, [pc, #228]	; (8002114 <BSP_CAMERA_Init+0x160>)
 800202e:	f00e ff09 	bl	8010e44 <puts>
  }
  /* Read ID of Camera module via I2C */
  if (OV5640_ReadID(&OV5640Obj, &CameraId) == OV5640_ID)
 8002032:	f107 030c 	add.w	r3, r7, #12
 8002036:	4619      	mov	r1, r3
 8002038:	4835      	ldr	r0, [pc, #212]	; (8002110 <BSP_CAMERA_Init+0x15c>)
 800203a:	f001 fe45 	bl	8003cc8 <OV5640_ReadID>
 800203e:	4603      	mov	r3, r0
 8002040:	f245 6240 	movw	r2, #22080	; 0x5640
 8002044:	4293      	cmp	r3, r2
 8002046:	d151      	bne.n	80020ec <BSP_CAMERA_Init+0x138>
  {
    /* Initialize the camera driver structure */
    //camera_drv = &ov5640_drv;
    CameraHwAddress = CAMERA_I2C_ADDRESS;
 8002048:	4b33      	ldr	r3, [pc, #204]	; (8002118 <BSP_CAMERA_Init+0x164>)
 800204a:	2278      	movs	r2, #120	; 0x78
 800204c:	601a      	str	r2, [r3, #0]
    /* DCMI Initialization */
    HAL_DCMI_Init(phdcmi);
 800204e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002050:	f002 fefc 	bl	8004e4c <HAL_DCMI_Init>
    /* Camera Module Initialization via I2C to the wanted 'Resolution' */
    if (Resolution == CAMERA_R320x240)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d121      	bne.n	800209e <BSP_CAMERA_Init+0xea>
    {
      /* For 240x240 resolution, the OV9655 sensor is set to QVGA resolution
       * as OV9655 doesn't supports 240x240  resolution,
       * then DCMI is configured to output a 240x240 cropped window */
      OV5640_Init(&OV5640Obj, RESOLUTION_R320x240, OV5640_RGB565);
 800205a:	2200      	movs	r2, #0
 800205c:	2101      	movs	r1, #1
 800205e:	482c      	ldr	r0, [pc, #176]	; (8002110 <BSP_CAMERA_Init+0x15c>)
 8002060:	f001 fb98 	bl	8003794 <OV5640_Init>
                          (240 * 1) - 1);    /* All 240 lines are captured */
      HAL_DCMI_EnableCROP(phdcmi);
#endif

      /* Set the RGB565 mode */
      MFX_IO_Write(CameraHwAddress, 0x12 /*OV9655_COM7*/, 0x63);
 8002064:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <BSP_CAMERA_Init+0x164>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	2263      	movs	r2, #99	; 0x63
 800206c:	2112      	movs	r1, #18
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff ff52 	bl	8001f18 <MFX_IO_Write>
      MFX_IO_Write(CameraHwAddress, 0x40 /*OV9655_COM15*/, 0x10);
 8002074:	4b28      	ldr	r3, [pc, #160]	; (8002118 <BSP_CAMERA_Init+0x164>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	2210      	movs	r2, #16
 800207c:	2140      	movs	r1, #64	; 0x40
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ff4a 	bl	8001f18 <MFX_IO_Write>
      /* Invert the HRef signal */
      MFX_IO_Write(CameraHwAddress, 0x15 /*OV9655_COM10*/, 0x08);
 8002084:	4b24      	ldr	r3, [pc, #144]	; (8002118 <BSP_CAMERA_Init+0x164>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	2208      	movs	r2, #8
 800208c:	2115      	movs	r1, #21
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ff42 	bl	8001f18 <MFX_IO_Write>
      HAL_Delay(500);
 8002094:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002098:	f002 fd70 	bl	8004b7c <HAL_Delay>
 800209c:	e00b      	b.n	80020b6 <BSP_CAMERA_Init+0x102>
    }
    else
    {
      camera_drv->Init(CameraHwAddress, Resolution);
 800209e:	4b1f      	ldr	r3, [pc, #124]	; (800211c <BSP_CAMERA_Init+0x168>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <BSP_CAMERA_Init+0x164>)
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	b292      	uxth	r2, r2
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4610      	mov	r0, r2
 80020ae:	4798      	blx	r3
      HAL_DCMI_DisableCROP(phdcmi);
 80020b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020b2:	f003 f8fb 	bl	80052ac <HAL_DCMI_DisableCrop>
    }

    CameraCurrentResolution = Resolution;
 80020b6:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <BSP_CAMERA_Init+0x16c>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6013      	str	r3, [r2, #0]

    OV5640_SetLightMode(&OV5640Obj, OV5640_LIGHT_AUTO);
 80020bc:	2100      	movs	r1, #0
 80020be:	4814      	ldr	r0, [pc, #80]	; (8002110 <BSP_CAMERA_Init+0x15c>)
 80020c0:	f001 fe30 	bl	8003d24 <OV5640_SetLightMode>
    OV5640_SetSaturation(&OV5640Obj, 0);
 80020c4:	2100      	movs	r1, #0
 80020c6:	4812      	ldr	r0, [pc, #72]	; (8002110 <BSP_CAMERA_Init+0x15c>)
 80020c8:	f001 ff7c 	bl	8003fc4 <OV5640_SetSaturation>
    OV5640_SetBrightness(&OV5640Obj, 0);
 80020cc:	2100      	movs	r1, #0
 80020ce:	4810      	ldr	r0, [pc, #64]	; (8002110 <BSP_CAMERA_Init+0x15c>)
 80020d0:	f001 ff30 	bl	8003f34 <OV5640_SetBrightness>
    OV5640_SetHueDegree(&OV5640Obj, 1);
 80020d4:	2101      	movs	r1, #1
 80020d6:	480e      	ldr	r0, [pc, #56]	; (8002110 <BSP_CAMERA_Init+0x15c>)
 80020d8:	f001 ffba 	bl	8004050 <OV5640_SetHueDegree>

    OV5640_SetPixelFormat(&OV5640Obj, OV5640_JPEG);
 80020dc:	2108      	movs	r1, #8
 80020de:	480c      	ldr	r0, [pc, #48]	; (8002110 <BSP_CAMERA_Init+0x15c>)
 80020e0:	f001 fbc8 	bl	8003874 <OV5640_SetPixelFormat>



    /* Return CAMERA_OK status */
    status = CAMERA_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80020ea:	e002      	b.n	80020f2 <BSP_CAMERA_Init+0x13e>
  }
  else
  {
    /* Return CAMERA_NOT_SUPPORTED status */
    status = CAMERA_NOT_SUPPORTED;
 80020ec:	2304      	movs	r3, #4
 80020ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return status;
 80020f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3730      	adds	r7, #48	; 0x30
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	08001a0d 	.word	0x08001a0d
 8002104:	08001b65 	.word	0x08001b65
 8002108:	2000028c 	.word	0x2000028c
 800210c:	50050000 	.word	0x50050000
 8002110:	20000194 	.word	0x20000194
 8002114:	080116f4 	.word	0x080116f4
 8002118:	20000190 	.word	0x20000190
 800211c:	20000188 	.word	0x20000188
 8002120:	2000018c 	.word	0x2000018c

08002124 <BSP_CAMERA_MspInit>:
  * @param  hdcmi: HDMI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_CAMERA_MspInit(DCMI_HandleTypeDef *hdcmi, void *Params)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08e      	sub	sp, #56	; 0x38
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_handler;
  GPIO_InitTypeDef gpio_init_structure;

  /*** Enable peripherals and GPIO clocks ***/
  /* Enable DCMI clock */
  __HAL_RCC_DCMI_CLK_ENABLE();
 800212e:	4b64      	ldr	r3, [pc, #400]	; (80022c0 <BSP_CAMERA_MspInit+0x19c>)
 8002130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002132:	4a63      	ldr	r2, [pc, #396]	; (80022c0 <BSP_CAMERA_MspInit+0x19c>)
 8002134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800213a:	4b61      	ldr	r3, [pc, #388]	; (80022c0 <BSP_CAMERA_MspInit+0x19c>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002142:	623b      	str	r3, [r7, #32]
 8002144:	6a3b      	ldr	r3, [r7, #32]

  /* Enable DMA2 clock */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002146:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <BSP_CAMERA_MspInit+0x19c>)
 8002148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800214a:	4a5d      	ldr	r2, [pc, #372]	; (80022c0 <BSP_CAMERA_MspInit+0x19c>)
 800214c:	f043 0302 	orr.w	r3, r3, #2
 8002150:	6493      	str	r3, [r2, #72]	; 0x48
 8002152:	4b5b      	ldr	r3, [pc, #364]	; (80022c0 <BSP_CAMERA_MspInit+0x19c>)
 8002154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	4b58      	ldr	r3, [pc, #352]	; (80022c0 <BSP_CAMERA_MspInit+0x19c>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	4a57      	ldr	r2, [pc, #348]	; (80022c0 <BSP_CAMERA_MspInit+0x19c>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800216a:	4b55      	ldr	r3, [pc, #340]	; (80022c0 <BSP_CAMERA_MspInit+0x19c>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	61bb      	str	r3, [r7, #24]
 8002174:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002176:	4b52      	ldr	r3, [pc, #328]	; (80022c0 <BSP_CAMERA_MspInit+0x19c>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217a:	4a51      	ldr	r2, [pc, #324]	; (80022c0 <BSP_CAMERA_MspInit+0x19c>)
 800217c:	f043 0310 	orr.w	r3, r3, #16
 8002180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002182:	4b4f      	ldr	r3, [pc, #316]	; (80022c0 <BSP_CAMERA_MspInit+0x19c>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800218e:	4b4c      	ldr	r3, [pc, #304]	; (80022c0 <BSP_CAMERA_MspInit+0x19c>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	4a4b      	ldr	r2, [pc, #300]	; (80022c0 <BSP_CAMERA_MspInit+0x19c>)
 8002194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800219a:	4b49      	ldr	r3, [pc, #292]	; (80022c0 <BSP_CAMERA_MspInit+0x19c>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80021a6:	4b46      	ldr	r3, [pc, #280]	; (80022c0 <BSP_CAMERA_MspInit+0x19c>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	4a45      	ldr	r2, [pc, #276]	; (80022c0 <BSP_CAMERA_MspInit+0x19c>)
 80021ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021b2:	4b43      	ldr	r3, [pc, #268]	; (80022c0 <BSP_CAMERA_MspInit+0x19c>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]

  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_4);
 80021be:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80021c2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80021c6:	2000      	movs	r0, #0
 80021c8:	f005 fca0 	bl	8007b0c <HAL_RCC_MCOConfig>
  __HAL_RCC_HSI48_ENABLE();
 80021cc:	4b3c      	ldr	r3, [pc, #240]	; (80022c0 <BSP_CAMERA_MspInit+0x19c>)
 80021ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021d2:	4a3b      	ldr	r2, [pc, #236]	; (80022c0 <BSP_CAMERA_MspInit+0x19c>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  HAL_Delay(10); // HSI48 should start in 10ms
 80021dc:	200a      	movs	r0, #10
 80021de:	f002 fccd 	bl	8004b7c <HAL_Delay>


  /*** Configure the GPIO ***/
  /* Configure DCMI GPIO as alternate function */
  gpio_init_structure.Pin       = GPIO_PIN_5;
 80021e2:	2320      	movs	r3, #32
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80021ee:	2303      	movs	r3, #3
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_DCMI;
 80021f2:	230a      	movs	r3, #10
 80021f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80021f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fa:	4619      	mov	r1, r3
 80021fc:	4831      	ldr	r0, [pc, #196]	; (80022c4 <BSP_CAMERA_MspInit+0x1a0>)
 80021fe:	f003 fd87 	bl	8005d10 <HAL_GPIO_Init>


  gpio_init_structure.Pin       = GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | \
 8002202:	f645 7320 	movw	r3, #24352	; 0x5f20
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
                                  GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_14;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002210:	2303      	movs	r3, #3
 8002212:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_DCMI;
 8002214:	230a      	movs	r3, #10
 8002216:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221c:	4619      	mov	r1, r3
 800221e:	482a      	ldr	r0, [pc, #168]	; (80022c8 <BSP_CAMERA_MspInit+0x1a4>)
 8002220:	f003 fd76 	bl	8005d10 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7;
 8002224:	23b0      	movs	r3, #176	; 0xb0
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002230:	2303      	movs	r3, #3
 8002232:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_DCMI;
 8002234:	230a      	movs	r3, #10
 8002236:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223c:	4619      	mov	r1, r3
 800223e:	4823      	ldr	r0, [pc, #140]	; (80022cc <BSP_CAMERA_MspInit+0x1a8>)
 8002240:	f003 fd66 	bl	8005d10 <HAL_GPIO_Init>

  /*** Configure the DMA ***/
  /* Set the parameters to be configured */
  hdma_handler.Instance                 = BSP_CAMERA_DMA_INSTANCE;
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <BSP_CAMERA_MspInit+0x1ac>)
 8002246:	4a23      	ldr	r2, [pc, #140]	; (80022d4 <BSP_CAMERA_MspInit+0x1b0>)
 8002248:	601a      	str	r2, [r3, #0]

  hdma_handler.Init.Request             = DMA_REQUEST_0;
 800224a:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <BSP_CAMERA_MspInit+0x1ac>)
 800224c:	2200      	movs	r2, #0
 800224e:	605a      	str	r2, [r3, #4]
  hdma_handler.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002250:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <BSP_CAMERA_MspInit+0x1ac>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002256:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <BSP_CAMERA_MspInit+0x1ac>)
 8002258:	2200      	movs	r2, #0
 800225a:	60da      	str	r2, [r3, #12]
  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;      /* Image captured by the DCMI is stored in memory */
 800225c:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <BSP_CAMERA_MspInit+0x1ac>)
 800225e:	2280      	movs	r2, #128	; 0x80
 8002260:	611a      	str	r2, [r3, #16]
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002262:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <BSP_CAMERA_MspInit+0x1ac>)
 8002264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002268:	615a      	str	r2, [r3, #20]
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <BSP_CAMERA_MspInit+0x1ac>)
 800226c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002270:	619a      	str	r2, [r3, #24]
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 8002272:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <BSP_CAMERA_MspInit+0x1ac>)
 8002274:	2220      	movs	r2, #32
 8002276:	61da      	str	r2, [r3, #28]
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <BSP_CAMERA_MspInit+0x1ac>)
 800227a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800227e:	621a      	str	r2, [r3, #32]

  /* Associate the initialized DMA handle to the DCMI handle */
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a13      	ldr	r2, [pc, #76]	; (80022d0 <BSP_CAMERA_MspInit+0x1ac>)
 8002284:	651a      	str	r2, [r3, #80]	; 0x50
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <BSP_CAMERA_MspInit+0x1ac>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6293      	str	r3, [r2, #40]	; 0x28

  /*** Configure the NVIC for DCMI and DMA ***/
  /* NVIC configuration for DCMI transfer complete interrupt */
  HAL_NVIC_SetPriority(DCMI_IRQn, 0x0F, 0);
 800228c:	2200      	movs	r2, #0
 800228e:	210f      	movs	r1, #15
 8002290:	2055      	movs	r0, #85	; 0x55
 8002292:	f002 fd96 	bl	8004dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002296:	2055      	movs	r0, #85	; 0x55
 8002298:	f002 fdaf 	bl	8004dfa <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0x0F, 0);
 800229c:	2200      	movs	r2, #0
 800229e:	210f      	movs	r1, #15
 80022a0:	2044      	movs	r0, #68	; 0x44
 80022a2:	f002 fd8e 	bl	8004dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80022a6:	2044      	movs	r0, #68	; 0x44
 80022a8:	f002 fda7 	bl	8004dfa <HAL_NVIC_EnableIRQ>

  /* Configure the DMA stream */
  HAL_DMA_Init(hdcmi->DMA_Handle);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b0:	4618      	mov	r0, r3
 80022b2:	f003 f9a7 	bl	8005604 <HAL_DMA_Init>
}
 80022b6:	bf00      	nop
 80022b8:	3738      	adds	r7, #56	; 0x38
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	48001000 	.word	0x48001000
 80022c8:	48001c00 	.word	0x48001c00
 80022cc:	48002000 	.word	0x48002000
 80022d0:	200001bc 	.word	0x200001bc
 80022d4:	4002046c 	.word	0x4002046c

080022d8 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_LineEventCallback();
 80022e0:	f000 f804 	bl	80022ec <BSP_CAMERA_LineEventCallback>
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <BSP_CAMERA_LineEventCallback>:
/**
  * @brief  Line Event callback.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_LineEventCallback can be implemented in the user file
   */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <HAL_DCMI_VsyncEventCallback>:
  * @brief  VSYNC event callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_VsyncEventCallback();
 8002302:	f000 f804 	bl	800230e <BSP_CAMERA_VsyncEventCallback>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <BSP_CAMERA_VsyncEventCallback>:
/**
  * @brief  VSYNC Event callback.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_VsyncEventCallback can be implemented in the user file
   */
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi: pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_ErrorCallback();
 8002324:	f000 f804 	bl	8002330 <BSP_CAMERA_ErrorCallback>
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <BSP_CAMERA_ErrorCallback>:
/**
  * @brief  Error callback.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the BSP_CAMERA_ErrorCallback can be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 800234e:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <BSP_IO_Init+0x78>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d128      	bne.n	80023a8 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 8002356:	4b19      	ldr	r3, [pc, #100]	; (80023bc <BSP_IO_Init+0x7c>)
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	2084      	movs	r0, #132	; 0x84
 800235c:	4798      	blx	r3

    HAL_Delay(10);
 800235e:	200a      	movs	r0, #10
 8002360:	f002 fc0c 	bl	8004b7c <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 8002364:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <BSP_IO_Init+0x80>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2084      	movs	r0, #132	; 0x84
 800236a:	4798      	blx	r3
 800236c:	4603      	mov	r3, r0
 800236e:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8002370:	79bb      	ldrb	r3, [r7, #6]
 8002372:	2b7b      	cmp	r3, #123	; 0x7b
 8002374:	d002      	beq.n	800237c <BSP_IO_Init+0x3c>
 8002376:	79bb      	ldrb	r3, [r7, #6]
 8002378:	2b79      	cmp	r3, #121	; 0x79
 800237a:	d117      	bne.n	80023ac <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <BSP_IO_Init+0x78>)
 800237e:	4a10      	ldr	r2, [pc, #64]	; (80023c0 <BSP_IO_Init+0x80>)
 8002380:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <BSP_IO_Init+0x78>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00f      	beq.n	80023ac <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <BSP_IO_Init+0x78>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2084      	movs	r0, #132	; 0x84
 8002394:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <BSP_IO_Init+0x78>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4909      	ldr	r1, [pc, #36]	; (80023c4 <BSP_IO_Init+0x84>)
 800239e:	2084      	movs	r0, #132	; 0x84
 80023a0:	4798      	blx	r3

        ret = IO_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	71fb      	strb	r3, [r7, #7]
 80023a6:	e001      	b.n	80023ac <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 80023a8:	2303      	movs	r3, #3
 80023aa:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 80023ac:	79fb      	ldrb	r3, [r7, #7]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000204 	.word	0x20000204
 80023bc:	2000002c 	.word	0x2000002c
 80023c0:	20000000 	.word	0x20000000
 80023c4:	000301ff 	.word	0x000301ff

080023c8 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <BSP_IO_ConfigPin+0x30>)
 80023dc:	4013      	ands	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <BSP_IO_ConfigPin+0x34>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	78fa      	ldrb	r2, [r7, #3]
 80023e8:	68f9      	ldr	r1, [r7, #12]
 80023ea:	2084      	movs	r0, #132	; 0x84
 80023ec:	4798      	blx	r3

  return IO_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	000301ff 	.word	0x000301ff
 80023fc:	20000204 	.word	0x20000204

08002400 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	4b07      	ldr	r3, [pc, #28]	; (8002430 <BSP_IO_WritePin+0x30>)
 8002414:	4013      	ands	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <BSP_IO_WritePin+0x34>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	68f9      	ldr	r1, [r7, #12]
 8002422:	2084      	movs	r0, #132	; 0x84
 8002424:	4798      	blx	r3

}
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	000301ff 	.word	0x000301ff
 8002434:	20000204 	.word	0x20000204

08002438 <BSP_IO_ReadPin>:
  * @param  IO_Pin: Selected pins to read.
  *          This parameter can be any combination of the IO pins.
  * @retval The current pins state
  */
uint32_t BSP_IO_ReadPin(uint32_t IO_Pin)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t pin_state = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
  uint32_t io1_pin = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <BSP_IO_ReadPin+0x38>)
 800244c:	4013      	ands	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]

  /* Gets the IO Expander 1 selected pins current state */
  pin_state |= (io1_driver->ReadPin(IO1_I2C_ADDRESS, io1_pin)) << IO1_PIN_OFFSET;
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <BSP_IO_ReadPin+0x3c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	68b9      	ldr	r1, [r7, #8]
 8002458:	2084      	movs	r0, #132	; 0x84
 800245a:	4798      	blx	r3
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4313      	orrs	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]


  return pin_state;
 8002464:	68fb      	ldr	r3, [r7, #12]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	000301ff 	.word	0x000301ff
 8002474:	20000204 	.word	0x20000204

08002478 <BSP_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  None
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	71fb      	strb	r3, [r7, #7]

  /* uSD device interface configuration */
  uSdHandle.Instance = SDMMC1;
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <BSP_SD_Init+0x8c>)
 8002484:	4a20      	ldr	r2, [pc, #128]	; (8002508 <BSP_SD_Init+0x90>)
 8002486:	601a      	str	r2, [r3, #0]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <BSP_SD_Init+0x8c>)
 800248a:	2200      	movs	r2, #0
 800248c:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800248e:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <BSP_SD_Init+0x8c>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002494:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <BSP_SD_Init+0x8c>)
 8002496:	2200      	movs	r2, #0
 8002498:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800249a:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <BSP_SD_Init+0x8c>)
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80024a0:	4b18      	ldr	r3, [pc, #96]	; (8002504 <BSP_SD_Init+0x8c>)
 80024a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024a6:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 80024a8:	4b16      	ldr	r3, [pc, #88]	; (8002504 <BSP_SD_Init+0x8c>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	619a      	str	r2, [r3, #24]

  /* Msp SD Detect pin initialization */
  SD_Detect_MspInit();
 80024ae:	f000 f966 	bl	800277e <SD_Detect_MspInit>

  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80024b2:	f000 f844 	bl	800253e <BSP_SD_IsDetected>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d001      	beq.n	80024c0 <BSP_SD_Init+0x48>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80024bc:	2302      	movs	r3, #2
 80024be:	e01c      	b.n	80024fa <BSP_SD_Init+0x82>
  }

  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 80024c0:	2100      	movs	r1, #0
 80024c2:	4810      	ldr	r0, [pc, #64]	; (8002504 <BSP_SD_Init+0x8c>)
 80024c4:	f000 f8bc 	bl	8002640 <BSP_SD_MspInit>
    
  /* HAL SD initialization */
  if (HAL_SD_Init(&uSdHandle) != HAL_OK)
 80024c8:	480e      	ldr	r0, [pc, #56]	; (8002504 <BSP_SD_Init+0x8c>)
 80024ca:	f007 f8f3 	bl	80096b4 <HAL_SD_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <BSP_SD_Init+0x60>
  {
    sd_state = MSD_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	71fb      	strb	r3, [r7, #7]
  }

  /* Configure SD Bus width */
  if (sd_state == MSD_OK)
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10c      	bne.n	80024f8 <BSP_SD_Init+0x80>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80024de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024e2:	4808      	ldr	r0, [pc, #32]	; (8002504 <BSP_SD_Init+0x8c>)
 80024e4:	f008 f870 	bl	800a5c8 <HAL_SD_ConfigWideBusOperation>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <BSP_SD_Init+0x7c>
    {
      sd_state = MSD_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	71fb      	strb	r3, [r7, #7]
 80024f2:	e001      	b.n	80024f8 <BSP_SD_Init+0x80>
    }
    else
    {
      sd_state = MSD_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return  sd_state;
 80024f8:	79fb      	ldrb	r3, [r7, #7]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000208 	.word	0x20000208
 8002508:	40012800 	.word	0x40012800

0800250c <BSP_SD_ITConfig>:
  * @brief  Configures Interrupt mode for SD detection pin.
  * @param  None
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_SD_ITConfig(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Check SD card detect pin */
  if (BSP_IO_ReadPin(SD_DETECT_PIN) != SD_DETECT_PIN)
 8002510:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002514:	f7ff ff90 	bl	8002438 <BSP_IO_ReadPin>
 8002518:	4603      	mov	r3, r0
 800251a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800251e:	d006      	beq.n	800252e <BSP_SD_ITConfig+0x22>
  {
    return BSP_IO_ConfigPin(SD_DETECT_PIN, IO_MODE_IT_RISING_EDGE_PU);
 8002520:	2110      	movs	r1, #16
 8002522:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002526:	f7ff ff4f 	bl	80023c8 <BSP_IO_ConfigPin>
 800252a:	4603      	mov	r3, r0
 800252c:	e005      	b.n	800253a <BSP_SD_ITConfig+0x2e>
  }
  else
  {
    return BSP_IO_ConfigPin(SD_DETECT_PIN, IO_MODE_IT_FALLING_EDGE_PU);
 800252e:	2112      	movs	r1, #18
 8002530:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002534:	f7ff ff48 	bl	80023c8 <BSP_IO_ConfigPin>
 8002538:	4603      	mov	r3, r0
  }
}
 800253a:	4618      	mov	r0, r3
 800253c:	bd80      	pop	{r7, pc}

0800253e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8002544:	2301      	movs	r3, #1
 8002546:	71fb      	strb	r3, [r7, #7]

  /* Check SD card detect pin */
  if (BSP_IO_ReadPin(SD_DETECT_PIN) != GPIO_PIN_RESET)
 8002548:	f44f 7080 	mov.w	r0, #256	; 0x100
 800254c:	f7ff ff74 	bl	8002438 <BSP_IO_ReadPin>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <BSP_SD_IsDetected+0x1c>
  {
    status = SD_NOT_PRESENT;
 8002556:	2300      	movs	r3, #0
 8002558:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	b2db      	uxtb	r3, r3
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af02      	add	r7, sp, #8
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef  sd_state = HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	75fb      	strb	r3, [r7, #23]

  sd_state =  HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	68f9      	ldr	r1, [r7, #12]
 8002584:	4807      	ldr	r0, [pc, #28]	; (80025a4 <BSP_SD_ReadBlocks+0x3c>)
 8002586:	f007 f96b 	bl	8009860 <HAL_SD_ReadBlocks>
 800258a:	4603      	mov	r3, r0
 800258c:	75fb      	strb	r3, [r7, #23]

  if (sd_state == HAL_OK)
 800258e:	7dfb      	ldrb	r3, [r7, #23]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <BSP_SD_ReadBlocks+0x30>
  {
    return MSD_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	e000      	b.n	800259a <BSP_SD_ReadBlocks+0x32>
  }
  else
  {
    return MSD_ERROR;
 8002598:	2301      	movs	r3, #1
  }
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000208 	.word	0x20000208

080025a8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef  sd_state = HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	75fb      	strb	r3, [r7, #23]

  sd_state = HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	68f9      	ldr	r1, [r7, #12]
 80025c4:	4807      	ldr	r0, [pc, #28]	; (80025e4 <BSP_SD_WriteBlocks+0x3c>)
 80025c6:	f007 fb29 	bl	8009c1c <HAL_SD_WriteBlocks>
 80025ca:	4603      	mov	r3, r0
 80025cc:	75fb      	strb	r3, [r7, #23]

  if (sd_state == HAL_OK)
 80025ce:	7dfb      	ldrb	r3, [r7, #23]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <BSP_SD_WriteBlocks+0x30>
  {
    return MSD_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e000      	b.n	80025da <BSP_SD_WriteBlocks+0x32>
  }
  else
  {
    return MSD_ERROR;
 80025d8:	2301      	movs	r3, #1
  }
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000208 	.word	0x20000208

080025e8 <BSP_SD_GetCardState>:
  * @brief  Gets the current SD card data status.
  * @param  None
  * @retval Data transfer state.
  */
uint8_t BSP_SD_GetCardState(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
  HAL_SD_CardStateTypedef card_state;
  card_state = HAL_SD_GetCardState(&uSdHandle);
 80025ee:	480c      	ldr	r0, [pc, #48]	; (8002620 <BSP_SD_GetCardState+0x38>)
 80025f0:	f008 f8a6 	bl	800a740 <HAL_SD_GetCardState>
 80025f4:	6078      	str	r0, [r7, #4]

  if (card_state == HAL_SD_CARD_TRANSFER)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d101      	bne.n	8002600 <BSP_SD_GetCardState+0x18>
  {
    return (SD_TRANSFER_OK);
 80025fc:	2300      	movs	r3, #0
 80025fe:	e00b      	b.n	8002618 <BSP_SD_GetCardState+0x30>
  }
  else if ((card_state == HAL_SD_CARD_SENDING) ||
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b05      	cmp	r3, #5
 8002604:	d005      	beq.n	8002612 <BSP_SD_GetCardState+0x2a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b06      	cmp	r3, #6
 800260a:	d002      	beq.n	8002612 <BSP_SD_GetCardState+0x2a>
           (card_state == HAL_SD_CARD_RECEIVING) ||
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b07      	cmp	r3, #7
 8002610:	d101      	bne.n	8002616 <BSP_SD_GetCardState+0x2e>
           (card_state == HAL_SD_CARD_PROGRAMMING))
  {
    return (SD_TRANSFER_BUSY);
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <BSP_SD_GetCardState+0x30>
  }
  else
  {
    return (SD_TRANSFER_ERROR);
 8002616:	2302      	movs	r3, #2
  }
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000208 	.word	0x20000208

08002624 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4803      	ldr	r0, [pc, #12]	; (800263c <BSP_SD_GetCardInfo+0x18>)
 8002630:	f007 ff9e 	bl	800a570 <HAL_SD_GetCardInfo>
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000208 	.word	0x20000208

08002640 <BSP_SD_MspInit>:
  * @param hsd: SD handle
  * @param Params: Additional parameters
  * @retval None
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b0ae      	sub	sp, #184	; 0xb8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpioinitstruct = {0};
 800264a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	60da      	str	r2, [r3, #12]
 8002658:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef  RCC_PeriphClkInit;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Params);

  HAL_RCCEx_GetPeriphCLKConfig(&RCC_PeriphClkInit);
 800265a:	f107 0318 	add.w	r3, r7, #24
 800265e:	4618      	mov	r0, r3
 8002660:	f005 fea8 	bl	80083b4 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Configure the SDMMC1 clock source. The clock is derived from the PLLSAI1 */
  /* Hypothesis is that PLLSAI1 VCO input is 8Mhz */
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8002664:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002668:	61bb      	str	r3, [r7, #24]
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800266a:	2318      	movs	r3, #24
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1Q = 4;
 800266e:	2304      	movs	r3, #4
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002672:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002676:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8002678:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800267c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK)
 8002680:	f107 0318 	add.w	r3, r7, #24
 8002684:	4618      	mov	r0, r3
 8002686:	f005 fb99 	bl	8007dbc <HAL_RCCEx_PeriphCLKConfig>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d000      	beq.n	8002692 <BSP_SD_MspInit+0x52>
  {
    while (1) {}
 8002690:	e7fe      	b.n	8002690 <BSP_SD_MspInit+0x50>
  }

  /* Enable SDMMC1 clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002692:	4b2d      	ldr	r3, [pc, #180]	; (8002748 <BSP_SD_MspInit+0x108>)
 8002694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002696:	4a2c      	ldr	r2, [pc, #176]	; (8002748 <BSP_SD_MspInit+0x108>)
 8002698:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800269c:	6613      	str	r3, [r2, #96]	; 0x60
 800269e:	4b2a      	ldr	r3, [pc, #168]	; (8002748 <BSP_SD_MspInit+0x108>)
 80026a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	697b      	ldr	r3, [r7, #20]

  /* Enable DMA2 clocks */
  SD_DMAx_CLK_ENABLE();
 80026aa:	4b27      	ldr	r3, [pc, #156]	; (8002748 <BSP_SD_MspInit+0x108>)
 80026ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ae:	4a26      	ldr	r2, [pc, #152]	; (8002748 <BSP_SD_MspInit+0x108>)
 80026b0:	f043 0302 	orr.w	r3, r3, #2
 80026b4:	6493      	str	r3, [r2, #72]	; 0x48
 80026b6:	4b24      	ldr	r3, [pc, #144]	; (8002748 <BSP_SD_MspInit+0x108>)
 80026b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c2:	4b21      	ldr	r3, [pc, #132]	; (8002748 <BSP_SD_MspInit+0x108>)
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c6:	4a20      	ldr	r2, [pc, #128]	; (8002748 <BSP_SD_MspInit+0x108>)
 80026c8:	f043 0304 	orr.w	r3, r3, #4
 80026cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ce:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <BSP_SD_MspInit+0x108>)
 80026d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026da:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <BSP_SD_MspInit+0x108>)
 80026dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026de:	4a1a      	ldr	r2, [pc, #104]	; (8002748 <BSP_SD_MspInit+0x108>)
 80026e0:	f043 0308 	orr.w	r3, r3, #8
 80026e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026e6:	4b18      	ldr	r3, [pc, #96]	; (8002748 <BSP_SD_MspInit+0x108>)
 80026e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 80026f2:	2302      	movs	r3, #2
 80026f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  gpioinitstruct.Pull      = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fe:	2303      	movs	r3, #3
 8002700:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 8002704:	230c      	movs	r3, #12
 8002706:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  /* GPIOC configuration */
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800270a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800270e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8002712:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002716:	4619      	mov	r1, r3
 8002718:	480c      	ldr	r0, [pc, #48]	; (800274c <BSP_SD_MspInit+0x10c>)
 800271a:	f003 faf9 	bl	8005d10 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpioinitstruct.Pin = GPIO_PIN_2;
 800271e:	2304      	movs	r3, #4
 8002720:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8002724:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002728:	4619      	mov	r1, r3
 800272a:	4809      	ldr	r0, [pc, #36]	; (8002750 <BSP_SD_MspInit+0x110>)
 800272c:	f003 faf0 	bl	8005d10 <HAL_GPIO_Init>

  /* NVIC configuration for SDMMC1 interrupts */
  HAL_NVIC_SetPriority(SDMMCx_IRQn, 5, 0);
 8002730:	2200      	movs	r2, #0
 8002732:	2105      	movs	r1, #5
 8002734:	2031      	movs	r0, #49	; 0x31
 8002736:	f002 fb44 	bl	8004dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMCx_IRQn);
 800273a:	2031      	movs	r0, #49	; 0x31
 800273c:	f002 fb5d 	bl	8004dfa <HAL_NVIC_EnableIRQ>

  /* DMA initialization should be done here but , as there is only one channel for RX and TX it is configured and done directly when required*/
}
 8002740:	bf00      	nop
 8002742:	37b8      	adds	r7, #184	; 0xb8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021000 	.word	0x40021000
 800274c:	48000800 	.word	0x48000800
 8002750:	48000c00 	.word	0x48000c00

08002754 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0

}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <BSP_SD_WriteCpltCallback>:
/**
  * @brief BSP Tx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0

}
 8002766:	bf00      	nop
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <BSP_SD_ReadCpltCallback>:
/**
  * @brief BSP Rx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0

}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
static void SD_Detect_MspInit(void)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	af00      	add	r7, sp, #0
  if (BSP_IO_Init() == IO_ERROR)
 8002782:	f7ff fddd 	bl	8002340 <BSP_IO_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <SD_Detect_MspInit+0x12>
  {
    BSP_ErrorHandler();
 800278c:	f7ff f8f7 	bl	800197e <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(SD_DETECT_PIN, IO_MODE_INPUT_PU);
 8002790:	2108      	movs	r1, #8
 8002792:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002796:	f7ff fe17 	bl	80023c8 <BSP_IO_ConfigPin>
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Error_Handler(void);

int _write(int file, char *ptr, int len) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
	//CDC_Transmit_FS((uint8_t*) ptr, len);
	return HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len,100);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	2364      	movs	r3, #100	; 0x64
 80027b2:	68b9      	ldr	r1, [r7, #8]
 80027b4:	4803      	ldr	r0, [pc, #12]	; (80027c4 <_write+0x24>)
 80027b6:	f008 fc71 	bl	800b09c <HAL_UART_Transmit>
 80027ba:	4603      	mov	r3, r0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000414 	.word	0x20000414

080027c8 <print_startup_msg>:

static void print_startup_msg(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  printf("******************************************\r\n");
 80027cc:	4809      	ldr	r0, [pc, #36]	; (80027f4 <print_startup_msg+0x2c>)
 80027ce:	f00e fb39 	bl	8010e44 <puts>
  printf("*	Project :\t %s       *\r\n", PROJECT_NAME);
 80027d2:	4909      	ldr	r1, [pc, #36]	; (80027f8 <print_startup_msg+0x30>)
 80027d4:	4809      	ldr	r0, [pc, #36]	; (80027fc <print_startup_msg+0x34>)
 80027d6:	f00e faaf 	bl	8010d38 <iprintf>
  printf("*	Version :\t %s             *\r\n", VERSION);
 80027da:	4909      	ldr	r1, [pc, #36]	; (8002800 <print_startup_msg+0x38>)
 80027dc:	4809      	ldr	r0, [pc, #36]	; (8002804 <print_startup_msg+0x3c>)
 80027de:	f00e faab 	bl	8010d38 <iprintf>
  printf("*	Date    :\t %s     *\r\n", __DATE__);
 80027e2:	4909      	ldr	r1, [pc, #36]	; (8002808 <print_startup_msg+0x40>)
 80027e4:	4809      	ldr	r0, [pc, #36]	; (800280c <print_startup_msg+0x44>)
 80027e6:	f00e faa7 	bl	8010d38 <iprintf>
  printf("******************************************\r\n");
 80027ea:	4802      	ldr	r0, [pc, #8]	; (80027f4 <print_startup_msg+0x2c>)
 80027ec:	f00e fb2a 	bl	8010e44 <puts>
}
 80027f0:	bf00      	nop
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	08011760 	.word	0x08011760
 80027f8:	0801178c 	.word	0x0801178c
 80027fc:	08011798 	.word	0x08011798
 8002800:	080117b4 	.word	0x080117b4
 8002804:	080117b8 	.word	0x080117b8
 8002808:	080117d8 	.word	0x080117d8
 800280c:	080117e4 	.word	0x080117e4

08002810 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	80fb      	strh	r3, [r7, #6]
	static uint32_t currentMillis = 0;
	static uint32_t previusMillis = 0;

	currentMillis = HAL_GetTick();
 800281a:	f002 f9a3 	bl	8004b64 <HAL_GetTick>
 800281e:	4603      	mov	r3, r0
 8002820:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <HAL_GPIO_EXTI_Callback+0x40>)
 8002822:	6013      	str	r3, [r2, #0]
	if(currentMillis - previusMillis > 250)
 8002824:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <HAL_GPIO_EXTI_Callback+0x40>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_GPIO_EXTI_Callback+0x44>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2bfa      	cmp	r3, #250	; 0xfa
 8002830:	d90a      	bls.n	8002848 <HAL_GPIO_EXTI_Callback+0x38>
	{
		ring_buffer_put(xQueue_IRQ_Events, GPIO_Pin);
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_GPIO_EXTI_Callback+0x48>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	88fa      	ldrh	r2, [r7, #6]
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f7fd ff9a 	bl	8000774 <ring_buffer_put>
		previusMillis = currentMillis;
 8002840:	4b03      	ldr	r3, [pc, #12]	; (8002850 <HAL_GPIO_EXTI_Callback+0x40>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a03      	ldr	r2, [pc, #12]	; (8002854 <HAL_GPIO_EXTI_Callback+0x44>)
 8002846:	6013      	str	r3, [r2, #0]
	}

}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	2001fbd0 	.word	0x2001fbd0
 8002854:	2001fbd4 	.word	0x2001fbd4
 8002858:	2000053c 	.word	0x2000053c

0800285c <jpeg_dcmi_frame_callback>:
  * @retval None
  */


void jpeg_dcmi_frame_callback(DMA_HandleTypeDef *_hdma)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08c      	sub	sp, #48	; 0x30
 8002860:	af02      	add	r7, sp, #8
 8002862:	6078      	str	r0, [r7, #4]
        uint8_t *p;
        uint32_t i=0,jpgstart=0,jpglen=0;
 8002864:	2300      	movs	r3, #0
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
 8002868:	2300      	movs	r3, #0
 800286a:	623b      	str	r3, [r7, #32]
 800286c:	2300      	movs	r3, #0
 800286e:	61fb      	str	r3, [r7, #28]
        uint8_t  head=0;
 8002870:	2300      	movs	r3, #0
 8002872:	76fb      	strb	r3, [r7, #27]



        HAL_DCMI_Stop(&hdcmi);
 8002874:	486a      	ldr	r0, [pc, #424]	; (8002a20 <jpeg_dcmi_frame_callback+0x1c4>)
 8002876:	f002 fc41 	bl	80050fc <HAL_DCMI_Stop>

        p=(uint8_t*)jpeg_data_buf;
 800287a:	4b6a      	ldr	r3, [pc, #424]	; (8002a24 <jpeg_dcmi_frame_callback+0x1c8>)
 800287c:	617b      	str	r3, [r7, #20]
        FRESULT res; /* FatFs function common result code */
          uint32_t byteswritten; /* File write/read counts */


          /* Register the file system object to the FatFs module */
          if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 800287e:	2200      	movs	r2, #0
 8002880:	4969      	ldr	r1, [pc, #420]	; (8002a28 <jpeg_dcmi_frame_callback+0x1cc>)
 8002882:	486a      	ldr	r0, [pc, #424]	; (8002a2c <jpeg_dcmi_frame_callback+0x1d0>)
 8002884:	f00c fc82 	bl	800f18c <f_mount>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	f040 80bd 	bne.w	8002a0a <jpeg_dcmi_frame_callback+0x1ae>
          {
        	printf_dbg("f_mount!\r\n");
 8002890:	4b67      	ldr	r3, [pc, #412]	; (8002a30 <jpeg_dcmi_frame_callback+0x1d4>)
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	4618      	mov	r0, r3
 8002896:	f00e fa4f 	bl	8010d38 <iprintf>
 800289a:	4b66      	ldr	r3, [pc, #408]	; (8002a34 <jpeg_dcmi_frame_callback+0x1d8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f00e fa4a 	bl	8010d38 <iprintf>
 80028a4:	4b62      	ldr	r3, [pc, #392]	; (8002a30 <jpeg_dcmi_frame_callback+0x1d4>)
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f00e fa45 	bl	8010d38 <iprintf>
 80028ae:	4862      	ldr	r0, [pc, #392]	; (8002a38 <jpeg_dcmi_frame_callback+0x1dc>)
 80028b0:	f00e fac8 	bl	8010e44 <puts>
        #if 1
            if (isCreated == 0)
 80028b4:	4b61      	ldr	r3, [pc, #388]	; (8002a3c <jpeg_dcmi_frame_callback+0x1e0>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d110      	bne.n	80028de <jpeg_dcmi_frame_callback+0x82>
            {
              res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 80028bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	4b5f      	ldr	r3, [pc, #380]	; (8002a40 <jpeg_dcmi_frame_callback+0x1e4>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	2107      	movs	r1, #7
 80028c8:	4857      	ldr	r0, [pc, #348]	; (8002a28 <jpeg_dcmi_frame_callback+0x1cc>)
 80028ca:	f00d f891 	bl	800f9f0 <f_mkfs>
 80028ce:	4603      	mov	r3, r0
 80028d0:	74fb      	strb	r3, [r7, #19]

              if (res != FR_OK)
 80028d2:	7cfb      	ldrb	r3, [r7, #19]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <jpeg_dcmi_frame_callback+0x82>
              {
                Error_Handler();
 80028d8:	f000 ff18 	bl	800370c <Error_Handler>
                while(1);
 80028dc:	e7fe      	b.n	80028dc <jpeg_dcmi_frame_callback+0x80>
              }
            }
            isCreated = 1;
 80028de:	4b57      	ldr	r3, [pc, #348]	; (8002a3c <jpeg_dcmi_frame_callback+0x1e0>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
        #endif
            /* Create and Open a new text file object with write access */
            if(f_open(&MyFile, "STM32.jpeg", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 80028e4:	220a      	movs	r2, #10
 80028e6:	4957      	ldr	r1, [pc, #348]	; (8002a44 <jpeg_dcmi_frame_callback+0x1e8>)
 80028e8:	4857      	ldr	r0, [pc, #348]	; (8002a48 <jpeg_dcmi_frame_callback+0x1ec>)
 80028ea:	f00c fc95 	bl	800f218 <f_open>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f040 808a 	bne.w	8002a0a <jpeg_dcmi_frame_callback+0x1ae>
            {
              printf_dbg("f_open!\r\n");
 80028f6:	4b4e      	ldr	r3, [pc, #312]	; (8002a30 <jpeg_dcmi_frame_callback+0x1d4>)
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f00e fa1c 	bl	8010d38 <iprintf>
 8002900:	4b4c      	ldr	r3, [pc, #304]	; (8002a34 <jpeg_dcmi_frame_callback+0x1d8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f00e fa17 	bl	8010d38 <iprintf>
 800290a:	4b49      	ldr	r3, [pc, #292]	; (8002a30 <jpeg_dcmi_frame_callback+0x1d4>)
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	4618      	mov	r0, r3
 8002910:	f00e fa12 	bl	8010d38 <iprintf>
 8002914:	484d      	ldr	r0, [pc, #308]	; (8002a4c <jpeg_dcmi_frame_callback+0x1f0>)
 8002916:	f00e fa95 	bl	8010e44 <puts>
              /* Write data to the text file */

              for(i=0;i<jpeg_buf_size * 4; i++) //search for 0XFF 0XD8 and 0XFF 0XD9, get size of JPG
 800291a:	2300      	movs	r3, #0
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
 800291e:	e029      	b.n	8002974 <jpeg_dcmi_frame_callback+0x118>
			  {
					  if((p[i]==0XFF)&&(p[i+1]==0XD8))
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	4413      	add	r3, r2
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2bff      	cmp	r3, #255	; 0xff
 800292a:	d10a      	bne.n	8002942 <jpeg_dcmi_frame_callback+0xe6>
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	3301      	adds	r3, #1
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4413      	add	r3, r2
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2bd8      	cmp	r3, #216	; 0xd8
 8002938:	d103      	bne.n	8002942 <jpeg_dcmi_frame_callback+0xe6>
					  {
							  jpgstart=i;
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	623b      	str	r3, [r7, #32]
							  head=1;	// Already found  FF D8
 800293e:	2301      	movs	r3, #1
 8002940:	76fb      	strb	r3, [r7, #27]
					  }
					  if((p[i]==0XFF)&&(p[i+1]==0XD9)&&head)  //search for FF D9
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	4413      	add	r3, r2
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2bff      	cmp	r3, #255	; 0xff
 800294c:	d10f      	bne.n	800296e <jpeg_dcmi_frame_callback+0x112>
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	3301      	adds	r3, #1
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4413      	add	r3, r2
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2bd9      	cmp	r3, #217	; 0xd9
 800295a:	d108      	bne.n	800296e <jpeg_dcmi_frame_callback+0x112>
 800295c:	7efb      	ldrb	r3, [r7, #27]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d005      	beq.n	800296e <jpeg_dcmi_frame_callback+0x112>
					  {
							  jpglen=i-jpgstart+2;
 8002962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	3302      	adds	r3, #2
 800296a:	61fb      	str	r3, [r7, #28]
							  break;
 800296c:	e006      	b.n	800297c <jpeg_dcmi_frame_callback+0x120>
              for(i=0;i<jpeg_buf_size * 4; i++) //search for 0XFF 0XD8 and 0XFF 0XD9, get size of JPG
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	3301      	adds	r3, #1
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	f5b3 3ff8 	cmp.w	r3, #126976	; 0x1f000
 800297a:	d3d1      	bcc.n	8002920 <jpeg_dcmi_frame_callback+0xc4>
					  }
			  }
			  if(jpglen)
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00c      	beq.n	800299c <jpeg_dcmi_frame_callback+0x140>
			  {
					  p+=jpgstart;	// move to FF D8
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	4413      	add	r3, r2
 8002988:	617b      	str	r3, [r7, #20]
					  //HAL_UART_Transmit(&huart2, p, jpglen, 5000);
					  res = f_write(&MyFile, p, jpglen, (void *)&byteswritten);
 800298a:	f107 030c 	add.w	r3, r7, #12
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	6979      	ldr	r1, [r7, #20]
 8002992:	482d      	ldr	r0, [pc, #180]	; (8002a48 <jpeg_dcmi_frame_callback+0x1ec>)
 8002994:	f00c fe0e 	bl	800f5b4 <f_write>
 8002998:	4603      	mov	r3, r0
 800299a:	74fb      	strb	r3, [r7, #19]

					  // printf("jpg_size :  %d \r\n" , jpglen);
					  //printf("jpgstart :  %d \r\n" , jpgstart);
			  }

              res = f_write(&MyFile, jpeg_data_buf, jpeg_buf_size, (void *)&byteswritten);
 800299c:	f107 030c 	add.w	r3, r7, #12
 80029a0:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 80029a4:	491f      	ldr	r1, [pc, #124]	; (8002a24 <jpeg_dcmi_frame_callback+0x1c8>)
 80029a6:	4828      	ldr	r0, [pc, #160]	; (8002a48 <jpeg_dcmi_frame_callback+0x1ec>)
 80029a8:	f00c fe04 	bl	800f5b4 <f_write>
 80029ac:	4603      	mov	r3, r0
 80029ae:	74fb      	strb	r3, [r7, #19]



              printf_dbg("f_write!\r\n");
 80029b0:	4b1f      	ldr	r3, [pc, #124]	; (8002a30 <jpeg_dcmi_frame_callback+0x1d4>)
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f00e f9bf 	bl	8010d38 <iprintf>
 80029ba:	4b1e      	ldr	r3, [pc, #120]	; (8002a34 <jpeg_dcmi_frame_callback+0x1d8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f00e f9ba 	bl	8010d38 <iprintf>
 80029c4:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <jpeg_dcmi_frame_callback+0x1d4>)
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f00e f9b5 	bl	8010d38 <iprintf>
 80029ce:	4820      	ldr	r0, [pc, #128]	; (8002a50 <jpeg_dcmi_frame_callback+0x1f4>)
 80029d0:	f00e fa38 	bl	8010e44 <puts>

              if((byteswritten > 0) && (res == FR_OK))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d017      	beq.n	8002a0a <jpeg_dcmi_frame_callback+0x1ae>
 80029da:	7cfb      	ldrb	r3, [r7, #19]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d114      	bne.n	8002a0a <jpeg_dcmi_frame_callback+0x1ae>
              {
                /* Close the open text file */
                f_close(&MyFile);
 80029e0:	4819      	ldr	r0, [pc, #100]	; (8002a48 <jpeg_dcmi_frame_callback+0x1ec>)
 80029e2:	f00c ffda 	bl	800f99a <f_close>
                printf_dbg("f_close!\r\n");
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <jpeg_dcmi_frame_callback+0x1d4>)
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f00e f9a4 	bl	8010d38 <iprintf>
 80029f0:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <jpeg_dcmi_frame_callback+0x1d8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f00e f99f 	bl	8010d38 <iprintf>
 80029fa:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <jpeg_dcmi_frame_callback+0x1d4>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f00e f99a 	bl	8010d38 <iprintf>
 8002a04:	4813      	ldr	r0, [pc, #76]	; (8002a54 <jpeg_dcmi_frame_callback+0x1f8>)
 8002a06:	f00e fa1d 	bl	8010e44 <puts>
              }
            }
          }

        HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)jpeg_data_buf, jpeg_buf_size/4);
 8002a0a:	4a06      	ldr	r2, [pc, #24]	; (8002a24 <jpeg_dcmi_frame_callback+0x1c8>)
 8002a0c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002a10:	2100      	movs	r1, #0
 8002a12:	4803      	ldr	r0, [pc, #12]	; (8002a20 <jpeg_dcmi_frame_callback+0x1c4>)
 8002a14:	f002 faa0 	bl	8004f58 <HAL_DCMI_Start_DMA>
}
 8002a18:	bf00      	nop
 8002a1a:	3728      	adds	r7, #40	; 0x28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	2000028c 	.word	0x2000028c
 8002a24:	20000568 	.word	0x20000568
 8002a28:	2001fbe8 	.word	0x2001fbe8
 8002a2c:	2001f568 	.word	0x2001f568
 8002a30:	2000007c 	.word	0x2000007c
 8002a34:	2000009c 	.word	0x2000009c
 8002a38:	080117fc 	.word	0x080117fc
 8002a3c:	2001f9cd 	.word	0x2001f9cd
 8002a40:	2001f9d0 	.word	0x2001f9d0
 8002a44:	08011808 	.word	0x08011808
 8002a48:	2001f79c 	.word	0x2001f79c
 8002a4c:	08011814 	.word	0x08011814
 8002a50:	08011820 	.word	0x08011820
 8002a54:	0801182c 	.word	0x0801182c

08002a58 <SD_Initialize>:
  * @brief  Initialize the SD card.
  * @param  None
  * @retval None
  */
static void SD_Initialize(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  if (isInitialized == 0)
 8002a5c:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <SD_Initialize+0x88>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d13a      	bne.n	8002ada <SD_Initialize+0x82>
  {
    if (BSP_SD_Init() == MSD_OK)
 8002a64:	f7ff fd08 	bl	8002478 <BSP_SD_Init>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d117      	bne.n	8002a9e <SD_Initialize+0x46>
    {
      BSP_SD_ITConfig();
 8002a6e:	f7ff fd4d 	bl	800250c <BSP_SD_ITConfig>
      isInitialized = 1;
 8002a72:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <SD_Initialize+0x88>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
      printf_dbg("SD Initialize Okey!\r\n");
 8002a78:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <SD_Initialize+0x8c>)
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f00e f95b 	bl	8010d38 <iprintf>
 8002a82:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <SD_Initialize+0x90>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f00e f956 	bl	8010d38 <iprintf>
 8002a8c:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <SD_Initialize+0x8c>)
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f00e f951 	bl	8010d38 <iprintf>
 8002a96:	4815      	ldr	r0, [pc, #84]	; (8002aec <SD_Initialize+0x94>)
 8002a98:	f00e f9d4 	bl	8010e44 <puts>
      while (BSP_SD_IsDetected() != SD_PRESENT)
      {}
      BSP_LED_Off(LED1);
    }
  }
}
 8002a9c:	e01d      	b.n	8002ada <SD_Initialize+0x82>
      BSP_LED_On(LED1);
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7fe ff70 	bl	8001984 <BSP_LED_On>
      printf_dbg("SD Initialize ERROR!!\r\n");
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <SD_Initialize+0x8c>)
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f00e f945 	bl	8010d38 <iprintf>
 8002aae:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <SD_Initialize+0x90>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f00e f940 	bl	8010d38 <iprintf>
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <SD_Initialize+0x8c>)
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f00e f93b 	bl	8010d38 <iprintf>
 8002ac2:	480b      	ldr	r0, [pc, #44]	; (8002af0 <SD_Initialize+0x98>)
 8002ac4:	f00e f9be 	bl	8010e44 <puts>
      while (BSP_SD_IsDetected() != SD_PRESENT)
 8002ac8:	bf00      	nop
 8002aca:	f7ff fd38 	bl	800253e <BSP_SD_IsDetected>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d1fa      	bne.n	8002aca <SD_Initialize+0x72>
      BSP_LED_Off(LED1);
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7fe ff77 	bl	80019c8 <BSP_LED_Off>
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	2001f9cc 	.word	0x2001f9cc
 8002ae4:	2000007c 	.word	0x2000007c
 8002ae8:	2000009c 	.word	0x2000009c
 8002aec:	08011838 	.word	0x08011838
 8002af0:	08011850 	.word	0x08011850

08002af4 <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	printf_dbg("HAL_DCMI_FrameEventCallback\r\n");
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <HAL_DCMI_FrameEventCallback+0x58>)
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f00e f919 	bl	8010d38 <iprintf>
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_DCMI_FrameEventCallback+0x5c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f00e f914 	bl	8010d38 <iprintf>
 8002b10:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <HAL_DCMI_FrameEventCallback+0x58>)
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f00e f90f 	bl	8010d38 <iprintf>
 8002b1a:	480e      	ldr	r0, [pc, #56]	; (8002b54 <HAL_DCMI_FrameEventCallback+0x60>)
 8002b1c:	f00e f992 	bl	8010e44 <puts>


	jpeg_dcmi_frame_callback(&hdma_dcmi);
 8002b20:	480d      	ldr	r0, [pc, #52]	; (8002b58 <HAL_DCMI_FrameEventCallback+0x64>)
 8002b22:	f7ff fe9b 	bl	800285c <jpeg_dcmi_frame_callback>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);   // OFF
 8002b26:	2201      	movs	r2, #1
 8002b28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b2c:	480b      	ldr	r0, [pc, #44]	; (8002b5c <HAL_DCMI_FrameEventCallback+0x68>)
 8002b2e:	f003 fb73 	bl	8006218 <HAL_GPIO_WritePin>

	__HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 021f 	bic.w	r2, r2, #31
 8002b40:	60da      	str	r2, [r3, #12]

}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	2000007c 	.word	0x2000007c
 8002b50:	2000009c 	.word	0x2000009c
 8002b54:	08011868 	.word	0x08011868
 8002b58:	200002f0 	.word	0x200002f0
 8002b5c:	48000400 	.word	0x48000400

08002b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b66:	f001 ff94 	bl	8004a92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b6a:	f000 f959 	bl	8002e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b6e:	f000 fb27 	bl	80031c0 <MX_GPIO_Init>
  MX_DCMI_Init();
 8002b72:	f000 f9d3 	bl	8002f1c <MX_DCMI_Init>
  MX_DMA_Init();
 8002b76:	f000 fa57 	bl	8003028 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002b7a:	f000 fa25 	bl	8002fc8 <MX_USART2_UART_Init>
  //MX_DMA2D_Init();
  MX_FMC_Init();
 8002b7e:	f000 fa71 	bl	8003064 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8002b82:	f000 f9ff 	bl	8002f84 <MX_SDMMC1_SD_Init>
  //MX_FATFS_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002b86:	f000 f9a4 	bl	8002ed2 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  xQueue_IRQ_Events = ring_buffer_init(xQueue_IRQ_buffer, XQUEUE_BUFFER_SIZE);
 8002b8a:	2114      	movs	r1, #20
 8002b8c:	4891      	ldr	r0, [pc, #580]	; (8002dd4 <main+0x274>)
 8002b8e:	f7fd fd8d 	bl	80006ac <ring_buffer_init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4a90      	ldr	r2, [pc, #576]	; (8002dd8 <main+0x278>)
 8002b96:	6013      	str	r3, [r2, #0]

  print_startup_msg();
 8002b98:	f7ff fe16 	bl	80027c8 <print_startup_msg>

  /* Initialize the IO functionalities */
  uint8_t ret;
  ret = BSP_IO_Init();
 8002b9c:	f7ff fbd0 	bl	8002340 <BSP_IO_Init>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	71fb      	strb	r3, [r7, #7]
  if(ret == IO_OK)  printf_dbg("Expander OK\r\n");
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d111      	bne.n	8002bce <main+0x6e>
 8002baa:	4b8c      	ldr	r3, [pc, #560]	; (8002ddc <main+0x27c>)
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f00e f8c2 	bl	8010d38 <iprintf>
 8002bb4:	4b8a      	ldr	r3, [pc, #552]	; (8002de0 <main+0x280>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f00e f8bd 	bl	8010d38 <iprintf>
 8002bbe:	4b87      	ldr	r3, [pc, #540]	; (8002ddc <main+0x27c>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f00e f8b8 	bl	8010d38 <iprintf>
 8002bc8:	4886      	ldr	r0, [pc, #536]	; (8002de4 <main+0x284>)
 8002bca:	f00e f93b 	bl	8010e44 <puts>


  BSP_CAMERA_Init(RESOLUTION_R320x240);
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f7ff f9f0 	bl	8001fb4 <BSP_CAMERA_Init>
  if(ret == CAMERA_OK) printf_dbg("Camera OK\r\n");
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d111      	bne.n	8002bfe <main+0x9e>
 8002bda:	4b80      	ldr	r3, [pc, #512]	; (8002ddc <main+0x27c>)
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f00e f8aa 	bl	8010d38 <iprintf>
 8002be4:	4b7e      	ldr	r3, [pc, #504]	; (8002de0 <main+0x280>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f00e f8a5 	bl	8010d38 <iprintf>
 8002bee:	4b7b      	ldr	r3, [pc, #492]	; (8002ddc <main+0x27c>)
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f00e f8a0 	bl	8010d38 <iprintf>
 8002bf8:	487b      	ldr	r0, [pc, #492]	; (8002de8 <main+0x288>)
 8002bfa:	f00e f923 	bl	8010e44 <puts>

  /* Wait 1s to let auto-loops in the camera module converge and lead to correct exposure */
  HAL_Delay(1000);
 8002bfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c02:	f001 ffbb 	bl	8004b7c <HAL_Delay>

  __HAL_DCMI_DISABLE_IT(&hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC);
 8002c06:	4b79      	ldr	r3, [pc, #484]	; (8002dec <main+0x28c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	4b77      	ldr	r3, [pc, #476]	; (8002dec <main+0x28c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0218 	bic.w	r2, r2, #24
 8002c14:	60da      	str	r2, [r3, #12]
  __HAL_DCMI_DISABLE_IT(&hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8002c16:	4b75      	ldr	r3, [pc, #468]	; (8002dec <main+0x28c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	4b73      	ldr	r3, [pc, #460]	; (8002dec <main+0x28c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 021f 	bic.w	r2, r2, #31
 8002c24:	60da      	str	r2, [r3, #12]

  hal_status = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)jpeg_data_buf, jpeg_buf_size/4 );
 8002c26:	4a72      	ldr	r2, [pc, #456]	; (8002df0 <main+0x290>)
 8002c28:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	486f      	ldr	r0, [pc, #444]	; (8002dec <main+0x28c>)
 8002c30:	f002 f992 	bl	8004f58 <HAL_DCMI_Start_DMA>
 8002c34:	4603      	mov	r3, r0
 8002c36:	461a      	mov	r2, r3
 8002c38:	4b6e      	ldr	r3, [pc, #440]	; (8002df4 <main+0x294>)
 8002c3a:	701a      	strb	r2, [r3, #0]
  if(hal_status != HAL_OK)Error_Handler();
 8002c3c:	4b6d      	ldr	r3, [pc, #436]	; (8002df4 <main+0x294>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <main+0xe8>
 8002c44:	f000 fd62 	bl	800370c <Error_Handler>


  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8002c48:	496b      	ldr	r1, [pc, #428]	; (8002df8 <main+0x298>)
 8002c4a:	486c      	ldr	r0, [pc, #432]	; (8002dfc <main+0x29c>)
 8002c4c:	f00d fb48 	bl	80102e0 <FATFS_LinkDriver>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d118      	bne.n	8002c88 <main+0x128>
  {
	SD_Initialize();
 8002c56:	f7ff feff 	bl	8002a58 <SD_Initialize>

	if(BSP_SD_IsDetected())
 8002c5a:	f7ff fc70 	bl	800253e <BSP_SD_IsDetected>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d011      	beq.n	8002c88 <main+0x128>
	{
		printf_dbg("SD Card OK\r\n");
 8002c64:	4b5d      	ldr	r3, [pc, #372]	; (8002ddc <main+0x27c>)
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f00e f865 	bl	8010d38 <iprintf>
 8002c6e:	4b5c      	ldr	r3, [pc, #368]	; (8002de0 <main+0x280>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f00e f860 	bl	8010d38 <iprintf>
 8002c78:	4b58      	ldr	r3, [pc, #352]	; (8002ddc <main+0x27c>)
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f00e f85b 	bl	8010d38 <iprintf>
 8002c82:	485f      	ldr	r0, [pc, #380]	; (8002e00 <main+0x2a0>)
 8002c84:	f00e f8de 	bl	8010e44 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint16_t IRQ_event;
	  if(ring_buffer_get(xQueue_IRQ_Events, &IRQ_event))
 8002c88:	4b53      	ldr	r3, [pc, #332]	; (8002dd8 <main+0x278>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	495d      	ldr	r1, [pc, #372]	; (8002e04 <main+0x2a4>)
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fd fd98 	bl	80007c4 <ring_buffer_get>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 8097 	beq.w	8002dca <main+0x26a>
	  {

		  switch (IRQ_event) {
 8002c9c:	4b59      	ldr	r3, [pc, #356]	; (8002e04 <main+0x2a4>)
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca4:	d070      	beq.n	8002d88 <main+0x228>
 8002ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002caa:	f300 8090 	bgt.w	8002dce <main+0x26e>
 8002cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cb2:	d056      	beq.n	8002d62 <main+0x202>
 8002cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cb8:	f300 8089 	bgt.w	8002dce <main+0x26e>
 8002cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc0:	d036      	beq.n	8002d30 <main+0x1d0>
 8002cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc6:	f300 8082 	bgt.w	8002dce <main+0x26e>
 8002cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cce:	d003      	beq.n	8002cd8 <main+0x178>
 8002cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd4:	d019      	beq.n	8002d0a <main+0x1aa>

				__HAL_DCMI_ENABLE_IT(&hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);

				break;
			default:
				break;
 8002cd6:	e07a      	b.n	8002dce <main+0x26e>
				printf_dbg("JOY_UP was pressed!\r\n");
 8002cd8:	4b40      	ldr	r3, [pc, #256]	; (8002ddc <main+0x27c>)
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f00e f82b 	bl	8010d38 <iprintf>
 8002ce2:	4b3f      	ldr	r3, [pc, #252]	; (8002de0 <main+0x280>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f00e f826 	bl	8010d38 <iprintf>
 8002cec:	4b3b      	ldr	r3, [pc, #236]	; (8002ddc <main+0x27c>)
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f00e f821 	bl	8010d38 <iprintf>
 8002cf6:	4844      	ldr	r0, [pc, #272]	; (8002e08 <main+0x2a8>)
 8002cf8:	f00e f8a4 	bl	8010e44 <puts>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);   // ON
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d02:	4842      	ldr	r0, [pc, #264]	; (8002e0c <main+0x2ac>)
 8002d04:	f003 fa88 	bl	8006218 <HAL_GPIO_WritePin>
				break;
 8002d08:	e062      	b.n	8002dd0 <main+0x270>
				printf_dbg("JOY_LEFT was pressed!\r\n");
 8002d0a:	4b34      	ldr	r3, [pc, #208]	; (8002ddc <main+0x27c>)
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f00e f812 	bl	8010d38 <iprintf>
 8002d14:	4b32      	ldr	r3, [pc, #200]	; (8002de0 <main+0x280>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f00e f80d 	bl	8010d38 <iprintf>
 8002d1e:	4b2f      	ldr	r3, [pc, #188]	; (8002ddc <main+0x27c>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f00e f808 	bl	8010d38 <iprintf>
 8002d28:	4839      	ldr	r0, [pc, #228]	; (8002e10 <main+0x2b0>)
 8002d2a:	f00e f88b 	bl	8010e44 <puts>
				break;
 8002d2e:	e04f      	b.n	8002dd0 <main+0x270>
				printf_dbg("JOY_DOWN was pressed!\r\n");
 8002d30:	4b2a      	ldr	r3, [pc, #168]	; (8002ddc <main+0x27c>)
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f00d ffff 	bl	8010d38 <iprintf>
 8002d3a:	4b29      	ldr	r3, [pc, #164]	; (8002de0 <main+0x280>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f00d fffa 	bl	8010d38 <iprintf>
 8002d44:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <main+0x27c>)
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f00d fff5 	bl	8010d38 <iprintf>
 8002d4e:	4831      	ldr	r0, [pc, #196]	; (8002e14 <main+0x2b4>)
 8002d50:	f00e f878 	bl	8010e44 <puts>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);   // OFF
 8002d54:	2201      	movs	r2, #1
 8002d56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d5a:	482c      	ldr	r0, [pc, #176]	; (8002e0c <main+0x2ac>)
 8002d5c:	f003 fa5c 	bl	8006218 <HAL_GPIO_WritePin>
				break;
 8002d60:	e036      	b.n	8002dd0 <main+0x270>
				printf_dbg("JOY_RIGHT was pressed!\r\n");
 8002d62:	4b1e      	ldr	r3, [pc, #120]	; (8002ddc <main+0x27c>)
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f00d ffe6 	bl	8010d38 <iprintf>
 8002d6c:	4b1c      	ldr	r3, [pc, #112]	; (8002de0 <main+0x280>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f00d ffe1 	bl	8010d38 <iprintf>
 8002d76:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <main+0x27c>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f00d ffdc 	bl	8010d38 <iprintf>
 8002d80:	4825      	ldr	r0, [pc, #148]	; (8002e18 <main+0x2b8>)
 8002d82:	f00e f85f 	bl	8010e44 <puts>
				break;
 8002d86:	e023      	b.n	8002dd0 <main+0x270>
				printf_dbg("JOY_SEL was pressed!\r\n");
 8002d88:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <main+0x27c>)
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f00d ffd3 	bl	8010d38 <iprintf>
 8002d92:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <main+0x280>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f00d ffce 	bl	8010d38 <iprintf>
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <main+0x27c>)
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f00d ffc9 	bl	8010d38 <iprintf>
 8002da6:	481d      	ldr	r0, [pc, #116]	; (8002e1c <main+0x2bc>)
 8002da8:	f00e f84c 	bl	8010e44 <puts>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);   // ON
 8002dac:	2200      	movs	r2, #0
 8002dae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002db2:	4816      	ldr	r0, [pc, #88]	; (8002e0c <main+0x2ac>)
 8002db4:	f003 fa30 	bl	8006218 <HAL_GPIO_WritePin>
				__HAL_DCMI_ENABLE_IT(&hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <main+0x28c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <main+0x28c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 021f 	orr.w	r2, r2, #31
 8002dc6:	60da      	str	r2, [r3, #12]
				break;
 8002dc8:	e002      	b.n	8002dd0 <main+0x270>
		}

	  }
 8002dca:	bf00      	nop
 8002dcc:	e75c      	b.n	8002c88 <main+0x128>
				break;
 8002dce:	bf00      	nop
  {
 8002dd0:	e75a      	b.n	8002c88 <main+0x128>
 8002dd2:	bf00      	nop
 8002dd4:	20000540 	.word	0x20000540
 8002dd8:	2000053c 	.word	0x2000053c
 8002ddc:	2000007c 	.word	0x2000007c
 8002de0:	2000009c 	.word	0x2000009c
 8002de4:	08011888 	.word	0x08011888
 8002de8:	08011898 	.word	0x08011898
 8002dec:	2000028c 	.word	0x2000028c
 8002df0:	20000568 	.word	0x20000568
 8002df4:	20000538 	.word	0x20000538
 8002df8:	2001fbe8 	.word	0x2001fbe8
 8002dfc:	08011f60 	.word	0x08011f60
 8002e00:	080118a4 	.word	0x080118a4
 8002e04:	2001fbd8 	.word	0x2001fbd8
 8002e08:	080118b0 	.word	0x080118b0
 8002e0c:	48000400 	.word	0x48000400
 8002e10:	080118c8 	.word	0x080118c8
 8002e14:	080118e0 	.word	0x080118e0
 8002e18:	080118f8 	.word	0x080118f8
 8002e1c:	08011910 	.word	0x08011910

08002e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b096      	sub	sp, #88	; 0x58
 8002e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e26:	f107 0314 	add.w	r3, r7, #20
 8002e2a:	2244      	movs	r2, #68	; 0x44
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f00d fbac 	bl	801058c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e34:	463b      	mov	r3, r7
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	609a      	str	r2, [r3, #8]
 8002e3e:	60da      	str	r2, [r3, #12]
 8002e40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002e42:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002e46:	f004 f8e1 	bl	800700c <HAL_PWREx_ControlVoltageScaling>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002e50:	f000 fc5c 	bl	800370c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8002e54:	2322      	movs	r3, #34	; 0x22
 8002e56:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e62:	2340      	movs	r3, #64	; 0x40
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e66:	2302      	movs	r3, #2
 8002e68:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002e72:	230a      	movs	r3, #10
 8002e74:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e76:	2302      	movs	r3, #2
 8002e78:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e82:	f107 0314 	add.w	r3, r7, #20
 8002e86:	4618      	mov	r0, r3
 8002e88:	f004 f926 	bl	80070d8 <HAL_RCC_OscConfig>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8002e92:	f000 fc3b 	bl	800370c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e96:	230f      	movs	r3, #15
 8002e98:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002eaa:	463b      	mov	r3, r7
 8002eac:	2104      	movs	r1, #4
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f004 fd2c 	bl	800790c <HAL_RCC_ClockConfig>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002eba:	f000 fc27 	bl	800370c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI48, RCC_MCODIV_1);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f004 fe21 	bl	8007b0c <HAL_RCC_MCOConfig>
}
 8002eca:	bf00      	nop
 8002ecc:	3758      	adds	r7, #88	; 0x58
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	af00      	add	r7, sp, #0
  /* DCMI_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2100      	movs	r1, #0
 8002eda:	2055      	movs	r0, #85	; 0x55
 8002edc:	f001 ff71 	bl	8004dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002ee0:	2055      	movs	r0, #85	; 0x55
 8002ee2:	f001 ff8a 	bl	8004dfa <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2100      	movs	r1, #0
 8002eea:	2028      	movs	r0, #40	; 0x28
 8002eec:	f001 ff69 	bl	8004dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ef0:	2028      	movs	r0, #40	; 0x28
 8002ef2:	f001 ff82 	bl	8004dfa <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	2017      	movs	r0, #23
 8002efc:	f001 ff61 	bl	8004dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f00:	2017      	movs	r0, #23
 8002f02:	f001 ff7a 	bl	8004dfa <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	2026      	movs	r0, #38	; 0x26
 8002f0c:	f001 ff59 	bl	8004dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f10:	2026      	movs	r0, #38	; 0x26
 8002f12:	f001 ff72 	bl	8004dfa <HAL_NVIC_EnableIRQ>
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8002f20:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <MX_DCMI_Init+0x60>)
 8002f22:	4a17      	ldr	r2, [pc, #92]	; (8002f80 <MX_DCMI_Init+0x64>)
 8002f24:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <MX_DCMI_Init+0x60>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8002f2c:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <MX_DCMI_Init+0x60>)
 8002f2e:	2220      	movs	r2, #32
 8002f30:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8002f32:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <MX_DCMI_Init+0x60>)
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8002f38:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <MX_DCMI_Init+0x60>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8002f3e:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <MX_DCMI_Init+0x60>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8002f44:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <MX_DCMI_Init+0x60>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <MX_DCMI_Init+0x60>)
 8002f4c:	2208      	movs	r2, #8
 8002f4e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8002f50:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <MX_DCMI_Init+0x60>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8002f56:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <MX_DCMI_Init+0x60>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002f5c:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <MX_DCMI_Init+0x60>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <MX_DCMI_Init+0x60>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8002f68:	4804      	ldr	r0, [pc, #16]	; (8002f7c <MX_DCMI_Init+0x60>)
 8002f6a:	f001 ff6f 	bl	8004e4c <HAL_DCMI_Init>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8002f74:	f000 fbca 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8002f78:	bf00      	nop
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	2000028c 	.word	0x2000028c
 8002f80:	50050000 	.word	0x50050000

08002f84 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002f88:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <MX_SDMMC1_SD_Init+0x3c>)
 8002f8a:	4a0e      	ldr	r2, [pc, #56]	; (8002fc4 <MX_SDMMC1_SD_Init+0x40>)
 8002f8c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002f8e:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <MX_SDMMC1_SD_Init+0x3c>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002f94:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <MX_SDMMC1_SD_Init+0x3c>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <MX_SDMMC1_SD_Init+0x3c>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002fa0:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <MX_SDMMC1_SD_Init+0x3c>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <MX_SDMMC1_SD_Init+0x3c>)
 8002fa8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fac:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8002fae:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <MX_SDMMC1_SD_Init+0x3c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002fb4:	bf00      	nop
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000390 	.word	0x20000390
 8002fc4:	40012800 	.word	0x40012800

08002fc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fcc:	4b14      	ldr	r3, [pc, #80]	; (8003020 <MX_USART2_UART_Init+0x58>)
 8002fce:	4a15      	ldr	r2, [pc, #84]	; (8003024 <MX_USART2_UART_Init+0x5c>)
 8002fd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002fd2:	4b13      	ldr	r3, [pc, #76]	; (8003020 <MX_USART2_UART_Init+0x58>)
 8002fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fda:	4b11      	ldr	r3, [pc, #68]	; (8003020 <MX_USART2_UART_Init+0x58>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fe0:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <MX_USART2_UART_Init+0x58>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fe6:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <MX_USART2_UART_Init+0x58>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <MX_USART2_UART_Init+0x58>)
 8002fee:	220c      	movs	r2, #12
 8002ff0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <MX_USART2_UART_Init+0x58>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff8:	4b09      	ldr	r3, [pc, #36]	; (8003020 <MX_USART2_UART_Init+0x58>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ffe:	4b08      	ldr	r3, [pc, #32]	; (8003020 <MX_USART2_UART_Init+0x58>)
 8003000:	2200      	movs	r2, #0
 8003002:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <MX_USART2_UART_Init+0x58>)
 8003006:	2200      	movs	r2, #0
 8003008:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800300a:	4805      	ldr	r0, [pc, #20]	; (8003020 <MX_USART2_UART_Init+0x58>)
 800300c:	f007 fff8 	bl	800b000 <HAL_UART_Init>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003016:	f000 fb79 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000414 	.word	0x20000414
 8003024:	40004400 	.word	0x40004400

08003028 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800302e:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <MX_DMA_Init+0x38>)
 8003030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003032:	4a0b      	ldr	r2, [pc, #44]	; (8003060 <MX_DMA_Init+0x38>)
 8003034:	f043 0302 	orr.w	r3, r3, #2
 8003038:	6493      	str	r3, [r2, #72]	; 0x48
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <MX_DMA_Init+0x38>)
 800303c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	2100      	movs	r1, #0
 800304a:	2044      	movs	r0, #68	; 0x44
 800304c:	f001 feb9 	bl	8004dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8003050:	2044      	movs	r0, #68	; 0x44
 8003052:	f001 fed2 	bl	8004dfa <HAL_NVIC_EnableIRQ>

}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000

08003064 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800306a:	463b      	mov	r3, r7
 800306c:	2220      	movs	r2, #32
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f00d fa8b 	bl	801058c <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8003076:	4b4f      	ldr	r3, [pc, #316]	; (80031b4 <MX_FMC_Init+0x150>)
 8003078:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800307c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800307e:	4b4d      	ldr	r3, [pc, #308]	; (80031b4 <MX_FMC_Init+0x150>)
 8003080:	4a4d      	ldr	r2, [pc, #308]	; (80031b8 <MX_FMC_Init+0x154>)
 8003082:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8003084:	4b4b      	ldr	r3, [pc, #300]	; (80031b4 <MX_FMC_Init+0x150>)
 8003086:	2202      	movs	r2, #2
 8003088:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800308a:	4b4a      	ldr	r3, [pc, #296]	; (80031b4 <MX_FMC_Init+0x150>)
 800308c:	2200      	movs	r2, #0
 800308e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8003090:	4b48      	ldr	r3, [pc, #288]	; (80031b4 <MX_FMC_Init+0x150>)
 8003092:	2200      	movs	r2, #0
 8003094:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8003096:	4b47      	ldr	r3, [pc, #284]	; (80031b4 <MX_FMC_Init+0x150>)
 8003098:	2200      	movs	r2, #0
 800309a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800309c:	4b45      	ldr	r3, [pc, #276]	; (80031b4 <MX_FMC_Init+0x150>)
 800309e:	2200      	movs	r2, #0
 80030a0:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80030a2:	4b44      	ldr	r3, [pc, #272]	; (80031b4 <MX_FMC_Init+0x150>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80030a8:	4b42      	ldr	r3, [pc, #264]	; (80031b4 <MX_FMC_Init+0x150>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80030ae:	4b41      	ldr	r3, [pc, #260]	; (80031b4 <MX_FMC_Init+0x150>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80030b4:	4b3f      	ldr	r3, [pc, #252]	; (80031b4 <MX_FMC_Init+0x150>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80030ba:	4b3e      	ldr	r3, [pc, #248]	; (80031b4 <MX_FMC_Init+0x150>)
 80030bc:	2200      	movs	r2, #0
 80030be:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80030c0:	4b3c      	ldr	r3, [pc, #240]	; (80031b4 <MX_FMC_Init+0x150>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80030c6:	4b3b      	ldr	r3, [pc, #236]	; (80031b4 <MX_FMC_Init+0x150>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80030cc:	4b39      	ldr	r3, [pc, #228]	; (80031b4 <MX_FMC_Init+0x150>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80030d2:	4b38      	ldr	r3, [pc, #224]	; (80031b4 <MX_FMC_Init+0x150>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80030d8:	4b36      	ldr	r3, [pc, #216]	; (80031b4 <MX_FMC_Init+0x150>)
 80030da:	2200      	movs	r2, #0
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80030de:	230f      	movs	r3, #15
 80030e0:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80030e2:	230f      	movs	r3, #15
 80030e4:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80030e6:	23ff      	movs	r3, #255	; 0xff
 80030e8:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 80030ea:	230f      	movs	r3, #15
 80030ec:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80030ee:	2310      	movs	r3, #16
 80030f0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80030f2:	2311      	movs	r3, #17
 80030f4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80030fa:	463b      	mov	r3, r7
 80030fc:	2200      	movs	r2, #0
 80030fe:	4619      	mov	r1, r3
 8003100:	482c      	ldr	r0, [pc, #176]	; (80031b4 <MX_FMC_Init+0x150>)
 8003102:	f007 ff35 	bl	800af70 <HAL_SRAM_Init>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 800310c:	f000 fafe 	bl	800370c <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8003110:	4b2a      	ldr	r3, [pc, #168]	; (80031bc <MX_FMC_Init+0x158>)
 8003112:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003116:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8003118:	4b28      	ldr	r3, [pc, #160]	; (80031bc <MX_FMC_Init+0x158>)
 800311a:	4a27      	ldr	r2, [pc, #156]	; (80031b8 <MX_FMC_Init+0x154>)
 800311c:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 800311e:	4b27      	ldr	r3, [pc, #156]	; (80031bc <MX_FMC_Init+0x158>)
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8003124:	4b25      	ldr	r3, [pc, #148]	; (80031bc <MX_FMC_Init+0x158>)
 8003126:	2200      	movs	r2, #0
 8003128:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800312a:	4b24      	ldr	r3, [pc, #144]	; (80031bc <MX_FMC_Init+0x158>)
 800312c:	2200      	movs	r2, #0
 800312e:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8003130:	4b22      	ldr	r3, [pc, #136]	; (80031bc <MX_FMC_Init+0x158>)
 8003132:	2200      	movs	r2, #0
 8003134:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8003136:	4b21      	ldr	r3, [pc, #132]	; (80031bc <MX_FMC_Init+0x158>)
 8003138:	2200      	movs	r2, #0
 800313a:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800313c:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <MX_FMC_Init+0x158>)
 800313e:	2200      	movs	r2, #0
 8003140:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8003142:	4b1e      	ldr	r3, [pc, #120]	; (80031bc <MX_FMC_Init+0x158>)
 8003144:	2200      	movs	r2, #0
 8003146:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8003148:	4b1c      	ldr	r3, [pc, #112]	; (80031bc <MX_FMC_Init+0x158>)
 800314a:	2200      	movs	r2, #0
 800314c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800314e:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <MX_FMC_Init+0x158>)
 8003150:	2200      	movs	r2, #0
 8003152:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <MX_FMC_Init+0x158>)
 8003156:	2200      	movs	r2, #0
 8003158:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800315a:	4b18      	ldr	r3, [pc, #96]	; (80031bc <MX_FMC_Init+0x158>)
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8003160:	4b16      	ldr	r3, [pc, #88]	; (80031bc <MX_FMC_Init+0x158>)
 8003162:	2200      	movs	r2, #0
 8003164:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8003166:	4b15      	ldr	r3, [pc, #84]	; (80031bc <MX_FMC_Init+0x158>)
 8003168:	2200      	movs	r2, #0
 800316a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800316c:	4b13      	ldr	r3, [pc, #76]	; (80031bc <MX_FMC_Init+0x158>)
 800316e:	2200      	movs	r2, #0
 8003170:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8003172:	4b12      	ldr	r3, [pc, #72]	; (80031bc <MX_FMC_Init+0x158>)
 8003174:	2200      	movs	r2, #0
 8003176:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003178:	230f      	movs	r3, #15
 800317a:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 800317c:	230f      	movs	r3, #15
 800317e:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8003180:	23ff      	movs	r3, #255	; 0xff
 8003182:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8003184:	230f      	movs	r3, #15
 8003186:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003188:	2310      	movs	r3, #16
 800318a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800318c:	2311      	movs	r3, #17
 800318e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8003190:	2300      	movs	r3, #0
 8003192:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8003194:	463b      	mov	r3, r7
 8003196:	2200      	movs	r2, #0
 8003198:	4619      	mov	r1, r3
 800319a:	4808      	ldr	r0, [pc, #32]	; (80031bc <MX_FMC_Init+0x158>)
 800319c:	f007 fee8 	bl	800af70 <HAL_SRAM_Init>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_FMC_Init+0x146>
  {
    Error_Handler( );
 80031a6:	f000 fab1 	bl	800370c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80031aa:	bf00      	nop
 80031ac:	3720      	adds	r7, #32
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000498 	.word	0x20000498
 80031b8:	a0000104 	.word	0xa0000104
 80031bc:	200004e8 	.word	0x200004e8

080031c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08e      	sub	sp, #56	; 0x38
 80031c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	605a      	str	r2, [r3, #4]
 80031d0:	609a      	str	r2, [r3, #8]
 80031d2:	60da      	str	r2, [r3, #12]
 80031d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80031d6:	4bb2      	ldr	r3, [pc, #712]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 80031d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031da:	4ab1      	ldr	r2, [pc, #708]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 80031dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031e2:	4baf      	ldr	r3, [pc, #700]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 80031e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ea:	623b      	str	r3, [r7, #32]
 80031ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031ee:	4bac      	ldr	r3, [pc, #688]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 80031f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f2:	4aab      	ldr	r2, [pc, #684]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 80031f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031fa:	4ba9      	ldr	r3, [pc, #676]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 80031fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003202:	61fb      	str	r3, [r7, #28]
 8003204:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003206:	4ba6      	ldr	r3, [pc, #664]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 8003208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320a:	4aa5      	ldr	r2, [pc, #660]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 800320c:	f043 0310 	orr.w	r3, r3, #16
 8003210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003212:	4ba3      	ldr	r3, [pc, #652]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 8003214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	61bb      	str	r3, [r7, #24]
 800321c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800321e:	4ba0      	ldr	r3, [pc, #640]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 8003220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003222:	4a9f      	ldr	r2, [pc, #636]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 8003224:	f043 0302 	orr.w	r3, r3, #2
 8003228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800322a:	4b9d      	ldr	r3, [pc, #628]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 800322c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003236:	4b9a      	ldr	r3, [pc, #616]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 8003238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323a:	4a99      	ldr	r2, [pc, #612]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003242:	4b97      	ldr	r3, [pc, #604]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 8003244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800324e:	4b94      	ldr	r3, [pc, #592]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 8003250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003252:	4a93      	ldr	r2, [pc, #588]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 8003254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800325a:	4b91      	ldr	r3, [pc, #580]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 800325c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8003266:	f003 ff27 	bl	80070b8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800326a:	4b8d      	ldr	r3, [pc, #564]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 800326c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326e:	4a8c      	ldr	r2, [pc, #560]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 8003270:	f043 0308 	orr.w	r3, r3, #8
 8003274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003276:	4b8a      	ldr	r3, [pc, #552]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 8003278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003282:	4b87      	ldr	r3, [pc, #540]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 8003284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003286:	4a86      	ldr	r2, [pc, #536]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 8003288:	f043 0304 	orr.w	r3, r3, #4
 800328c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800328e:	4b84      	ldr	r3, [pc, #528]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 8003290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	607b      	str	r3, [r7, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800329a:	4b81      	ldr	r3, [pc, #516]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 800329c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329e:	4a80      	ldr	r2, [pc, #512]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 80032a0:	f043 0320 	orr.w	r3, r3, #32
 80032a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032a6:	4b7e      	ldr	r3, [pc, #504]	; (80034a0 <MX_GPIO_Init+0x2e0>)
 80032a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032aa:	f003 0320 	and.w	r3, r3, #32
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OV5640_PWDN_Pin|OV5640_SIOC_Pin, GPIO_PIN_SET);
 80032b2:	2201      	movs	r2, #1
 80032b4:	2114      	movs	r1, #20
 80032b6:	487b      	ldr	r0, [pc, #492]	; (80034a4 <MX_GPIO_Init+0x2e4>)
 80032b8:	f002 ffae 	bl	8006218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80032bc:	2200      	movs	r2, #0
 80032be:	2101      	movs	r1, #1
 80032c0:	4879      	ldr	r0, [pc, #484]	; (80034a8 <MX_GPIO_Init+0x2e8>)
 80032c2:	f002 ffa9 	bl	8006218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 80032c6:	2200      	movs	r2, #0
 80032c8:	2143      	movs	r1, #67	; 0x43
 80032ca:	4876      	ldr	r0, [pc, #472]	; (80034a4 <MX_GPIO_Init+0x2e4>)
 80032cc:	f002 ffa4 	bl	8006218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 80032d0:	2200      	movs	r2, #0
 80032d2:	2140      	movs	r1, #64	; 0x40
 80032d4:	4875      	ldr	r0, [pc, #468]	; (80034ac <MX_GPIO_Init+0x2ec>)
 80032d6:	f002 ff9f 	bl	8006218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OV5640_SIOD_Pin|LED1_Pin, GPIO_PIN_SET);
 80032da:	2201      	movs	r2, #1
 80032dc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80032e0:	4873      	ldr	r0, [pc, #460]	; (80034b0 <MX_GPIO_Init+0x2f0>)
 80032e2:	f002 ff99 	bl	8006218 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 80032e6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80032f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032f2:	2302      	movs	r3, #2
 80032f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80032f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032fa:	4619      	mov	r1, r3
 80032fc:	486a      	ldr	r0, [pc, #424]	; (80034a8 <MX_GPIO_Init+0x2e8>)
 80032fe:	f002 fd07 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_PWDN_Pin */
  GPIO_InitStruct.Pin = OV5640_PWDN_Pin;
 8003302:	2304      	movs	r3, #4
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003306:	2301      	movs	r3, #1
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330a:	2300      	movs	r3, #0
 800330c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800330e:	2302      	movs	r3, #2
 8003310:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_PWDN_GPIO_Port, &GPIO_InitStruct);
 8003312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003316:	4619      	mov	r1, r3
 8003318:	4862      	ldr	r0, [pc, #392]	; (80034a4 <MX_GPIO_Init+0x2e4>)
 800331a:	f002 fcf9 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800331e:	2330      	movs	r3, #48	; 0x30
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003322:	2302      	movs	r3, #2
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003326:	2300      	movs	r3, #0
 8003328:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332a:	2303      	movs	r3, #3
 800332c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800332e:	2305      	movs	r3, #5
 8003330:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003336:	4619      	mov	r1, r3
 8003338:	485d      	ldr	r0, [pc, #372]	; (80034b0 <MX_GPIO_Init+0x2f0>)
 800333a:	f002 fce9 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800333e:	2301      	movs	r3, #1
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003342:	2301      	movs	r3, #1
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	2300      	movs	r3, #0
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334a:	2300      	movs	r3, #0
 800334c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800334e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003352:	4619      	mov	r1, r3
 8003354:	4854      	ldr	r0, [pc, #336]	; (80034a8 <MX_GPIO_Init+0x2e8>)
 8003356:	f002 fcdb 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800335a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003360:	2312      	movs	r3, #18
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003364:	2301      	movs	r3, #1
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003368:	2303      	movs	r3, #3
 800336a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800336c:	2304      	movs	r3, #4
 800336e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003374:	4619      	mov	r1, r3
 8003376:	484e      	ldr	r0, [pc, #312]	; (80034b0 <MX_GPIO_Init+0x2f0>)
 8003378:	f002 fcca 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART1_TX_Pin */
  GPIO_InitStruct.Pin = USART1_TX_Pin;
 800337c:	2340      	movs	r3, #64	; 0x40
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003380:	2302      	movs	r3, #2
 8003382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003388:	2303      	movs	r3, #3
 800338a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800338c:	2307      	movs	r3, #7
 800338e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8003390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003394:	4619      	mov	r1, r3
 8003396:	4846      	ldr	r0, [pc, #280]	; (80034b0 <MX_GPIO_Init+0x2f0>)
 8003398:	f002 fcba 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SDB_Pin SAI1_MCKA_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 800339c:	235c      	movs	r3, #92	; 0x5c
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a0:	2302      	movs	r3, #2
 80033a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a8:	2300      	movs	r3, #0
 80033aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80033ac:	230d      	movs	r3, #13
 80033ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b4:	4619      	mov	r1, r3
 80033b6:	483f      	ldr	r0, [pc, #252]	; (80034b4 <MX_GPIO_Init+0x2f4>)
 80033b8:	f002 fcaa 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 80033bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c2:	2302      	movs	r3, #2
 80033c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ca:	2300      	movs	r3, #0
 80033cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033ce:	2302      	movs	r3, #2
 80033d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80033d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d6:	4619      	mov	r1, r3
 80033d8:	4835      	ldr	r0, [pc, #212]	; (80034b0 <MX_GPIO_Init+0x2f0>)
 80033da:	f002 fc99 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : UART1_RX_Pin UART1_CTS_Pin UART1_RTS_Pin */
  GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 80033de:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e4:	2302      	movs	r3, #2
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ec:	2303      	movs	r3, #3
 80033ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033f0:	2307      	movs	r3, #7
 80033f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033f8:	4619      	mov	r1, r3
 80033fa:	482f      	ldr	r0, [pc, #188]	; (80034b8 <MX_GPIO_Init+0x2f8>)
 80033fc:	f002 fc88 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8003400:	2380      	movs	r3, #128	; 0x80
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003404:	2300      	movs	r3, #0
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 800340c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003410:	4619      	mov	r1, r3
 8003412:	4824      	ldr	r0, [pc, #144]	; (80034a4 <MX_GPIO_Init+0x2e4>)
 8003414:	f002 fc7c 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTGFS_DP_Pin USB_OTGFS_DM_Pin USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8003418:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341e:	2302      	movs	r3, #2
 8003420:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	2300      	movs	r3, #0
 8003424:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003426:	2303      	movs	r3, #3
 8003428:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800342a:	230a      	movs	r3, #10
 800342c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800342e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003432:	4619      	mov	r1, r3
 8003434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003438:	f002 fc6a 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 800343c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003442:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003448:	2302      	movs	r3, #2
 800344a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 800344c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003450:	4619      	mov	r1, r3
 8003452:	4816      	ldr	r0, [pc, #88]	; (80034ac <MX_GPIO_Init+0x2ec>)
 8003454:	f002 fc5c 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 8003458:	2343      	movs	r3, #67	; 0x43
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800345c:	2301      	movs	r3, #1
 800345e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003464:	2300      	movs	r3, #0
 8003466:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800346c:	4619      	mov	r1, r3
 800346e:	480d      	ldr	r0, [pc, #52]	; (80034a4 <MX_GPIO_Init+0x2e4>)
 8003470:	f002 fc4e 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8003474:	2340      	movs	r3, #64	; 0x40
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003478:	2301      	movs	r3, #1
 800347a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347c:	2300      	movs	r3, #0
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003480:	2300      	movs	r3, #0
 8003482:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8003484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003488:	4619      	mov	r1, r3
 800348a:	4808      	ldr	r0, [pc, #32]	; (80034ac <MX_GPIO_Init+0x2ec>)
 800348c:	f002 fc40 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8003490:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003496:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800349a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	2300      	movs	r3, #0
 800349e:	e00d      	b.n	80034bc <MX_GPIO_Init+0x2fc>
 80034a0:	40021000 	.word	0x40021000
 80034a4:	48001c00 	.word	0x48001c00
 80034a8:	48002000 	.word	0x48002000
 80034ac:	48000800 	.word	0x48000800
 80034b0:	48000400 	.word	0x48000400
 80034b4:	48001000 	.word	0x48001000
 80034b8:	48001800 	.word	0x48001800
 80034bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80034be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c2:	4619      	mov	r1, r3
 80034c4:	488c      	ldr	r0, [pc, #560]	; (80036f8 <MX_GPIO_Init+0x538>)
 80034c6:	f002 fc23 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d0:	2302      	movs	r3, #2
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d8:	2300      	movs	r3, #0
 80034da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80034dc:	2300      	movs	r3, #0
 80034de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e4:	4619      	mov	r1, r3
 80034e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ea:	f002 fc11 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : DATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 80034ee:	2384      	movs	r3, #132	; 0x84
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f2:	2302      	movs	r3, #2
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fa:	2300      	movs	r3, #0
 80034fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80034fe:	2306      	movs	r3, #6
 8003500:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003506:	4619      	mov	r1, r3
 8003508:	487c      	ldr	r0, [pc, #496]	; (80036fc <MX_GPIO_Init+0x53c>)
 800350a:	f002 fc01 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 800350e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003514:	230b      	movs	r3, #11
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	2300      	movs	r3, #0
 800351a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 800351c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003520:	4619      	mov	r1, r3
 8003522:	4877      	ldr	r0, [pc, #476]	; (8003700 <MX_GPIO_Init+0x540>)
 8003524:	f002 fbf4 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A0_Pin ARD_A5_Pin PC1 ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin|GPIO_PIN_1|ARD_A2_Pin;
 8003528:	231b      	movs	r3, #27
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800352c:	230b      	movs	r3, #11
 800352e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003538:	4619      	mov	r1, r3
 800353a:	4870      	ldr	r0, [pc, #448]	; (80036fc <MX_GPIO_Init+0x53c>)
 800353c:	f002 fbe8 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_NCS_Pin QSPI_BK1_IO1_Pin QSPI_BK1_IO0_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8003540:	f640 0303 	movw	r3, #2051	; 0x803
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003546:	2302      	movs	r3, #2
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	2300      	movs	r3, #0
 800354c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354e:	2303      	movs	r3, #3
 8003550:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003552:	230a      	movs	r3, #10
 8003554:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800355a:	4619      	mov	r1, r3
 800355c:	4869      	ldr	r0, [pc, #420]	; (8003704 <MX_GPIO_Init+0x544>)
 800355e:	f002 fbd7 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8003562:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003568:	2302      	movs	r3, #2
 800356a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356c:	2300      	movs	r3, #0
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003570:	2303      	movs	r3, #3
 8003572:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003574:	2308      	movs	r3, #8
 8003576:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800357c:	4619      	mov	r1, r3
 800357e:	485e      	ldr	r0, [pc, #376]	; (80036f8 <MX_GPIO_Init+0x538>)
 8003580:	f002 fbc6 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8003584:	2320      	movs	r3, #32
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003588:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800358c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358e:	2300      	movs	r3, #0
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8003592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003596:	4619      	mov	r1, r3
 8003598:	4858      	ldr	r0, [pc, #352]	; (80036fc <MX_GPIO_Init+0x53c>)
 800359a:	f002 fbb9 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 800359e:	2320      	movs	r3, #32
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a2:	2302      	movs	r3, #2
 80035a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035aa:	2303      	movs	r3, #3
 80035ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035ae:	2305      	movs	r3, #5
 80035b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 80035b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b6:	4619      	mov	r1, r3
 80035b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035bc:	f002 fba8 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_SIOC_Pin */
  GPIO_InitStruct.Pin = OV5640_SIOC_Pin;
 80035c0:	2310      	movs	r3, #16
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80035c4:	2311      	movs	r3, #17
 80035c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035c8:	2301      	movs	r3, #1
 80035ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035cc:	2303      	movs	r3, #3
 80035ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_SIOC_GPIO_Port, &GPIO_InitStruct);
 80035d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035d4:	4619      	mov	r1, r3
 80035d6:	484c      	ldr	r0, [pc, #304]	; (8003708 <MX_GPIO_Init+0x548>)
 80035d8:	f002 fb9a 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : STMOD_ADC_Pin ARD_A4_Pin */
  GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 80035dc:	2312      	movs	r3, #18
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80035e0:	230b      	movs	r3, #11
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ec:	4619      	mov	r1, r3
 80035ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035f2:	f002 fb8d 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO2_Pin QSPI_CLK_Pin QSPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 80035f6:	23c8      	movs	r3, #200	; 0xc8
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fa:	2302      	movs	r3, #2
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003602:	2303      	movs	r3, #3
 8003604:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003606:	230a      	movs	r3, #10
 8003608:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800360e:	4619      	mov	r1, r3
 8003610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003614:	f002 fb7c 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8003618:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800361e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003624:	2302      	movs	r3, #2
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8003628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800362c:	4619      	mov	r1, r3
 800362e:	4834      	ldr	r0, [pc, #208]	; (8003700 <MX_GPIO_Init+0x540>)
 8003630:	f002 fb6e 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8003634:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363a:	2302      	movs	r3, #2
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363e:	2300      	movs	r3, #0
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003642:	2303      	movs	r3, #3
 8003644:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003646:	2305      	movs	r3, #5
 8003648:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 800364a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800364e:	4619      	mov	r1, r3
 8003650:	482c      	ldr	r0, [pc, #176]	; (8003704 <MX_GPIO_Init+0x544>)
 8003652:	f002 fb5d 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_SIOD_Pin */
  GPIO_InitStruct.Pin = OV5640_SIOD_Pin;
 8003656:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800365c:	2311      	movs	r3, #17
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003660:	2301      	movs	r3, #1
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003664:	2303      	movs	r3, #3
 8003666:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OV5640_SIOD_GPIO_Port, &GPIO_InitStruct);
 8003668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800366c:	4619      	mov	r1, r3
 800366e:	4825      	ldr	r0, [pc, #148]	; (8003704 <MX_GPIO_Init+0x544>)
 8003670:	f002 fb4e 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_RESET_Pin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8003674:	2304      	movs	r3, #4
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003678:	2300      	movs	r3, #0
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8003680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003684:	4619      	mov	r1, r3
 8003686:	481f      	ldr	r0, [pc, #124]	; (8003704 <MX_GPIO_Init+0x544>)
 8003688:	f002 fb42 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800368c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003692:	2302      	movs	r3, #2
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003696:	2300      	movs	r3, #0
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369a:	2300      	movs	r3, #0
 800369c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800369e:	230d      	movs	r3, #13
 80036a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036a6:	4619      	mov	r1, r3
 80036a8:	4816      	ldr	r0, [pc, #88]	; (8003704 <MX_GPIO_Init+0x544>)
 80036aa:	f002 fb31 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 80036ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b4:	2302      	movs	r3, #2
 80036b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036bc:	2300      	movs	r3, #0
 80036be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80036c0:	2306      	movs	r3, #6
 80036c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 80036c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036c8:	4619      	mov	r1, r3
 80036ca:	480e      	ldr	r0, [pc, #56]	; (8003704 <MX_GPIO_Init+0x544>)
 80036cc:	f002 fb20 	bl	8005d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80036d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80036d6:	2311      	movs	r3, #17
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036de:	2300      	movs	r3, #0
 80036e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80036e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e6:	4619      	mov	r1, r3
 80036e8:	4806      	ldr	r0, [pc, #24]	; (8003704 <MX_GPIO_Init+0x544>)
 80036ea:	f002 fb11 	bl	8005d10 <HAL_GPIO_Init>

}
 80036ee:	bf00      	nop
 80036f0:	3738      	adds	r7, #56	; 0x38
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	48001800 	.word	0x48001800
 80036fc:	48000800 	.word	0x48000800
 8003700:	48001400 	.word	0x48001400
 8003704:	48000400 	.word	0x48000400
 8003708:	48001c00 	.word	0x48001c00

0800370c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf_dbg("!!!!!!!!Error_Handler!!!!!!!");
 8003710:	4b0a      	ldr	r3, [pc, #40]	; (800373c <Error_Handler+0x30>)
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	4618      	mov	r0, r3
 8003716:	f00d fb0f 	bl	8010d38 <iprintf>
 800371a:	4b09      	ldr	r3, [pc, #36]	; (8003740 <Error_Handler+0x34>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f00d fb0a 	bl	8010d38 <iprintf>
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <Error_Handler+0x30>)
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	4618      	mov	r0, r3
 800372a:	f00d fb05 	bl	8010d38 <iprintf>
 800372e:	4805      	ldr	r0, [pc, #20]	; (8003744 <Error_Handler+0x38>)
 8003730:	f00d fb02 	bl	8010d38 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 8003734:	b672      	cpsid	i
}
 8003736:	bf00      	nop
  __disable_irq();
  while (1)
 8003738:	e7fe      	b.n	8003738 <Error_Handler+0x2c>
 800373a:	bf00      	nop
 800373c:	2000007c 	.word	0x2000007c
 8003740:	2000009c 	.word	0x2000009c
 8003744:	08011928 	.word	0x08011928

08003748 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]

  if (pObj == NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d102      	bne.n	800375e <OV5640_RegisterBusIO+0x16>
  {
    return OV5640_ERROR;
 8003758:	f04f 33ff 	mov.w	r3, #4294967295
 800375c:	e016      	b.n	800378c <OV5640_RegisterBusIO+0x44>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	891a      	ldrh	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	811a      	strh	r2, [r3, #8]

    if (pObj->IO.Init != NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d004      	beq.n	8003788 <OV5640_RegisterBusIO+0x40>
    {
      pObj->IO.Init();
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4798      	blx	r3
      return OV5640_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	e001      	b.n	800378c <OV5640_RegisterBusIO+0x44>
    }

  }

  return OV5640_ERROR;
 8003788:	f04f 33ff 	mov.w	r3, #4294967295
}
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	613b      	str	r3, [r7, #16]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };


  if (pObj->IsInitialized == 0U)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d15a      	bne.n	8003864 <OV5640_Init+0xd0>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d80e      	bhi.n	80037d2 <OV5640_Init+0x3e>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00f      	beq.n	80037da <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d00c      	beq.n	80037da <OV5640_Init+0x46>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d009      	beq.n	80037da <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b07      	cmp	r3, #7
 80037ca:	d006      	beq.n	80037da <OV5640_Init+0x46>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d003      	beq.n	80037da <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 80037d2:	f04f 33ff 	mov.w	r3, #4294967295
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	e044      	b.n	8003864 <OV5640_Init+0xd0>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	e014      	b.n	800380a <OV5640_Init+0x76>
      {
        if (ret != OV5640_ERROR)
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e6:	d00d      	beq.n	8003804 <OV5640_Init+0x70>
        {

          I2C2_WriteData(OV5640_ADDR, OV5640_Common[index][0], 2, (uint8_t)OV5640_Common[index][1]);
 80037e8:	4a21      	ldr	r2, [pc, #132]	; (8003870 <OV5640_Init+0xdc>)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80037f0:	4a1f      	ldr	r2, [pc, #124]	; (8003870 <OV5640_Init+0xdc>)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	885b      	ldrh	r3, [r3, #2]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2202      	movs	r2, #2
 80037fe:	2078      	movs	r0, #120	; 0x78
 8003800:	f7fe fa10 	bl	8001c24 <I2C2_WriteData>
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	3301      	adds	r3, #1
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2bfd      	cmp	r3, #253	; 0xfd
 800380e:	d9e7      	bls.n	80037e0 <OV5640_Init+0x4c>

        }
      }

      if (ret == OV5640_OK)
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d126      	bne.n	8003864 <OV5640_Init+0xd0>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f92d 	bl	8003a78 <OV5640_SetResolution>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <OV5640_Init+0x98>
        {
          ret = OV5640_ERROR;
 8003824:	f04f 33ff 	mov.w	r3, #4294967295
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	e01b      	b.n	8003864 <OV5640_Init+0xd0>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f820 	bl	8003874 <OV5640_SetPixelFormat>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 800383a:	f04f 33ff 	mov.w	r3, #4294967295
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	e010      	b.n	8003864 <OV5640_Init+0xd0>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_LOW, OV5640_POLARITY_HREF_HIGH,
 8003842:	2300      	movs	r3, #0
 8003844:	2201      	movs	r2, #1
 8003846:	2100      	movs	r1, #0
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 fa01 	bl	8003c50 <OV5640_SetPolarities>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <OV5640_Init+0xc8>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8003854:	f04f 33ff 	mov.w	r3, #4294967295
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	e003      	b.n	8003864 <OV5640_Init+0xd0>
        }
        else
        {
          pObj->IsInitialized = 1U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 8003864:	693b      	ldr	r3, [r7, #16]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	08011a64 	.word	0x08011a64

08003874 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00f      	beq.n	80038a8 <OV5640_SetPixelFormat+0x34>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d00c      	beq.n	80038a8 <OV5640_SetPixelFormat+0x34>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d009      	beq.n	80038a8 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b07      	cmp	r3, #7
 8003898:	d006      	beq.n	80038a8 <OV5640_SetPixelFormat+0x34>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b08      	cmp	r3, #8
 800389e:	d003      	beq.n	80038a8 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 80038a0:	f04f 33ff 	mov.w	r3, #4294967295
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	e0d7      	b.n	8003a58 <OV5640_SetPixelFormat+0x1e4>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	2b07      	cmp	r3, #7
 80038ae:	d87f      	bhi.n	80039b0 <OV5640_SetPixelFormat+0x13c>
 80038b0:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <OV5640_SetPixelFormat+0x44>)
 80038b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b6:	bf00      	nop
 80038b8:	0800390b 	.word	0x0800390b
 80038bc:	080038d9 	.word	0x080038d9
 80038c0:	080039b1 	.word	0x080039b1
 80038c4:	080039b1 	.word	0x080039b1
 80038c8:	080039b1 	.word	0x080039b1
 80038cc:	080039b1 	.word	0x080039b1
 80038d0:	08003945 	.word	0x08003945
 80038d4:	0800397f 	.word	0x0800397f
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e011      	b.n	8003902 <OV5640_SetPixelFormat+0x8e>
        {

            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 80038de:	4a61      	ldr	r2, [pc, #388]	; (8003a64 <OV5640_SetPixelFormat+0x1f0>)
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	885b      	ldrh	r3, [r3, #2]
 80038e8:	73fb      	strb	r3, [r7, #15]
            I2C2_WriteData(OV5640_ADDR, OV5640_PF_YUV422[index][0], 2, tmp);
 80038ea:	4a5e      	ldr	r2, [pc, #376]	; (8003a64 <OV5640_SetPixelFormat+0x1f0>)
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	2202      	movs	r2, #2
 80038f6:	2078      	movs	r0, #120	; 0x78
 80038f8:	f7fe f994 	bl	8001c24 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	3301      	adds	r3, #1
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d9ea      	bls.n	80038de <OV5640_SetPixelFormat+0x6a>


        }
        break;
 8003908:	e06a      	b.n	80039e0 <OV5640_SetPixelFormat+0x16c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e015      	b.n	800393c <OV5640_SetPixelFormat+0xc8>
        {
          if (ret != OV5640_ERROR)
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003916:	d00e      	beq.n	8003936 <OV5640_SetPixelFormat+0xc2>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8003918:	4a53      	ldr	r2, [pc, #332]	; (8003a68 <OV5640_SetPixelFormat+0x1f4>)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	885b      	ldrh	r3, [r3, #2]
 8003922:	73fb      	strb	r3, [r7, #15]
            I2C2_WriteData(OV5640_ADDR, OV5640_PF_RGB888[index][0], 2, tmp);
 8003924:	4a50      	ldr	r2, [pc, #320]	; (8003a68 <OV5640_SetPixelFormat+0x1f4>)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	2202      	movs	r2, #2
 8003930:	2078      	movs	r0, #120	; 0x78
 8003932:	f7fe f977 	bl	8001c24 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	3301      	adds	r3, #1
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d9e6      	bls.n	8003910 <OV5640_SetPixelFormat+0x9c>
          }
        }
        break;
 8003942:	e04d      	b.n	80039e0 <OV5640_SetPixelFormat+0x16c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	e015      	b.n	8003976 <OV5640_SetPixelFormat+0x102>
        {
          if (ret != OV5640_ERROR)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003950:	d00e      	beq.n	8003970 <OV5640_SetPixelFormat+0xfc>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8003952:	4a46      	ldr	r2, [pc, #280]	; (8003a6c <OV5640_SetPixelFormat+0x1f8>)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	885b      	ldrh	r3, [r3, #2]
 800395c:	73fb      	strb	r3, [r7, #15]
            I2C2_WriteData(OV5640_ADDR, OV5640_PF_Y8[index][0], 2, tmp);
 800395e:	4a43      	ldr	r2, [pc, #268]	; (8003a6c <OV5640_SetPixelFormat+0x1f8>)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003966:	7bfb      	ldrb	r3, [r7, #15]
 8003968:	2202      	movs	r2, #2
 800396a:	2078      	movs	r0, #120	; 0x78
 800396c:	f7fe f95a 	bl	8001c24 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	3301      	adds	r3, #1
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d9e6      	bls.n	800394a <OV5640_SetPixelFormat+0xd6>
          }
        }
        break;
 800397c:	e030      	b.n	80039e0 <OV5640_SetPixelFormat+0x16c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	e011      	b.n	80039a8 <OV5640_SetPixelFormat+0x134>
        {
			tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8003984:	4a3a      	ldr	r2, [pc, #232]	; (8003a70 <OV5640_SetPixelFormat+0x1fc>)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	885b      	ldrh	r3, [r3, #2]
 800398e:	73fb      	strb	r3, [r7, #15]
			I2C2_WriteData(OV5640_ADDR, OV5640_PF_JPEG[index][0], 2, tmp);
 8003990:	4a37      	ldr	r2, [pc, #220]	; (8003a70 <OV5640_SetPixelFormat+0x1fc>)
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	2202      	movs	r2, #2
 800399c:	2078      	movs	r0, #120	; 0x78
 800399e:	f7fe f941 	bl	8001c24 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	3301      	adds	r3, #1
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d9ea      	bls.n	8003984 <OV5640_SetPixelFormat+0x110>
        }
        break;
 80039ae:	e017      	b.n	80039e0 <OV5640_SetPixelFormat+0x16c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	e010      	b.n	80039d8 <OV5640_SetPixelFormat+0x164>
        {

            I2C2_WriteData(OV5640_ADDR, OV5640_PF_RGB565[index][0], 2, (uint8_t)OV5640_PF_RGB565[index][1]);
 80039b6:	4a2f      	ldr	r2, [pc, #188]	; (8003a74 <OV5640_SetPixelFormat+0x200>)
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80039be:	4a2d      	ldr	r2, [pc, #180]	; (8003a74 <OV5640_SetPixelFormat+0x200>)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	885b      	ldrh	r3, [r3, #2]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2202      	movs	r2, #2
 80039cc:	2078      	movs	r0, #120	; 0x78
 80039ce:	f7fe f929 	bl	8001c24 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	3301      	adds	r3, #1
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d9eb      	bls.n	80039b6 <OV5640_SetPixelFormat+0x142>

        }
        break;
 80039de:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d138      	bne.n	8003a58 <OV5640_SetPixelFormat+0x1e4>
    {

    	tmp = I2C2_ReadData(OV5640_ADDR, OV5640_TIMING_TC_REG21, 2);
 80039e6:	2202      	movs	r2, #2
 80039e8:	f643 0121 	movw	r1, #14369	; 0x3821
 80039ec:	2078      	movs	r0, #120	; 0x78
 80039ee:	f7fe f94b 	bl	8001c88 <I2C2_ReadData>
 80039f2:	4603      	mov	r3, r0
 80039f4:	73fb      	strb	r3, [r7, #15]
        tmp |= (1 << 5);
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	f043 0320 	orr.w	r3, r3, #32
 80039fc:	73fb      	strb	r3, [r7, #15]
        I2C2_WriteData(OV5640_ADDR, OV5640_TIMING_TC_REG21, 2, tmp);
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	2202      	movs	r2, #2
 8003a02:	f643 0121 	movw	r1, #14369	; 0x3821
 8003a06:	2078      	movs	r0, #120	; 0x78
 8003a08:	f7fe f90c 	bl	8001c24 <I2C2_WriteData>

        tmp = I2C2_ReadData(OV5640_ADDR, OV5640_SYSREM_RESET02, 2);
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	f243 0102 	movw	r1, #12290	; 0x3002
 8003a12:	2078      	movs	r0, #120	; 0x78
 8003a14:	f7fe f938 	bl	8001c88 <I2C2_ReadData>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	73fb      	strb	r3, [r7, #15]
        tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	f023 031c 	bic.w	r3, r3, #28
 8003a22:	73fb      	strb	r3, [r7, #15]
        I2C2_WriteData(OV5640_ADDR, OV5640_SYSREM_RESET02, 2, tmp);
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f243 0102 	movw	r1, #12290	; 0x3002
 8003a2c:	2078      	movs	r0, #120	; 0x78
 8003a2e:	f7fe f8f9 	bl	8001c24 <I2C2_WriteData>

        tmp = I2C2_ReadData(OV5640_ADDR, OV5640_CLOCK_ENABLE02, 2);
 8003a32:	2202      	movs	r2, #2
 8003a34:	f243 0106 	movw	r1, #12294	; 0x3006
 8003a38:	2078      	movs	r0, #120	; 0x78
 8003a3a:	f7fe f925 	bl	8001c88 <I2C2_ReadData>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	73fb      	strb	r3, [r7, #15]
        tmp |= ((1 << 5) | (1 << 3));
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003a48:	73fb      	strb	r3, [r7, #15]
        I2C2_WriteData(OV5640_ADDR, OV5640_CLOCK_ENABLE02, 2, tmp);
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	f243 0106 	movw	r1, #12294	; 0x3006
 8003a52:	2078      	movs	r0, #120	; 0x78
 8003a54:	f7fe f8e6 	bl	8001c24 <I2C2_WriteData>


      }

  }
  return 1;
 8003a58:	2301      	movs	r3, #1
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	08011e5c 	.word	0x08011e5c
 8003a68:	08011e64 	.word	0x08011e64
 8003a6c:	08011e6c 	.word	0x08011e6c
 8003a70:	08011e74 	.word	0x08011e74
 8003a74:	08011e7c 	.word	0x08011e7c

08003a78 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d903      	bls.n	8003a94 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8003a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	e0cd      	b.n	8003c30 <OV5640_SetResolution+0x1b8>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	f200 80c6 	bhi.w	8003c28 <OV5640_SetResolution+0x1b0>
 8003a9c:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <OV5640_SetResolution+0x2c>)
 8003a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa2:	bf00      	nop
 8003aa4:	08003ab9 	.word	0x08003ab9
 8003aa8:	08003b07 	.word	0x08003b07
 8003aac:	08003b3f 	.word	0x08003b3f
 8003ab0:	08003b8d 	.word	0x08003b8d
 8003ab4:	08003bdb 	.word	0x08003bdb
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8003ab8:	2300      	movs	r3, #0
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	e01f      	b.n	8003afe <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac4:	d018      	beq.n	8003af8 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8003ac6:	4a5d      	ldr	r2, [pc, #372]	; (8003c3c <OV5640_SetResolution+0x1c4>)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	885b      	ldrh	r3, [r3, #2]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f103 0018 	add.w	r0, r3, #24
 8003ada:	4a58      	ldr	r2, [pc, #352]	; (8003c3c <OV5640_SetResolution+0x1c4>)
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003ae2:	f107 020f 	add.w	r2, r7, #15
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	f000 fb1a 	bl	8004120 <ov5640_write_reg>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8003af2:	f04f 33ff 	mov.w	r3, #4294967295
 8003af6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	3301      	adds	r3, #1
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d9dc      	bls.n	8003abe <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8003b04:	e094      	b.n	8003c30 <OV5640_SetResolution+0x1b8>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8003b06:	2300      	movs	r3, #0
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	e014      	b.n	8003b36 <OV5640_SetResolution+0xbe>
        {
          if (ret != OV5640_ERROR)
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b12:	d00d      	beq.n	8003b30 <OV5640_SetResolution+0xb8>
          {

            I2C2_WriteData(OV5640_ADDR, OV5640_QVGA[index][0], 2, (uint8_t)OV5640_QVGA[index][1]);
 8003b14:	4a4a      	ldr	r2, [pc, #296]	; (8003c40 <OV5640_SetResolution+0x1c8>)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003b1c:	4a48      	ldr	r2, [pc, #288]	; (8003c40 <OV5640_SetResolution+0x1c8>)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	885b      	ldrh	r3, [r3, #2]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2202      	movs	r2, #2
 8003b2a:	2078      	movs	r0, #120	; 0x78
 8003b2c:	f7fe f87a 	bl	8001c24 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	3301      	adds	r3, #1
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b03      	cmp	r3, #3
 8003b3a:	d9e7      	bls.n	8003b0c <OV5640_SetResolution+0x94>

          }
        }
        break;
 8003b3c:	e078      	b.n	8003c30 <OV5640_SetResolution+0x1b8>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	e01f      	b.n	8003b84 <OV5640_SetResolution+0x10c>
        {
          if (ret != OV5640_ERROR)
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4a:	d018      	beq.n	8003b7e <OV5640_SetResolution+0x106>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8003b4c:	4a3d      	ldr	r2, [pc, #244]	; (8003c44 <OV5640_SetResolution+0x1cc>)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	885b      	ldrh	r3, [r3, #2]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f103 0018 	add.w	r0, r3, #24
 8003b60:	4a38      	ldr	r2, [pc, #224]	; (8003c44 <OV5640_SetResolution+0x1cc>)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003b68:	f107 020f 	add.w	r2, r7, #15
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	f000 fad7 	bl	8004120 <ov5640_write_reg>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <OV5640_SetResolution+0x106>
            {
              ret = OV5640_ERROR;
 8003b78:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	3301      	adds	r3, #1
 8003b82:	613b      	str	r3, [r7, #16]
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d9dc      	bls.n	8003b44 <OV5640_SetResolution+0xcc>
            }
          }
        }
        break;
 8003b8a:	e051      	b.n	8003c30 <OV5640_SetResolution+0x1b8>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	e01f      	b.n	8003bd2 <OV5640_SetResolution+0x15a>
        {
          if (ret != OV5640_ERROR)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d018      	beq.n	8003bcc <OV5640_SetResolution+0x154>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8003b9a:	4a2b      	ldr	r2, [pc, #172]	; (8003c48 <OV5640_SetResolution+0x1d0>)
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	885b      	ldrh	r3, [r3, #2]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f103 0018 	add.w	r0, r3, #24
 8003bae:	4a26      	ldr	r2, [pc, #152]	; (8003c48 <OV5640_SetResolution+0x1d0>)
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003bb6:	f107 020f 	add.w	r2, r7, #15
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f000 fab0 	bl	8004120 <ov5640_write_reg>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <OV5640_SetResolution+0x154>
            {
              ret = OV5640_ERROR;
 8003bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bca:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d9dc      	bls.n	8003b92 <OV5640_SetResolution+0x11a>
            }
          }
        }
        break;
 8003bd8:	e02a      	b.n	8003c30 <OV5640_SetResolution+0x1b8>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	e01f      	b.n	8003c20 <OV5640_SetResolution+0x1a8>
        {
          if (ret != OV5640_ERROR)
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be6:	d018      	beq.n	8003c1a <OV5640_SetResolution+0x1a2>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8003be8:	4a18      	ldr	r2, [pc, #96]	; (8003c4c <OV5640_SetResolution+0x1d4>)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	885b      	ldrh	r3, [r3, #2]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f103 0018 	add.w	r0, r3, #24
 8003bfc:	4a13      	ldr	r2, [pc, #76]	; (8003c4c <OV5640_SetResolution+0x1d4>)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003c04:	f107 020f 	add.w	r2, r7, #15
 8003c08:	2301      	movs	r3, #1
 8003c0a:	f000 fa89 	bl	8004120 <ov5640_write_reg>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <OV5640_SetResolution+0x1a2>
            {
              ret = OV5640_ERROR;
 8003c14:	f04f 33ff 	mov.w	r3, #4294967295
 8003c18:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d9dc      	bls.n	8003be0 <OV5640_SetResolution+0x168>
            }
          }
        }
        break;
 8003c26:	e003      	b.n	8003c30 <OV5640_SetResolution+0x1b8>
      default:
        ret = OV5640_ERROR;
 8003c28:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2c:	617b      	str	r3, [r7, #20]
        break;
 8003c2e:	bf00      	nop
    }
  }

  return ret;
 8003c30:	697b      	ldr	r3, [r7, #20]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	08011e84 	.word	0x08011e84
 8003c40:	08011e94 	.word	0x08011e94
 8003c44:	08011ea4 	.word	0x08011ea4
 8003c48:	08011eb4 	.word	0x08011eb4
 8003c4c:	08011ec4 	.word	0x08011ec4

08003c50 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d011      	beq.n	8003c8c <OV5640_SetPolarities+0x3c>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <OV5640_SetPolarities+0x24>
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d10b      	bne.n	8003c8c <OV5640_SetPolarities+0x3c>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d105      	bne.n	8003c8c <OV5640_SetPolarities+0x3c>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d006      	beq.n	8003c94 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8003c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	e014      	b.n	8003cbe <OV5640_SetPolarities+0x6e>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	015b      	lsls	r3, r3, #5
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	4313      	orrs	r3, r2
 8003cae:	74fb      	strb	r3, [r7, #19]
    I2C2_WriteData(OV5640_ADDR, OV5640_POLARITY_CTRL, 2, tmp);
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f244 7140 	movw	r1, #18240	; 0x4740
 8003cb8:	2078      	movs	r0, #120	; 0x78
 8003cba:	f7fd ffb3 	bl	8001c24 <I2C2_WriteData>

  }

  return ret;
 8003cbe:	697b      	ldr	r3, [r7, #20]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint16_t reg;

  /* Initialize I2C */
  pObj->IO.Init();
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4798      	blx	r3

  /* Prepare the camera to be configured */
  I2C2_WriteData(OV5640_ADDR, OV5640_SYSTEM_CTROL0, 2,0x80);
 8003cd8:	2380      	movs	r3, #128	; 0x80
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f243 0108 	movw	r1, #12296	; 0x3008
 8003ce0:	2078      	movs	r0, #120	; 0x78
 8003ce2:	f7fd ff9f 	bl	8001c24 <I2C2_WriteData>
  HAL_Delay(500);
 8003ce6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003cea:	f000 ff47 	bl	8004b7c <HAL_Delay>

  reg = I2C2_ReadData(OV5640_ADDR, OV5640_CHIP_ID_HIGH_BYTE, 2);
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f243 010a 	movw	r1, #12298	; 0x300a
 8003cf4:	2078      	movs	r0, #120	; 0x78
 8003cf6:	f7fd ffc7 	bl	8001c88 <I2C2_ReadData>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	81fb      	strh	r3, [r7, #14]
  reg <<= 8;
 8003cfe:	89fb      	ldrh	r3, [r7, #14]
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	81fb      	strh	r3, [r7, #14]
  reg |= I2C2_ReadData(OV5640_ADDR, OV5640_CHIP_ID_LOW_BYTE, 2);
 8003d04:	2202      	movs	r2, #2
 8003d06:	f243 010b 	movw	r1, #12299	; 0x300b
 8003d0a:	2078      	movs	r0, #120	; 0x78
 8003d0c:	f7fd ffbc 	bl	8001c88 <I2C2_ReadData>
 8003d10:	4603      	mov	r3, r0
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	89fb      	ldrh	r3, [r7, #14]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	81fb      	strh	r3, [r7, #14]

 return reg;
 8003d1a:	89fb      	ldrh	r3, [r7, #14]

}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	73fb      	strb	r3, [r7, #15]
  I2C2_WriteData(OV5640_ADDR, OV5640_AWB_MANUAL_CONTROL, 2, tmp);
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	2202      	movs	r2, #2
 8003d36:	f243 4106 	movw	r1, #13318	; 0x3406
 8003d3a:	2078      	movs	r0, #120	; 0x78
 8003d3c:	f7fd ff72 	bl	8001c24 <I2C2_WriteData>
  tmp = 0x46;
 8003d40:	2346      	movs	r3, #70	; 0x46
 8003d42:	73fb      	strb	r3, [r7, #15]
  I2C2_WriteData(OV5640_ADDR, OV5640_AWB_CTRL16, 2, tmp);
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f245 1190 	movw	r1, #20880	; 0x5190
 8003d4c:	2078      	movs	r0, #120	; 0x78
 8003d4e:	f7fd ff69 	bl	8001c24 <I2C2_WriteData>
  tmp = 0xF8;
 8003d52:	23f8      	movs	r3, #248	; 0xf8
 8003d54:	73fb      	strb	r3, [r7, #15]
  I2C2_WriteData(OV5640_ADDR, OV5640_AWB_CTRL17, 2, tmp);
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	f245 1191 	movw	r1, #20881	; 0x5191
 8003d5e:	2078      	movs	r0, #120	; 0x78
 8003d60:	f7fd ff60 	bl	8001c24 <I2C2_WriteData>
  tmp = 0x04;
 8003d64:	2304      	movs	r3, #4
 8003d66:	73fb      	strb	r3, [r7, #15]
  I2C2_WriteData(OV5640_ADDR, OV5640_AWB_CTRL18, 2, tmp);
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f245 1192 	movw	r1, #20882	; 0x5192
 8003d70:	2078      	movs	r0, #120	; 0x78
 8003d72:	f7fd ff57 	bl	8001c24 <I2C2_WriteData>


    switch (LightMode)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	2b07      	cmp	r3, #7
 8003d7c:	f200 80b0 	bhi.w	8003ee0 <OV5640_SetLightMode+0x1bc>
 8003d80:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <OV5640_SetLightMode+0x64>)
 8003d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d86:	bf00      	nop
 8003d88:	08003da9 	.word	0x08003da9
 8003d8c:	08003df7 	.word	0x08003df7
 8003d90:	08003ee1 	.word	0x08003ee1
 8003d94:	08003e93 	.word	0x08003e93
 8003d98:	08003ee1 	.word	0x08003ee1
 8003d9c:	08003ee1 	.word	0x08003ee1
 8003da0:	08003ee1 	.word	0x08003ee1
 8003da4:	08003e45 	.word	0x08003e45
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8003da8:	2300      	movs	r3, #0
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	e01f      	b.n	8003dee <OV5640_SetLightMode+0xca>
        {
          if (ret != OV5640_ERROR)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d018      	beq.n	8003de8 <OV5640_SetLightMode+0xc4>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8003db6:	4a5a      	ldr	r2, [pc, #360]	; (8003f20 <OV5640_SetLightMode+0x1fc>)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	885b      	ldrh	r3, [r3, #2]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f103 0018 	add.w	r0, r3, #24
 8003dca:	4a55      	ldr	r2, [pc, #340]	; (8003f20 <OV5640_SetLightMode+0x1fc>)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003dd2:	f107 020f 	add.w	r2, r7, #15
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f000 f9a2 	bl	8004120 <ov5640_write_reg>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <OV5640_SetLightMode+0xc4>
            {
              ret = OV5640_ERROR;
 8003de2:	f04f 33ff 	mov.w	r3, #4294967295
 8003de6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	3301      	adds	r3, #1
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	2b06      	cmp	r3, #6
 8003df2:	d9dc      	bls.n	8003dae <OV5640_SetLightMode+0x8a>
            }
          }
        }
        break;
 8003df4:	e08e      	b.n	8003f14 <OV5640_SetLightMode+0x1f0>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	e01f      	b.n	8003e3c <OV5640_SetLightMode+0x118>
        {
          if (ret != OV5640_ERROR)
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e02:	d018      	beq.n	8003e36 <OV5640_SetLightMode+0x112>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8003e04:	4a47      	ldr	r2, [pc, #284]	; (8003f24 <OV5640_SetLightMode+0x200>)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	885b      	ldrh	r3, [r3, #2]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f103 0018 	add.w	r0, r3, #24
 8003e18:	4a42      	ldr	r2, [pc, #264]	; (8003f24 <OV5640_SetLightMode+0x200>)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003e20:	f107 020f 	add.w	r2, r7, #15
 8003e24:	2301      	movs	r3, #1
 8003e26:	f000 f97b 	bl	8004120 <ov5640_write_reg>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <OV5640_SetLightMode+0x112>
            {
              ret = OV5640_ERROR;
 8003e30:	f04f 33ff 	mov.w	r3, #4294967295
 8003e34:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2b06      	cmp	r3, #6
 8003e40:	d9dc      	bls.n	8003dfc <OV5640_SetLightMode+0xd8>
            }
          }
        }
        break;
 8003e42:	e067      	b.n	8003f14 <OV5640_SetLightMode+0x1f0>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8003e44:	2300      	movs	r3, #0
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	e01f      	b.n	8003e8a <OV5640_SetLightMode+0x166>
        {
          if (ret != OV5640_ERROR)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d018      	beq.n	8003e84 <OV5640_SetLightMode+0x160>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8003e52:	4a35      	ldr	r2, [pc, #212]	; (8003f28 <OV5640_SetLightMode+0x204>)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	885b      	ldrh	r3, [r3, #2]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f103 0018 	add.w	r0, r3, #24
 8003e66:	4a30      	ldr	r2, [pc, #192]	; (8003f28 <OV5640_SetLightMode+0x204>)
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003e6e:	f107 020f 	add.w	r2, r7, #15
 8003e72:	2301      	movs	r3, #1
 8003e74:	f000 f954 	bl	8004120 <ov5640_write_reg>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <OV5640_SetLightMode+0x160>
            {
              ret = OV5640_ERROR;
 8003e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e82:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	3301      	adds	r3, #1
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	2b06      	cmp	r3, #6
 8003e8e:	d9dc      	bls.n	8003e4a <OV5640_SetLightMode+0x126>
            }
          }
        }
        break;
 8003e90:	e040      	b.n	8003f14 <OV5640_SetLightMode+0x1f0>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8003e92:	2300      	movs	r3, #0
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	e01f      	b.n	8003ed8 <OV5640_SetLightMode+0x1b4>
        {
          if (ret != OV5640_ERROR)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9e:	d018      	beq.n	8003ed2 <OV5640_SetLightMode+0x1ae>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8003ea0:	4a22      	ldr	r2, [pc, #136]	; (8003f2c <OV5640_SetLightMode+0x208>)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	885b      	ldrh	r3, [r3, #2]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f103 0018 	add.w	r0, r3, #24
 8003eb4:	4a1d      	ldr	r2, [pc, #116]	; (8003f2c <OV5640_SetLightMode+0x208>)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003ebc:	f107 020f 	add.w	r2, r7, #15
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f000 f92d 	bl	8004120 <ov5640_write_reg>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <OV5640_SetLightMode+0x1ae>
            {
              ret = OV5640_ERROR;
 8003ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed0:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	2b06      	cmp	r3, #6
 8003edc:	d9dc      	bls.n	8003e98 <OV5640_SetLightMode+0x174>
            }
          }
        }
        break;
 8003ede:	e019      	b.n	8003f14 <OV5640_SetLightMode+0x1f0>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	613b      	str	r3, [r7, #16]
 8003ee4:	e012      	b.n	8003f0c <OV5640_SetLightMode+0x1e8>
        {

            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8003ee6:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <OV5640_SetLightMode+0x20c>)
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	885b      	ldrh	r3, [r3, #2]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	73fb      	strb	r3, [r7, #15]

            I2C2_WriteData(OV5640_ADDR, OV5640_LightModeAuto[index][0], 2, tmp);
 8003ef4:	4a0e      	ldr	r2, [pc, #56]	; (8003f30 <OV5640_SetLightMode+0x20c>)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	2202      	movs	r2, #2
 8003f00:	2078      	movs	r0, #120	; 0x78
 8003f02:	f7fd fe8f 	bl	8001c24 <I2C2_WriteData>
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b06      	cmp	r3, #6
 8003f10:	d9e9      	bls.n	8003ee6 <OV5640_SetLightMode+0x1c2>

        }
        break;
 8003f12:	bf00      	nop
    }

  return ret;
 8003f14:	697b      	ldr	r3, [r7, #20]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	08011ed4 	.word	0x08011ed4
 8003f24:	08011ef0 	.word	0x08011ef0
 8003f28:	08011f0c 	.word	0x08011f0c
 8003f2c:	08011f28 	.word	0x08011f28
 8003f30:	08011f44 	.word	0x08011f44

08003f34 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8003f3e:	4a20      	ldr	r2, [pc, #128]	; (8003fc0 <OV5640_SetBrightness+0x8c>)
 8003f40:	f107 030c 	add.w	r3, r7, #12
 8003f44:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f46:	c303      	stmia	r3!, {r0, r1}
 8003f48:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8003f4a:	23ff      	movs	r3, #255	; 0xff
 8003f4c:	75fb      	strb	r3, [r7, #23]
  I2C2_WriteData(OV5640_ADDR, OV5640_ISP_CONTROL01, 2, tmp);
 8003f4e:	7dfb      	ldrb	r3, [r7, #23]
 8003f50:	2202      	movs	r2, #2
 8003f52:	f245 0101 	movw	r1, #20481	; 0x5001
 8003f56:	2078      	movs	r0, #120	; 0x78
 8003f58:	f7fd fe64 	bl	8001c24 <I2C2_WriteData>


	tmp = brightness_level[Level + 4];
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	3318      	adds	r3, #24
 8003f62:	443b      	add	r3, r7
 8003f64:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003f68:	75fb      	strb	r3, [r7, #23]
	I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL7, 2, tmp);
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	f245 5187 	movw	r1, #21895	; 0x5587
 8003f72:	2078      	movs	r0, #120	; 0x78
 8003f74:	f7fd fe56 	bl	8001c24 <I2C2_WriteData>


    tmp = 0x04;
 8003f78:	2304      	movs	r3, #4
 8003f7a:	75fb      	strb	r3, [r7, #23]
    I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL0, 2, tmp);
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8003f84:	2078      	movs	r0, #120	; 0x78
 8003f86:	f7fd fe4d 	bl	8001c24 <I2C2_WriteData>


    if (Level < 0)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	da09      	bge.n	8003fa4 <OV5640_SetBrightness+0x70>
    {
      tmp = 0x01;
 8003f90:	2301      	movs	r3, #1
 8003f92:	75fb      	strb	r3, [r7, #23]
      I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL8, 2, tmp);
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f245 5188 	movw	r1, #21896	; 0x5588
 8003f9c:	2078      	movs	r0, #120	; 0x78
 8003f9e:	f7fd fe41 	bl	8001c24 <I2C2_WriteData>
 8003fa2:	e008      	b.n	8003fb6 <OV5640_SetBrightness+0x82>

    }
    else
    {
      tmp = 0x09;
 8003fa4:	2309      	movs	r3, #9
 8003fa6:	75fb      	strb	r3, [r7, #23]
      I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL8, 2, tmp);
 8003fa8:	7dfb      	ldrb	r3, [r7, #23]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f245 5188 	movw	r1, #21896	; 0x5588
 8003fb0:	2078      	movs	r0, #120	; 0x78
 8003fb2:	f7fd fe37 	bl	8001c24 <I2C2_WriteData>
    }


  return 1;
 8003fb6:	2301      	movs	r3, #1
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	08011948 	.word	0x08011948

08003fc4 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8003fce:	4a1f      	ldr	r2, [pc, #124]	; (800404c <OV5640_SetSaturation+0x88>)
 8003fd0:	f107 030c 	add.w	r3, r7, #12
 8003fd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003fd6:	c303      	stmia	r3!, {r0, r1}
 8003fd8:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8003fda:	23ff      	movs	r3, #255	; 0xff
 8003fdc:	77fb      	strb	r3, [r7, #31]


	I2C2_WriteData(OV5640_ADDR, OV5640_ISP_CONTROL01, 2, tmp);
 8003fde:	7ffb      	ldrb	r3, [r7, #31]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f245 0101 	movw	r1, #20481	; 0x5001
 8003fe6:	2078      	movs	r0, #120	; 0x78
 8003fe8:	f7fd fe1c 	bl	8001c24 <I2C2_WriteData>


	tmp = saturation_level[Level + 4];
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	3320      	adds	r3, #32
 8003ff2:	443b      	add	r3, r7
 8003ff4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8003ff8:	77fb      	strb	r3, [r7, #31]
	I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL3, 2, tmp);
 8003ffa:	7ffb      	ldrb	r3, [r7, #31]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	f245 5183 	movw	r1, #21891	; 0x5583
 8004002:	2078      	movs	r0, #120	; 0x78
 8004004:	f7fd fe0e 	bl	8001c24 <I2C2_WriteData>


	I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL4, 2, tmp);
 8004008:	7ffb      	ldrb	r3, [r7, #31]
 800400a:	2202      	movs	r2, #2
 800400c:	f245 5184 	movw	r1, #21892	; 0x5584
 8004010:	2078      	movs	r0, #120	; 0x78
 8004012:	f7fd fe07 	bl	8001c24 <I2C2_WriteData>


	tmp = 0x02;
 8004016:	2302      	movs	r3, #2
 8004018:	77fb      	strb	r3, [r7, #31]
	I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL0, 2, tmp);
 800401a:	7ffb      	ldrb	r3, [r7, #31]
 800401c:	2202      	movs	r2, #2
 800401e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8004022:	2078      	movs	r0, #120	; 0x78
 8004024:	f7fd fdfe 	bl	8001c24 <I2C2_WriteData>



	tmp = 0x41;
 8004028:	2341      	movs	r3, #65	; 0x41
 800402a:	77fb      	strb	r3, [r7, #31]
	I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL8, 2, tmp);
 800402c:	7ffb      	ldrb	r3, [r7, #31]
 800402e:	2202      	movs	r2, #2
 8004030:	f245 5188 	movw	r1, #21896	; 0x5588
 8004034:	2078      	movs	r0, #120	; 0x78
 8004036:	f7fd fdf5 	bl	8001c24 <I2C2_WriteData>




    ret = OV5640_ERROR;
 800403a:	f04f 33ff 	mov.w	r3, #4294967295
 800403e:	61bb      	str	r3, [r7, #24]


  return ret;
 8004040:	69bb      	ldr	r3, [r7, #24]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	08011954 	.word	0x08011954

08004050 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08c      	sub	sp, #48	; 0x30
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 800405a:	4a2e      	ldr	r2, [pc, #184]	; (8004114 <OV5640_SetHueDegree+0xc4>)
 800405c:	f107 0320 	add.w	r3, r7, #32
 8004060:	ca07      	ldmia	r2, {r0, r1, r2}
 8004062:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8004066:	4a2c      	ldr	r2, [pc, #176]	; (8004118 <OV5640_SetHueDegree+0xc8>)
 8004068:	f107 0314 	add.w	r3, r7, #20
 800406c:	ca07      	ldmia	r2, {r0, r1, r2}
 800406e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8004072:	4a2a      	ldr	r2, [pc, #168]	; (800411c <OV5640_SetHueDegree+0xcc>)
 8004074:	f107 0308 	add.w	r3, r7, #8
 8004078:	ca07      	ldmia	r2, {r0, r1, r2}
 800407a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 800407e:	23ff      	movs	r3, #255	; 0xff
 8004080:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  I2C2_WriteData(OV5640_ADDR, OV5640_ISP_CONTROL01, 2, tmp);
 8004084:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004088:	2202      	movs	r2, #2
 800408a:	f245 0101 	movw	r1, #20481	; 0x5001
 800408e:	2078      	movs	r0, #120	; 0x78
 8004090:	f7fd fdc8 	bl	8001c24 <I2C2_WriteData>


    tmp = 0x01;
 8004094:	2301      	movs	r3, #1
 8004096:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL0, 2, tmp);
 800409a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800409e:	2202      	movs	r2, #2
 80040a0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80040a4:	2078      	movs	r0, #120	; 0x78
 80040a6:	f7fd fdbd 	bl	8001c24 <I2C2_WriteData>


    tmp = hue_degree_ctrl1[Degree + 6];
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	3306      	adds	r3, #6
 80040ae:	3330      	adds	r3, #48	; 0x30
 80040b0:	443b      	add	r3, r7
 80040b2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80040b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL1, 2, tmp);
 80040ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80040be:	2202      	movs	r2, #2
 80040c0:	f245 5181 	movw	r1, #21889	; 0x5581
 80040c4:	2078      	movs	r0, #120	; 0x78
 80040c6:	f7fd fdad 	bl	8001c24 <I2C2_WriteData>


    tmp = hue_degree_ctrl2[Degree + 6];
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	3306      	adds	r3, #6
 80040ce:	3330      	adds	r3, #48	; 0x30
 80040d0:	443b      	add	r3, r7
 80040d2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80040d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL2, 2, tmp);
 80040da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80040de:	2202      	movs	r2, #2
 80040e0:	f245 5182 	movw	r1, #21890	; 0x5582
 80040e4:	2078      	movs	r0, #120	; 0x78
 80040e6:	f7fd fd9d 	bl	8001c24 <I2C2_WriteData>


    tmp = hue_degree_ctrl8[Degree + 6];
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	3306      	adds	r3, #6
 80040ee:	3330      	adds	r3, #48	; 0x30
 80040f0:	443b      	add	r3, r7
 80040f2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80040f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    I2C2_WriteData(OV5640_ADDR, OV5640_SDE_CTRL8, 2, tmp);
 80040fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80040fe:	2202      	movs	r2, #2
 8004100:	f245 5188 	movw	r1, #21896	; 0x5588
 8004104:	2078      	movs	r0, #120	; 0x78
 8004106:	f7fd fd8d 	bl	8001c24 <I2C2_WriteData>

  return 1;
 800410a:	2301      	movs	r3, #1
}
 800410c:	4618      	mov	r0, r3
 800410e:	3730      	adds	r7, #48	; 0x30
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	0801196c 	.word	0x0801196c
 8004118:	08011978 	.word	0x08011978
 800411c:	08011984 	.word	0x08011984

08004120 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8004120:	b590      	push	{r4, r7, lr}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	461a      	mov	r2, r3
 800412c:	460b      	mov	r3, r1
 800412e:	817b      	strh	r3, [r7, #10]
 8004130:	4613      	mov	r3, r2
 8004132:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681c      	ldr	r4, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6898      	ldr	r0, [r3, #8]
 800413c:	893b      	ldrh	r3, [r7, #8]
 800413e:	8979      	ldrh	r1, [r7, #10]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	47a0      	blx	r4
 8004144:	4603      	mov	r3, r0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	bd90      	pop	{r4, r7, pc}
	...

08004150 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800415a:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <SD_CheckStatus+0x38>)
 800415c:	2201      	movs	r2, #1
 800415e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004160:	f7fe fa42 	bl	80025e8 <BSP_SD_GetCardState>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d107      	bne.n	800417a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800416a:	4b07      	ldr	r3, [pc, #28]	; (8004188 <SD_CheckStatus+0x38>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	f023 0301 	bic.w	r3, r3, #1
 8004174:	b2da      	uxtb	r2, r3
 8004176:	4b04      	ldr	r3, [pc, #16]	; (8004188 <SD_CheckStatus+0x38>)
 8004178:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800417a:	4b03      	ldr	r3, [pc, #12]	; (8004188 <SD_CheckStatus+0x38>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	b2db      	uxtb	r3, r3
}
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	200000a0 	.word	0x200000a0

0800418c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff ffd9 	bl	8004150 <SD_CheckStatus>
 800419e:	4603      	mov	r3, r0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff ffcb 	bl	8004150 <SD_CheckStatus>
 80041ba:	4603      	mov	r3, r0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	4603      	mov	r3, r0
 80041d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80041d8:	f04f 33ff 	mov.w	r3, #4294967295
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	68b8      	ldr	r0, [r7, #8]
 80041e2:	f7fe f9c1 	bl	8002568 <BSP_SD_ReadBlocks>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d107      	bne.n	80041fc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SDMMC_DATATIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80041ec:	bf00      	nop
 80041ee:	f7fe f9fb 	bl	80025e8 <BSP_SD_GetCardState>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1fa      	bne.n	80041ee <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80041fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b086      	sub	sp, #24
 800420a:	af00      	add	r7, sp, #0
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	4603      	mov	r3, r0
 8004214:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800421a:	f04f 33ff 	mov.w	r3, #4294967295
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	68b8      	ldr	r0, [r7, #8]
 8004224:	f7fe f9c0 	bl	80025a8 <BSP_SD_WriteBlocks>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d107      	bne.n	800423e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SDMMC_DATATIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800422e:	bf00      	nop
 8004230:	f7fe f9da 	bl	80025e8 <BSP_SD_GetCardState>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1fa      	bne.n	8004230 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800423e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08c      	sub	sp, #48	; 0x30
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	603a      	str	r2, [r7, #0]
 8004252:	71fb      	strb	r3, [r7, #7]
 8004254:	460b      	mov	r3, r1
 8004256:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800425e:	4b24      	ldr	r3, [pc, #144]	; (80042f0 <SD_ioctl+0xa8>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <SD_ioctl+0x28>
 800426c:	2303      	movs	r3, #3
 800426e:	e03b      	b.n	80042e8 <SD_ioctl+0xa0>

  switch (cmd)
 8004270:	79bb      	ldrb	r3, [r7, #6]
 8004272:	2b03      	cmp	r3, #3
 8004274:	d833      	bhi.n	80042de <SD_ioctl+0x96>
 8004276:	a201      	add	r2, pc, #4	; (adr r2, 800427c <SD_ioctl+0x34>)
 8004278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427c:	0800428d 	.word	0x0800428d
 8004280:	08004295 	.word	0x08004295
 8004284:	080042ad 	.word	0x080042ad
 8004288:	080042c7 	.word	0x080042c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004292:	e027      	b.n	80042e4 <SD_ioctl+0x9c>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004294:	f107 030c 	add.w	r3, r7, #12
 8004298:	4618      	mov	r0, r3
 800429a:	f7fe f9c3 	bl	8002624 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800429e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80042aa:	e01b      	b.n	80042e4 <SD_ioctl+0x9c>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80042ac:	f107 030c 	add.w	r3, r7, #12
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fe f9b7 	bl	8002624 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80042c4:	e00e      	b.n	80042e4 <SD_ioctl+0x9c>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80042c6:	f107 030c 	add.w	r3, r7, #12
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fe f9aa 	bl	8002624 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 80042d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80042dc:	e002      	b.n	80042e4 <SD_ioctl+0x9c>

  default:
    res = RES_PARERR;
 80042de:	2304      	movs	r3, #4
 80042e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80042e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3730      	adds	r7, #48	; 0x30
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	200000a0 	.word	0x200000a0

080042f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042fa:	4b0f      	ldr	r3, [pc, #60]	; (8004338 <HAL_MspInit+0x44>)
 80042fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042fe:	4a0e      	ldr	r2, [pc, #56]	; (8004338 <HAL_MspInit+0x44>)
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	6613      	str	r3, [r2, #96]	; 0x60
 8004306:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <HAL_MspInit+0x44>)
 8004308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	607b      	str	r3, [r7, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004312:	4b09      	ldr	r3, [pc, #36]	; (8004338 <HAL_MspInit+0x44>)
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	4a08      	ldr	r2, [pc, #32]	; (8004338 <HAL_MspInit+0x44>)
 8004318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431c:	6593      	str	r3, [r2, #88]	; 0x58
 800431e:	4b06      	ldr	r3, [pc, #24]	; (8004338 <HAL_MspInit+0x44>)
 8004320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000

0800433c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08c      	sub	sp, #48	; 0x30
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004344:	f107 031c 	add.w	r3, r7, #28
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	605a      	str	r2, [r3, #4]
 800434e:	609a      	str	r2, [r3, #8]
 8004350:	60da      	str	r2, [r3, #12]
 8004352:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a4a      	ldr	r2, [pc, #296]	; (8004484 <HAL_DCMI_MspInit+0x148>)
 800435a:	4293      	cmp	r3, r2
 800435c:	f040 808d 	bne.w	800447a <HAL_DCMI_MspInit+0x13e>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8004360:	4b49      	ldr	r3, [pc, #292]	; (8004488 <HAL_DCMI_MspInit+0x14c>)
 8004362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004364:	4a48      	ldr	r2, [pc, #288]	; (8004488 <HAL_DCMI_MspInit+0x14c>)
 8004366:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800436a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800436c:	4b46      	ldr	r3, [pc, #280]	; (8004488 <HAL_DCMI_MspInit+0x14c>)
 800436e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004378:	4b43      	ldr	r3, [pc, #268]	; (8004488 <HAL_DCMI_MspInit+0x14c>)
 800437a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437c:	4a42      	ldr	r2, [pc, #264]	; (8004488 <HAL_DCMI_MspInit+0x14c>)
 800437e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004382:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004384:	4b40      	ldr	r3, [pc, #256]	; (8004488 <HAL_DCMI_MspInit+0x14c>)
 8004386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004390:	4b3d      	ldr	r3, [pc, #244]	; (8004488 <HAL_DCMI_MspInit+0x14c>)
 8004392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004394:	4a3c      	ldr	r2, [pc, #240]	; (8004488 <HAL_DCMI_MspInit+0x14c>)
 8004396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800439a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800439c:	4b3a      	ldr	r3, [pc, #232]	; (8004488 <HAL_DCMI_MspInit+0x14c>)
 800439e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80043a8:	4b37      	ldr	r3, [pc, #220]	; (8004488 <HAL_DCMI_MspInit+0x14c>)
 80043aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ac:	4a36      	ldr	r2, [pc, #216]	; (8004488 <HAL_DCMI_MspInit+0x14c>)
 80043ae:	f043 0310 	orr.w	r3, r3, #16
 80043b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043b4:	4b34      	ldr	r3, [pc, #208]	; (8004488 <HAL_DCMI_MspInit+0x14c>)
 80043b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 80043c0:	f645 7320 	movw	r3, #24352	; 0x5f20
 80043c4:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c6:	2302      	movs	r3, #2
 80043c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043ce:	2302      	movs	r3, #2
 80043d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80043d2:	230a      	movs	r3, #10
 80043d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80043d6:	f107 031c 	add.w	r3, r7, #28
 80043da:	4619      	mov	r1, r3
 80043dc:	482b      	ldr	r0, [pc, #172]	; (800448c <HAL_DCMI_MspInit+0x150>)
 80043de:	f001 fc97 	bl	8005d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 80043e2:	23b0      	movs	r3, #176	; 0xb0
 80043e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e6:	2302      	movs	r3, #2
 80043e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043ee:	2302      	movs	r3, #2
 80043f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80043f2:	230a      	movs	r3, #10
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80043f6:	f107 031c 	add.w	r3, r7, #28
 80043fa:	4619      	mov	r1, r3
 80043fc:	4824      	ldr	r0, [pc, #144]	; (8004490 <HAL_DCMI_MspInit+0x154>)
 80043fe:	f001 fc87 	bl	8005d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8004402:	2320      	movs	r3, #32
 8004404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004406:	2302      	movs	r3, #2
 8004408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440a:	2300      	movs	r3, #0
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800440e:	2302      	movs	r3, #2
 8004410:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8004412:	230a      	movs	r3, #10
 8004414:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8004416:	f107 031c 	add.w	r3, r7, #28
 800441a:	4619      	mov	r1, r3
 800441c:	481d      	ldr	r0, [pc, #116]	; (8004494 <HAL_DCMI_MspInit+0x158>)
 800441e:	f001 fc77 	bl	8005d10 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Channel6;
 8004422:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <HAL_DCMI_MspInit+0x15c>)
 8004424:	4a1d      	ldr	r2, [pc, #116]	; (800449c <HAL_DCMI_MspInit+0x160>)
 8004426:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_0;
 8004428:	4b1b      	ldr	r3, [pc, #108]	; (8004498 <HAL_DCMI_MspInit+0x15c>)
 800442a:	2200      	movs	r2, #0
 800442c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800442e:	4b1a      	ldr	r3, [pc, #104]	; (8004498 <HAL_DCMI_MspInit+0x15c>)
 8004430:	2200      	movs	r2, #0
 8004432:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8004434:	4b18      	ldr	r3, [pc, #96]	; (8004498 <HAL_DCMI_MspInit+0x15c>)
 8004436:	2200      	movs	r2, #0
 8004438:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800443a:	4b17      	ldr	r3, [pc, #92]	; (8004498 <HAL_DCMI_MspInit+0x15c>)
 800443c:	2280      	movs	r2, #128	; 0x80
 800443e:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004440:	4b15      	ldr	r3, [pc, #84]	; (8004498 <HAL_DCMI_MspInit+0x15c>)
 8004442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004446:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004448:	4b13      	ldr	r3, [pc, #76]	; (8004498 <HAL_DCMI_MspInit+0x15c>)
 800444a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800444e:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8004450:	4b11      	ldr	r3, [pc, #68]	; (8004498 <HAL_DCMI_MspInit+0x15c>)
 8004452:	2220      	movs	r2, #32
 8004454:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004456:	4b10      	ldr	r3, [pc, #64]	; (8004498 <HAL_DCMI_MspInit+0x15c>)
 8004458:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800445c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800445e:	480e      	ldr	r0, [pc, #56]	; (8004498 <HAL_DCMI_MspInit+0x15c>)
 8004460:	f001 f8d0 	bl	8005604 <HAL_DMA_Init>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_DCMI_MspInit+0x132>
    {
      Error_Handler();
 800446a:	f7ff f94f 	bl	800370c <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a09      	ldr	r2, [pc, #36]	; (8004498 <HAL_DCMI_MspInit+0x15c>)
 8004472:	651a      	str	r2, [r3, #80]	; 0x50
 8004474:	4a08      	ldr	r2, [pc, #32]	; (8004498 <HAL_DCMI_MspInit+0x15c>)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800447a:	bf00      	nop
 800447c:	3730      	adds	r7, #48	; 0x30
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	50050000 	.word	0x50050000
 8004488:	40021000 	.word	0x40021000
 800448c:	48001c00 	.word	0x48001c00
 8004490:	48002000 	.word	0x48002000
 8004494:	48001000 	.word	0x48001000
 8004498:	200002f0 	.word	0x200002f0
 800449c:	4002046c 	.word	0x4002046c

080044a0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b0ae      	sub	sp, #184	; 0xb8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	609a      	str	r2, [r3, #8]
 80044b4:	60da      	str	r2, [r3, #12]
 80044b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044b8:	f107 0318 	add.w	r3, r7, #24
 80044bc:	228c      	movs	r2, #140	; 0x8c
 80044be:	2100      	movs	r1, #0
 80044c0:	4618      	mov	r0, r3
 80044c2:	f00c f863 	bl	801058c <memset>
  if(hsd->Instance==SDMMC1)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a3f      	ldr	r2, [pc, #252]	; (80045c8 <HAL_SD_MspInit+0x128>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d176      	bne.n	80045be <HAL_SD_MspInit+0x11e>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80044d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80044d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80044d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80044da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80044de:	2302      	movs	r3, #2
 80044e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80044e2:	2301      	movs	r3, #1
 80044e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80044e6:	2308      	movs	r3, #8
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80044ea:	2302      	movs	r3, #2
 80044ec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80044ee:	2304      	movs	r3, #4
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80044f2:	2302      	movs	r3, #2
 80044f4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80044f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80044fa:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044fc:	f107 0318 	add.w	r3, r7, #24
 8004500:	4618      	mov	r0, r3
 8004502:	f003 fc5b 	bl	8007dbc <HAL_RCCEx_PeriphCLKConfig>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_SD_MspInit+0x70>
    {
      Error_Handler();
 800450c:	f7ff f8fe 	bl	800370c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004510:	4b2e      	ldr	r3, [pc, #184]	; (80045cc <HAL_SD_MspInit+0x12c>)
 8004512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004514:	4a2d      	ldr	r2, [pc, #180]	; (80045cc <HAL_SD_MspInit+0x12c>)
 8004516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800451a:	6613      	str	r3, [r2, #96]	; 0x60
 800451c:	4b2b      	ldr	r3, [pc, #172]	; (80045cc <HAL_SD_MspInit+0x12c>)
 800451e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004528:	4b28      	ldr	r3, [pc, #160]	; (80045cc <HAL_SD_MspInit+0x12c>)
 800452a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452c:	4a27      	ldr	r2, [pc, #156]	; (80045cc <HAL_SD_MspInit+0x12c>)
 800452e:	f043 0308 	orr.w	r3, r3, #8
 8004532:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004534:	4b25      	ldr	r3, [pc, #148]	; (80045cc <HAL_SD_MspInit+0x12c>)
 8004536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004540:	4b22      	ldr	r3, [pc, #136]	; (80045cc <HAL_SD_MspInit+0x12c>)
 8004542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004544:	4a21      	ldr	r2, [pc, #132]	; (80045cc <HAL_SD_MspInit+0x12c>)
 8004546:	f043 0304 	orr.w	r3, r3, #4
 800454a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800454c:	4b1f      	ldr	r3, [pc, #124]	; (80045cc <HAL_SD_MspInit+0x12c>)
 800454e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8004558:	2304      	movs	r3, #4
 800455a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455e:	2302      	movs	r3, #2
 8004560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004564:	2300      	movs	r3, #0
 8004566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800456a:	2303      	movs	r3, #3
 800456c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004570:	230c      	movs	r3, #12
 8004572:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8004576:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800457a:	4619      	mov	r1, r3
 800457c:	4814      	ldr	r0, [pc, #80]	; (80045d0 <HAL_SD_MspInit+0x130>)
 800457e:	f001 fbc7 	bl	8005d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 8004582:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004586:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800458a:	2302      	movs	r3, #2
 800458c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004590:	2300      	movs	r3, #0
 8004592:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004596:	2303      	movs	r3, #3
 8004598:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800459c:	230c      	movs	r3, #12
 800459e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80045a6:	4619      	mov	r1, r3
 80045a8:	480a      	ldr	r0, [pc, #40]	; (80045d4 <HAL_SD_MspInit+0x134>)
 80045aa:	f001 fbb1 	bl	8005d10 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80045ae:	2200      	movs	r2, #0
 80045b0:	2100      	movs	r1, #0
 80045b2:	2031      	movs	r0, #49	; 0x31
 80045b4:	f000 fc05 	bl	8004dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80045b8:	2031      	movs	r0, #49	; 0x31
 80045ba:	f000 fc1e 	bl	8004dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80045be:	bf00      	nop
 80045c0:	37b8      	adds	r7, #184	; 0xb8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40012800 	.word	0x40012800
 80045cc:	40021000 	.word	0x40021000
 80045d0:	48000c00 	.word	0x48000c00
 80045d4:	48000800 	.word	0x48000800

080045d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b0ae      	sub	sp, #184	; 0xb8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	605a      	str	r2, [r3, #4]
 80045ea:	609a      	str	r2, [r3, #8]
 80045ec:	60da      	str	r2, [r3, #12]
 80045ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045f0:	f107 0318 	add.w	r3, r7, #24
 80045f4:	228c      	movs	r2, #140	; 0x8c
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f00b ffc7 	bl	801058c <memset>
  if(huart->Instance==USART2)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a32      	ldr	r2, [pc, #200]	; (80046cc <HAL_UART_MspInit+0xf4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d15c      	bne.n	80046c2 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004608:	2302      	movs	r3, #2
 800460a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800460c:	2300      	movs	r3, #0
 800460e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004610:	f107 0318 	add.w	r3, r7, #24
 8004614:	4618      	mov	r0, r3
 8004616:	f003 fbd1 	bl	8007dbc <HAL_RCCEx_PeriphCLKConfig>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004620:	f7ff f874 	bl	800370c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004624:	4b2a      	ldr	r3, [pc, #168]	; (80046d0 <HAL_UART_MspInit+0xf8>)
 8004626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004628:	4a29      	ldr	r2, [pc, #164]	; (80046d0 <HAL_UART_MspInit+0xf8>)
 800462a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800462e:	6593      	str	r3, [r2, #88]	; 0x58
 8004630:	4b27      	ldr	r3, [pc, #156]	; (80046d0 <HAL_UART_MspInit+0xf8>)
 8004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800463c:	4b24      	ldr	r3, [pc, #144]	; (80046d0 <HAL_UART_MspInit+0xf8>)
 800463e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004640:	4a23      	ldr	r2, [pc, #140]	; (80046d0 <HAL_UART_MspInit+0xf8>)
 8004642:	f043 0308 	orr.w	r3, r3, #8
 8004646:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004648:	4b21      	ldr	r3, [pc, #132]	; (80046d0 <HAL_UART_MspInit+0xf8>)
 800464a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	613b      	str	r3, [r7, #16]
 8004652:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004654:	4b1e      	ldr	r3, [pc, #120]	; (80046d0 <HAL_UART_MspInit+0xf8>)
 8004656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004658:	4a1d      	ldr	r2, [pc, #116]	; (80046d0 <HAL_UART_MspInit+0xf8>)
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004660:	4b1b      	ldr	r3, [pc, #108]	; (80046d0 <HAL_UART_MspInit+0xf8>)
 8004662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 800466c:	2340      	movs	r3, #64	; 0x40
 800466e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004672:	2302      	movs	r3, #2
 8004674:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004678:	2300      	movs	r3, #0
 800467a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800467e:	2303      	movs	r3, #3
 8004680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004684:	2307      	movs	r3, #7
 8004686:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 800468a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800468e:	4619      	mov	r1, r3
 8004690:	4810      	ldr	r0, [pc, #64]	; (80046d4 <HAL_UART_MspInit+0xfc>)
 8004692:	f001 fb3d 	bl	8005d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8004696:	2304      	movs	r3, #4
 8004698:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469c:	2302      	movs	r3, #2
 800469e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046a8:	2303      	movs	r3, #3
 80046aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046ae:	2307      	movs	r3, #7
 80046b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80046b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80046b8:	4619      	mov	r1, r3
 80046ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046be:	f001 fb27 	bl	8005d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80046c2:	bf00      	nop
 80046c4:	37b8      	adds	r7, #184	; 0xb8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	40004400 	.word	0x40004400
 80046d0:	40021000 	.word	0x40021000
 80046d4:	48000c00 	.word	0x48000c00

080046d8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80046de:	1d3b      	adds	r3, r7, #4
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	60da      	str	r2, [r3, #12]
 80046ea:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80046ec:	4b2b      	ldr	r3, [pc, #172]	; (800479c <HAL_FMC_MspInit+0xc4>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d14f      	bne.n	8004794 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 80046f4:	4b29      	ldr	r3, [pc, #164]	; (800479c <HAL_FMC_MspInit+0xc4>)
 80046f6:	2201      	movs	r2, #1
 80046f8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80046fa:	4b29      	ldr	r3, [pc, #164]	; (80047a0 <HAL_FMC_MspInit+0xc8>)
 80046fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fe:	4a28      	ldr	r2, [pc, #160]	; (80047a0 <HAL_FMC_MspInit+0xc8>)
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	6513      	str	r3, [r2, #80]	; 0x50
 8004706:	4b26      	ldr	r3, [pc, #152]	; (80047a0 <HAL_FMC_MspInit+0xc8>)
 8004708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	603b      	str	r3, [r7, #0]
 8004710:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8004712:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004716:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004718:	2302      	movs	r3, #2
 800471a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471c:	2300      	movs	r3, #0
 800471e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004720:	2303      	movs	r3, #3
 8004722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004724:	230c      	movs	r3, #12
 8004726:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004728:	1d3b      	adds	r3, r7, #4
 800472a:	4619      	mov	r1, r3
 800472c:	481d      	ldr	r0, [pc, #116]	; (80047a4 <HAL_FMC_MspInit+0xcc>)
 800472e:	f001 faef 	bl	8005d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 8004732:	f240 233f 	movw	r3, #575	; 0x23f
 8004736:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004738:	2302      	movs	r3, #2
 800473a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004740:	2303      	movs	r3, #3
 8004742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004744:	230c      	movs	r3, #12
 8004746:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004748:	1d3b      	adds	r3, r7, #4
 800474a:	4619      	mov	r1, r3
 800474c:	4816      	ldr	r0, [pc, #88]	; (80047a8 <HAL_FMC_MspInit+0xd0>)
 800474e:	f001 fadf 	bl	8005d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8004752:	f64f 33b3 	movw	r3, #64435	; 0xfbb3
 8004756:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D0_Pin|PSRAM_A17_Pin
                          |PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004758:	2302      	movs	r3, #2
 800475a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004760:	2303      	movs	r3, #3
 8004762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004764:	230c      	movs	r3, #12
 8004766:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004768:	1d3b      	adds	r3, r7, #4
 800476a:	4619      	mov	r1, r3
 800476c:	480f      	ldr	r0, [pc, #60]	; (80047ac <HAL_FMC_MspInit+0xd4>)
 800476e:	f001 facf 	bl	8005d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8004772:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8004776:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004778:	2302      	movs	r3, #2
 800477a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004780:	2303      	movs	r3, #3
 8004782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004784:	230c      	movs	r3, #12
 8004786:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004788:	1d3b      	adds	r3, r7, #4
 800478a:	4619      	mov	r1, r3
 800478c:	4808      	ldr	r0, [pc, #32]	; (80047b0 <HAL_FMC_MspInit+0xd8>)
 800478e:	f001 fabf 	bl	8005d10 <HAL_GPIO_Init>
 8004792:	e000      	b.n	8004796 <HAL_FMC_MspInit+0xbe>
    return;
 8004794:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	2001fbdc 	.word	0x2001fbdc
 80047a0:	40021000 	.word	0x40021000
 80047a4:	48001000 	.word	0x48001000
 80047a8:	48001800 	.word	0x48001800
 80047ac:	48000c00 	.word	0x48000c00
 80047b0:	48001400 	.word	0x48001400

080047b4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80047bc:	f7ff ff8c 	bl	80046d8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80047c0:	bf00      	nop
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047cc:	e7fe      	b.n	80047cc <NMI_Handler+0x4>

080047ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047ce:	b480      	push	{r7}
 80047d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047d2:	e7fe      	b.n	80047d2 <HardFault_Handler+0x4>

080047d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047d8:	e7fe      	b.n	80047d8 <MemManage_Handler+0x4>

080047da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047da:	b480      	push	{r7}
 80047dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047de:	e7fe      	b.n	80047de <BusFault_Handler+0x4>

080047e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047e4:	e7fe      	b.n	80047e4 <UsageFault_Handler+0x4>

080047e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047e6:	b480      	push	{r7}
 80047e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047ea:	bf00      	nop
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047f8:	bf00      	nop
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004802:	b480      	push	{r7}
 8004804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004806:	bf00      	nop
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004814:	f000 f992 	bl	8004b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004818:	bf00      	nop
 800481a:	bd80      	pop	{r7, pc}

0800481c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MFX_IRQ_OUT_Pin);
 8004820:	2020      	movs	r0, #32
 8004822:	f001 fd11 	bl	8006248 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_UP_Pin);
 8004826:	f44f 7080 	mov.w	r0, #256	; 0x100
 800482a:	f001 fd0d 	bl	8006248 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_LEFT_Pin);
 800482e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004832:	f001 fd09 	bl	8006248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004836:	bf00      	nop
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004840:	4802      	ldr	r0, [pc, #8]	; (800484c <USART2_IRQHandler+0x10>)
 8004842:	f006 fcbf 	bl	800b1c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004846:	bf00      	nop
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	20000414 	.word	0x20000414

08004850 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_DOWN_Pin);
 8004854:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004858:	f001 fcf6 	bl	8006248 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_RIGHT_Pin);
 800485c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004860:	f001 fcf2 	bl	8006248 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_SEL_Pin);
 8004864:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004868:	f001 fcee 	bl	8006248 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 800486c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004870:	f001 fcea 	bl	8006248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004874:	bf00      	nop
 8004876:	bd80      	pop	{r7, pc}

08004878 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800487c:	4802      	ldr	r0, [pc, #8]	; (8004888 <SDMMC1_IRQHandler+0x10>)
 800487e:	f005 fb53 	bl	8009f28 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8004882:	bf00      	nop
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000390 	.word	0x20000390

0800488c <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8004890:	4802      	ldr	r0, [pc, #8]	; (800489c <DMA2_Channel6_IRQHandler+0x10>)
 8004892:	f001 f84e 	bl	8005932 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8004896:	bf00      	nop
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	200002f0 	.word	0x200002f0

080048a0 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80048a4:	4802      	ldr	r0, [pc, #8]	; (80048b0 <DCMI_IRQHandler+0x10>)
 80048a6:	f000 fc85 	bl	80051b4 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	2000028c 	.word	0x2000028c

080048b4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80048b8:	4802      	ldr	r0, [pc, #8]	; (80048c4 <DMA2D_IRQHandler+0x10>)
 80048ba:	f001 f919 	bl	8005af0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80048be:	bf00      	nop
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20000338 	.word	0x20000338

080048c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
	return 1;
 80048cc:	2301      	movs	r3, #1
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <_kill>:

int _kill(int pid, int sig)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80048e2:	f00b fe07 	bl	80104f4 <__errno>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2216      	movs	r2, #22
 80048ea:	601a      	str	r2, [r3, #0]
	return -1;
 80048ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <_exit>:

void _exit (int status)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004900:	f04f 31ff 	mov.w	r1, #4294967295
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff ffe7 	bl	80048d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800490a:	e7fe      	b.n	800490a <_exit+0x12>

0800490c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	e00a      	b.n	8004934 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800491e:	f3af 8000 	nop.w
 8004922:	4601      	mov	r1, r0
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	60ba      	str	r2, [r7, #8]
 800492a:	b2ca      	uxtb	r2, r1
 800492c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	3301      	adds	r3, #1
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	429a      	cmp	r2, r3
 800493a:	dbf0      	blt.n	800491e <_read+0x12>
	}

return len;
 800493c:	687b      	ldr	r3, [r7, #4]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
	return -1;
 800494e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004952:	4618      	mov	r0, r3
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800496e:	605a      	str	r2, [r3, #4]
	return 0;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <_isatty>:

int _isatty(int file)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
	return 1;
 8004986:	2301      	movs	r3, #1
}
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
	return 0;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
	...

080049b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049b8:	4a14      	ldr	r2, [pc, #80]	; (8004a0c <_sbrk+0x5c>)
 80049ba:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <_sbrk+0x60>)
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049c4:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <_sbrk+0x64>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d102      	bne.n	80049d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049cc:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <_sbrk+0x64>)
 80049ce:	4a12      	ldr	r2, [pc, #72]	; (8004a18 <_sbrk+0x68>)
 80049d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049d2:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <_sbrk+0x64>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4413      	add	r3, r2
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d207      	bcs.n	80049f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049e0:	f00b fd88 	bl	80104f4 <__errno>
 80049e4:	4603      	mov	r3, r0
 80049e6:	220c      	movs	r2, #12
 80049e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80049ea:	f04f 33ff 	mov.w	r3, #4294967295
 80049ee:	e009      	b.n	8004a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049f0:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <_sbrk+0x64>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80049f6:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <_sbrk+0x64>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4413      	add	r3, r2
 80049fe:	4a05      	ldr	r2, [pc, #20]	; (8004a14 <_sbrk+0x64>)
 8004a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a02:	68fb      	ldr	r3, [r7, #12]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20050000 	.word	0x20050000
 8004a10:	00000400 	.word	0x00000400
 8004a14:	2001fbe0 	.word	0x2001fbe0
 8004a18:	2001fc30 	.word	0x2001fc30

08004a1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004a20:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <SystemInit+0x20>)
 8004a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a26:	4a05      	ldr	r2, [pc, #20]	; (8004a3c <SystemInit+0x20>)
 8004a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004a30:	bf00      	nop
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	e000ed00 	.word	0xe000ed00

08004a40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004a44:	f7ff ffea 	bl	8004a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a48:	480c      	ldr	r0, [pc, #48]	; (8004a7c <LoopForever+0x6>)
  ldr r1, =_edata
 8004a4a:	490d      	ldr	r1, [pc, #52]	; (8004a80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004a4c:	4a0d      	ldr	r2, [pc, #52]	; (8004a84 <LoopForever+0xe>)
  movs r3, #0
 8004a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a50:	e002      	b.n	8004a58 <LoopCopyDataInit>

08004a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a56:	3304      	adds	r3, #4

08004a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a5c:	d3f9      	bcc.n	8004a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a5e:	4a0a      	ldr	r2, [pc, #40]	; (8004a88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004a60:	4c0a      	ldr	r4, [pc, #40]	; (8004a8c <LoopForever+0x16>)
  movs r3, #0
 8004a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a64:	e001      	b.n	8004a6a <LoopFillZerobss>

08004a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a68:	3204      	adds	r2, #4

08004a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a6c:	d3fb      	bcc.n	8004a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a6e:	f00b fd59 	bl	8010524 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004a72:	f7fe f875 	bl	8002b60 <main>

08004a76 <LoopForever>:

LoopForever:
    b LoopForever
 8004a76:	e7fe      	b.n	8004a76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004a78:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a80:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8004a84:	08012540 	.word	0x08012540
  ldr r2, =_sbss
 8004a88:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8004a8c:	2001fc30 	.word	0x2001fc30

08004a90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a90:	e7fe      	b.n	8004a90 <ADC1_2_IRQHandler>

08004a92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b082      	sub	sp, #8
 8004a96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a9c:	2003      	movs	r0, #3
 8004a9e:	f000 f985 	bl	8004dac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	f000 f80e 	bl	8004ac4 <HAL_InitTick>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	71fb      	strb	r3, [r7, #7]
 8004ab2:	e001      	b.n	8004ab8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004ab4:	f7ff fc1e 	bl	80042f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004ad0:	4b17      	ldr	r3, [pc, #92]	; (8004b30 <HAL_InitTick+0x6c>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d023      	beq.n	8004b20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004ad8:	4b16      	ldr	r3, [pc, #88]	; (8004b34 <HAL_InitTick+0x70>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	4b14      	ldr	r3, [pc, #80]	; (8004b30 <HAL_InitTick+0x6c>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f99f 	bl	8004e32 <HAL_SYSTICK_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10f      	bne.n	8004b1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b0f      	cmp	r3, #15
 8004afe:	d809      	bhi.n	8004b14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b00:	2200      	movs	r2, #0
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	f04f 30ff 	mov.w	r0, #4294967295
 8004b08:	f000 f95b 	bl	8004dc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b0c:	4a0a      	ldr	r2, [pc, #40]	; (8004b38 <HAL_InitTick+0x74>)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	e007      	b.n	8004b24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]
 8004b18:	e004      	b.n	8004b24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	73fb      	strb	r3, [r7, #15]
 8004b1e:	e001      	b.n	8004b24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	200000ac 	.word	0x200000ac
 8004b34:	200000a4 	.word	0x200000a4
 8004b38:	200000a8 	.word	0x200000a8

08004b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004b40:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <HAL_IncTick+0x20>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <HAL_IncTick+0x24>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	4a04      	ldr	r2, [pc, #16]	; (8004b60 <HAL_IncTick+0x24>)
 8004b4e:	6013      	str	r3, [r2, #0]
}
 8004b50:	bf00      	nop
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	200000ac 	.word	0x200000ac
 8004b60:	2001fbe4 	.word	0x2001fbe4

08004b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
  return uwTick;
 8004b68:	4b03      	ldr	r3, [pc, #12]	; (8004b78 <HAL_GetTick+0x14>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	2001fbe4 	.word	0x2001fbe4

08004b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b84:	f7ff ffee 	bl	8004b64 <HAL_GetTick>
 8004b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b94:	d005      	beq.n	8004ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004b96:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <HAL_Delay+0x44>)
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004ba2:	bf00      	nop
 8004ba4:	f7ff ffde 	bl	8004b64 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d8f7      	bhi.n	8004ba4 <HAL_Delay+0x28>
  {
  }
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	200000ac 	.word	0x200000ac

08004bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <__NVIC_SetPriorityGrouping+0x44>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004be0:	4013      	ands	r3, r2
 8004be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bf6:	4a04      	ldr	r2, [pc, #16]	; (8004c08 <__NVIC_SetPriorityGrouping+0x44>)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	60d3      	str	r3, [r2, #12]
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	e000ed00 	.word	0xe000ed00

08004c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c10:	4b04      	ldr	r3, [pc, #16]	; (8004c24 <__NVIC_GetPriorityGrouping+0x18>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	0a1b      	lsrs	r3, r3, #8
 8004c16:	f003 0307 	and.w	r3, r3, #7
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	e000ed00 	.word	0xe000ed00

08004c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	db0b      	blt.n	8004c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c3a:	79fb      	ldrb	r3, [r7, #7]
 8004c3c:	f003 021f 	and.w	r2, r3, #31
 8004c40:	4907      	ldr	r1, [pc, #28]	; (8004c60 <__NVIC_EnableIRQ+0x38>)
 8004c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c46:	095b      	lsrs	r3, r3, #5
 8004c48:	2001      	movs	r0, #1
 8004c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	e000e100 	.word	0xe000e100

08004c64 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	db12      	blt.n	8004c9c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c76:	79fb      	ldrb	r3, [r7, #7]
 8004c78:	f003 021f 	and.w	r2, r3, #31
 8004c7c:	490a      	ldr	r1, [pc, #40]	; (8004ca8 <__NVIC_DisableIRQ+0x44>)
 8004c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	2001      	movs	r0, #1
 8004c86:	fa00 f202 	lsl.w	r2, r0, r2
 8004c8a:	3320      	adds	r3, #32
 8004c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004c90:	f3bf 8f4f 	dsb	sy
}
 8004c94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004c96:	f3bf 8f6f 	isb	sy
}
 8004c9a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	e000e100 	.word	0xe000e100

08004cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	6039      	str	r1, [r7, #0]
 8004cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	db0a      	blt.n	8004cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	490c      	ldr	r1, [pc, #48]	; (8004cf8 <__NVIC_SetPriority+0x4c>)
 8004cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cca:	0112      	lsls	r2, r2, #4
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	440b      	add	r3, r1
 8004cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cd4:	e00a      	b.n	8004cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	4908      	ldr	r1, [pc, #32]	; (8004cfc <__NVIC_SetPriority+0x50>)
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	3b04      	subs	r3, #4
 8004ce4:	0112      	lsls	r2, r2, #4
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	440b      	add	r3, r1
 8004cea:	761a      	strb	r2, [r3, #24]
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	e000e100 	.word	0xe000e100
 8004cfc:	e000ed00 	.word	0xe000ed00

08004d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b089      	sub	sp, #36	; 0x24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f1c3 0307 	rsb	r3, r3, #7
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	bf28      	it	cs
 8004d1e:	2304      	movcs	r3, #4
 8004d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	3304      	adds	r3, #4
 8004d26:	2b06      	cmp	r3, #6
 8004d28:	d902      	bls.n	8004d30 <NVIC_EncodePriority+0x30>
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	3b03      	subs	r3, #3
 8004d2e:	e000      	b.n	8004d32 <NVIC_EncodePriority+0x32>
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d34:	f04f 32ff 	mov.w	r2, #4294967295
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43da      	mvns	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	401a      	ands	r2, r3
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d48:	f04f 31ff 	mov.w	r1, #4294967295
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d52:	43d9      	mvns	r1, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d58:	4313      	orrs	r3, r2
         );
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3724      	adds	r7, #36	; 0x24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d78:	d301      	bcc.n	8004d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e00f      	b.n	8004d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d7e:	4a0a      	ldr	r2, [pc, #40]	; (8004da8 <SysTick_Config+0x40>)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d86:	210f      	movs	r1, #15
 8004d88:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8c:	f7ff ff8e 	bl	8004cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d90:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <SysTick_Config+0x40>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d96:	4b04      	ldr	r3, [pc, #16]	; (8004da8 <SysTick_Config+0x40>)
 8004d98:	2207      	movs	r2, #7
 8004d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	e000e010 	.word	0xe000e010

08004dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff ff05 	bl	8004bc4 <__NVIC_SetPriorityGrouping>
}
 8004dba:	bf00      	nop
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b086      	sub	sp, #24
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	4603      	mov	r3, r0
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	607a      	str	r2, [r7, #4]
 8004dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004dd4:	f7ff ff1a 	bl	8004c0c <__NVIC_GetPriorityGrouping>
 8004dd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	6978      	ldr	r0, [r7, #20]
 8004de0:	f7ff ff8e 	bl	8004d00 <NVIC_EncodePriority>
 8004de4:	4602      	mov	r2, r0
 8004de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dea:	4611      	mov	r1, r2
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff ff5d 	bl	8004cac <__NVIC_SetPriority>
}
 8004df2:	bf00      	nop
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b082      	sub	sp, #8
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	4603      	mov	r3, r0
 8004e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff ff0d 	bl	8004c28 <__NVIC_EnableIRQ>
}
 8004e0e:	bf00      	nop
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b082      	sub	sp, #8
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff ff1d 	bl	8004c64 <__NVIC_DisableIRQ>
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b082      	sub	sp, #8
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff ff94 	bl	8004d68 <SysTick_Config>
 8004e40:	4603      	mov	r3, r0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e075      	b.n	8004f4a <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff fa62 	bl	800433c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e8e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6819      	ldr	r1, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	4b2a      	ldr	r3, [pc, #168]	; (8004f54 <HAL_DCMI_Init+0x108>)
 8004eaa:	400b      	ands	r3, r1
 8004eac:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6819      	ldr	r1, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004ec2:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004ece:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004eda:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004ee6:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004ef2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2b10      	cmp	r3, #16
 8004f02:	d112      	bne.n	8004f2a <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	7f1b      	ldrb	r3, [r3, #28]
 8004f08:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	7f5b      	ldrb	r3, [r3, #29]
 8004f0e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004f10:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	7f9b      	ldrb	r3, [r3, #30]
 8004f16:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8004f18:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	7fdb      	ldrb	r3, [r3, #31]
 8004f20:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8004f26:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004f28:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f042 021f 	orr.w	r2, r2, #31
 8004f38:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	ffe0f007 	.word	0xffe0f007

08004f58 <HAL_DCMI_Start_DMA>:
  *        in DCMI_DMAXferCplt callback at the end of the DMA transfer. If flag is set,
  *        HAL_DCMI_FrameEventCallback() API is called.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]

  /* Check capture parameter */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_DCMI_Start_DMA+0x1c>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e0b8      	b.n	80050e6 <HAL_DCMI_Start_DMA+0x18e>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Configure the DCMI Mode and enable the DCMI IP at the same time */
  MODIFY_REG(hdcmi->Instance->CR, (DCMI_CR_CM|DCMI_CR_ENABLE), (DCMI_Mode|DCMI_CR_ENABLE));
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f8e:	f023 0302 	bic.w	r3, r3, #2
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	431a      	orrs	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f9e:	601a      	str	r2, [r3, #0]

  /* Set the DMA conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa4:	4a52      	ldr	r2, [pc, #328]	; (80050f0 <HAL_DCMI_Start_DMA+0x198>)
 8004fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fac:	4a51      	ldr	r2, [pc, #324]	; (80050f4 <HAL_DCMI_Start_DMA+0x19c>)
 8004fae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	639a      	str	r2, [r3, #56]	; 0x38

  if(Length <= 0xFFFFU)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fbe:	d21f      	bcs.n	8005000 <HAL_DCMI_Start_DMA+0xa8>
  {
    hdcmi->XferCount = 0; /* Mark as direct transfer from DCMI_DR register to final destination buffer */
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3328      	adds	r3, #40	; 0x28
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	f000 fbcd 	bl	8005774 <HAL_DMA_Start_IT>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d075      	beq.n	80050cc <HAL_DCMI_Start_DMA+0x174>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e072      	b.n	80050e6 <HAL_DCMI_Start_DMA+0x18e>
    }
  }
  else /* Capture length is longer than DMA maximum transfer size */
  {
     /* Set DMA in circular mode */
    hdcmi->DMA_Handle->Init.Mode = DMA_CIRCULAR;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005004:	2220      	movs	r2, #32
 8005006:	61da      	str	r2, [r3, #28]

    /* Set the DMA half transfer complete callback */
    hdcmi->DMA_Handle->XferHalfCpltCallback = DCMI_DMAHalfXferCplt;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500c:	4a3a      	ldr	r2, [pc, #232]	; (80050f8 <HAL_DCMI_Start_DMA+0x1a0>)
 800500e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Initialize transfer parameters */
    hdcmi->XferSize = Length;  /* Store the complete transfer length in DCMI handle */
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;   /* Final destination buffer pointer */
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	641a      	str	r2, [r3, #64]	; 0x40

    circular_copy_length = DCMI_TransferSize(Length);
 800501c:	6838      	ldr	r0, [r7, #0]
 800501e:	f000 fa6b 	bl	80054f8 <DCMI_TransferSize>
 8005022:	6178      	str	r0, [r7, #20]

    /* Check if issue in intermediate length computation */
    if (circular_copy_length == 0U)
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <HAL_DCMI_Start_DMA+0xe6>
    {
      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e053      	b.n	80050e6 <HAL_DCMI_Start_DMA+0x18e>
    }

    /* Store the number of half - intermediate buffer copies needed */
    hdcmi->XferCount = 2U * ((Length / circular_copy_length) - 1U);
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	fbb2 f3f3 	udiv	r3, r2, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	005a      	lsls	r2, r3, #1
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Store the half-buffer copy length */
    hdcmi->HalfCopyLength = circular_copy_length / 2U;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	085a      	lsrs	r2, r3, #1
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	661a      	str	r2, [r3, #96]	; 0x60

    /* Save initial values for continuous mode case */
    hdcmi->XferCount_0 = hdcmi->XferCount;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	645a      	str	r2, [r3, #68]	; 0x44
    hdcmi->XferSize_0  = hdcmi->XferSize;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	649a      	str	r2, [r3, #72]	; 0x48
    hdcmi->pBuffPtr_0  = hdcmi->pBuffPtr;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* DCMI DR samples in circular mode will be copied
       at the end of the final buffer.
       Now compute the circular buffer start address. */
    /* Start by pointing at the final buffer */
    hdcmi->pCircularBuffer = pData;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Update pCircularBuffer in "moving" at the end of the final
       buffer, don't forger to convert in bytes to compute exact address */
    hdcmi->pCircularBuffer +=  4U * (((Length / circular_copy_length) - 1U) * circular_copy_length);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005078:	6839      	ldr	r1, [r7, #0]
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	6979      	ldr	r1, [r7, #20]
 8005084:	fb01 f303 	mul.w	r3, r1, r3
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	441a      	add	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initiate the circular DMA transfer from DCMI IP to final buffer end */
    if ( HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)hdcmi->pCircularBuffer, circular_copy_length) != HAL_OK)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3328      	adds	r3, #40	; 0x28
 800509a:	4619      	mov	r1, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f000 fb67 	bl	8005774 <HAL_DMA_Start_IT>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00f      	beq.n	80050cc <HAL_DCMI_Start_DMA+0x174>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e00c      	b.n	80050e6 <HAL_DCMI_Start_DMA+0x18e>
    }
  }

  /* Enable Capture */
  SET_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	08005301 	.word	0x08005301
 80050f4:	080054c9 	.word	0x080054c9
 80050f8:	08005431 	.word	0x08005431

080050fc <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_DCMI_Stop+0x1a>
 8005112:	2302      	movs	r3, #2
 8005114:	e049      	b.n	80051aa <HAL_DCMI_Stop+0xae>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2202      	movs	r2, #2
 8005122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  CLEAR_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0201 	bic.w	r2, r2, #1
 8005134:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005136:	f7ff fd15 	bl	8004b64 <HAL_GetTick>
 800513a:	60b8      	str	r0, [r7, #8]

  /* Check if the DCMI capture is effectively disabled */
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U)
 800513c:	e010      	b.n	8005160 <HAL_DCMI_Stop+0x64>
  {
    if((HAL_GetTick() - tickstart ) > DCMI_TIMEOUT_STOP)
 800513e:	f7ff fd11 	bl	8004b64 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800514c:	d908      	bls.n	8005160 <HAL_DCMI_Stop+0x64>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005152:	f043 0220 	orr.w	r2, r3, #32
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	659a      	str	r2, [r3, #88]	; 0x58

      status = HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	73fb      	strb	r3, [r7, #15]
      break;
 800515e:	e006      	b.n	800516e <HAL_DCMI_Stop+0x72>
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1e7      	bne.n	800513e <HAL_DCMI_Stop+0x42>
    }
  }

  /* Disable the DMA */
  if (HAL_DMA_Abort(hdcmi->DMA_Handle) != HAL_OK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fb5e 	bl	8005834 <HAL_DMA_Abort>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d004      	beq.n	8005188 <HAL_DCMI_Stop+0x8c>
  {
    DCMI_DMAError(hdcmi->DMA_Handle);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005182:	4618      	mov	r0, r3
 8005184:	f000 f9a0 	bl	80054c8 <DCMI_DMAError>
  }

  /* Disable DCMI IP */
  __HAL_DCMI_DISABLE(hdcmi);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005196:	601a      	str	r2, [r3, #0]

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t misflags = READ_REG(hdcmi->Instance->MISR);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((misflags & DCMI_MIS_ERR_MIS) != 0x0U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d009      	beq.n	80051e2 <HAL_DCMI_IRQHandler+0x2e>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2204      	movs	r2, #4
 80051d4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051da:	f043 0202 	orr.w	r2, r3, #2
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Overflow interrupt management ********************************************/
  if ((misflags & DCMI_MIS_OVR_MIS) != 0x0U)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d009      	beq.n	8005200 <HAL_DCMI_IRQHandler+0x4c>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2202      	movs	r2, #2
 80051f2:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f8:	f043 0201 	orr.w	r2, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  if (hdcmi->ErrorCode != HAL_DCMI_ERROR_NONE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005204:	2b00      	cmp	r3, #0
 8005206:	d014      	beq.n	8005232 <HAL_DCMI_IRQHandler+0x7e>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005214:	4a24      	ldr	r2, [pc, #144]	; (80052a8 <HAL_DCMI_IRQHandler+0xf4>)
 8005216:	639a      	str	r2, [r3, #56]	; 0x38

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fb47 	bl	80058b0 <HAL_DMA_Abort_IT>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d004      	beq.n	8005232 <HAL_DCMI_IRQHandler+0x7e>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522c:	4618      	mov	r0, r3
 800522e:	f000 f94b 	bl	80054c8 <DCMI_DMAError>
    }
  }

  /* Line Interrupt management ************************************************/
  if ((misflags & DCMI_MIS_LINE_MIS) != 0x0U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b00      	cmp	r3, #0
 800523a:	d006      	beq.n	800524a <HAL_DCMI_IRQHandler+0x96>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2210      	movs	r2, #16
 8005242:	615a      	str	r2, [r3, #20]
    /* Line interrupt Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7fd f847 	bl	80022d8 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* VSYNC interrupt management ***********************************************/
  if ((misflags & DCMI_MIS_VSYNC_MIS) != 0x0U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	2b00      	cmp	r3, #0
 8005252:	d006      	beq.n	8005262 <HAL_DCMI_IRQHandler+0xae>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2208      	movs	r2, #8
 800525a:	615a      	str	r2, [r3, #20]
    /* VSYNC Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7fd f84c 	bl	80022fa <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }

  /* End of Frame interrupt management ****************************************/
  if ((misflags & DCMI_MIS_FRAME_MIS) != 0x0U)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d019      	beq.n	80052a0 <HAL_DCMI_IRQHandler+0xec>
  {
    /* Disable the Line interrupt when using snapshot mode */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b02      	cmp	r3, #2
 8005278:	d10b      	bne.n	8005292 <HAL_DCMI_IRQHandler+0xde>
    {
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE|DCMI_IT_VSYNC|DCMI_IT_ERR|DCMI_IT_OVR);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 021e 	bic.w	r2, r2, #30
 8005288:	60da      	str	r2, [r3, #12]
      /* Change the DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2201      	movs	r2, #1
 8005298:	615a      	str	r2, [r3, #20]
    /* Frame Event Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7fd fc2a 	bl	8002af4 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80052a0:	bf00      	nop
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	080054c9 	.word	0x080054c9

080052ac <HAL_DCMI_DisableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_DisableCrop(DCMI_HandleTypeDef *hdcmi)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d101      	bne.n	80052c2 <HAL_DCMI_DisableCrop+0x16>
 80052be:	2302      	movs	r3, #2
 80052c0:	e018      	b.n	80052f4 <HAL_DCMI_DisableCrop+0x48>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2202      	movs	r2, #2
 80052ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI Crop feature */
  CLEAR_BIT(hdcmi->Instance->CR, DCMI_CR_CROP);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0204 	bic.w	r2, r2, #4
 80052e0:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <DCMI_DMAXferCplt>:
  *       another DMA transfer to copy the second half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;
  uint32_t temp;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530c:	61fb      	str	r3, [r7, #28]


  if(hdcmi->XferCount != 0U)
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005312:	2b00      	cmp	r3, #0
 8005314:	d05c      	beq.n	80053d0 <DCMI_DMAXferCplt+0xd0>
  {
    if (hdcmi->XferCount == 0xBEBE)
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531a:	f64b 62be 	movw	r2, #48830	; 0xbebe
 800531e:	4293      	cmp	r3, r2
 8005320:	d10c      	bne.n	800533c <DCMI_DMAXferCplt+0x3c>
    {
      hdcmi->XferCount = hdcmi->XferCount_0;
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	639a      	str	r2, [r3, #56]	; 0x38
      hdcmi->XferSize  = hdcmi->XferSize_0;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->pBuffPtr  = hdcmi->pBuffPtr_0;
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	641a      	str	r2, [r3, #64]	; 0x40
        HAL_DCMI_FrameEventCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 800533a:	e075      	b.n	8005428 <DCMI_DMAXferCplt+0x128>
      hdcmi->XferCount--;
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	1e5a      	subs	r2, r3, #1
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	639a      	str	r2, [r3, #56]	; 0x38
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	61bb      	str	r3, [r7, #24]
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005350:	617b      	str	r3, [r7, #20]
      temp = (uint32_t) (tmpBuffer_Orig);
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	613b      	str	r3, [r7, #16]
        temp += hdcmi->HalfCopyLength * 4U;
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4413      	add	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
      tmpBuffer_Orig = (uint32_t *) temp;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	617b      	str	r3, [r7, #20]
      loop_length = hdcmi->HalfCopyLength;
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800536a:	60fb      	str	r3, [r7, #12]
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	441a      	add	r2, r3
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005382:	1ad2      	subs	r2, r2, r3
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	63da      	str	r2, [r3, #60]	; 0x3c
        if (hdcmi->XferCount == 0)
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	2b00      	cmp	r3, #0
 800538e:	d103      	bne.n	8005398 <DCMI_DMAXferCplt+0x98>
          hdcmi->XferCount = 0xBEBE;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8005396:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800539c:	6979      	ldr	r1, [r7, #20]
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f000 f9e7 	bl	8005774 <HAL_DMA_Start_IT>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d03d      	beq.n	8005428 <DCMI_DMAXferCplt+0x128>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	659a      	str	r2, [r3, #88]	; 0x58
        hdcmi->State = HAL_DCMI_STATE_READY;
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        __HAL_UNLOCK(hdcmi);
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_ErrorCallback(hdcmi);
 80053c8:	69f8      	ldr	r0, [r7, #28]
 80053ca:	f7fc ffa7 	bl	800231c <HAL_DCMI_ErrorCallback>
}
 80053ce:	e02b      	b.n	8005428 <DCMI_DMAXferCplt+0x128>
    if((hdcmi->Instance->IER & DCMI_IT_FRAME) == 0x0U)
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d124      	bne.n	8005428 <DCMI_DMAXferCplt+0x128>
      if(__HAL_DCMI_GET_FLAG(hdcmi, (uint32_t)DCMI_FLAG_FRAMERI) != 0x0UL)
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d01d      	beq.n	8005428 <DCMI_DMAXferCplt+0x128>
        __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2201      	movs	r2, #1
 80053f2:	615a      	str	r2, [r3, #20]
        if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d10f      	bne.n	8005422 <DCMI_DMAXferCplt+0x122>
          __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 021e 	bic.w	r2, r2, #30
 8005410:	60da      	str	r2, [r3, #12]
          hdcmi->State = HAL_DCMI_STATE_READY;
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          __HAL_UNLOCK(hdcmi);
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_FrameEventCallback(hdcmi);
 8005422:	69f8      	ldr	r0, [r7, #28]
 8005424:	f7fd fb66 	bl	8002af4 <HAL_DCMI_FrameEventCallback>
}
 8005428:	bf00      	nop
 800542a:	3720      	adds	r7, #32
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <DCMI_DMAHalfXferCplt>:
  *       another DMA transfer to copy the first half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAHalfXferCplt(DMA_HandleTypeDef *hdma)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543c:	617b      	str	r3, [r7, #20]

  if(hdcmi->XferCount != 0U)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	2b00      	cmp	r3, #0
 8005444:	d03c      	beq.n	80054c0 <DCMI_DMAHalfXferCplt+0x90>
  {
    if (hdcmi->XferCount != 0xBEBE)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	f64b 62be 	movw	r2, #48830	; 0xbebe
 800544e:	4293      	cmp	r3, r2
 8005450:	d036      	beq.n	80054c0 <DCMI_DMAHalfXferCplt+0x90>
    {
      /* Manage first half buffer copy in case of big transfer */

      /* Decrement half-copies counter */
      hdcmi->XferCount--;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005456:	1e5a      	subs	r2, r3, #1
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Point at DCMI final destination */
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	613b      	str	r3, [r7, #16]

      /* Point at DCMI circular buffer start */
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005466:	60fb      	str	r3, [r7, #12]

      /* copy half the buffer size */
      loop_length = hdcmi->HalfCopyLength;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800546c:	60bb      	str	r3, [r7, #8]

      /* Save next entry to write at next DMA transfer interruption */
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	441a      	add	r2, r3
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005484:	1ad2      	subs	r2, r2, r3
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Data copy from work buffer to final destination buffer */
      /* Enable the DMA Channel */
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800548e:	68f9      	ldr	r1, [r7, #12]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f000 f96e 	bl	8005774 <HAL_DMA_Start_IT>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d010      	beq.n	80054c0 <DCMI_DMAHalfXferCplt+0x90>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdcmi);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
        /*Call registered DCMI error callback*/
        hdcmi->ErrorCallback(hdcmi);
#else
        HAL_DCMI_ErrorCallback(hdcmi);
 80054ba:	6978      	ldr	r0, [r7, #20]
 80054bc:	f7fc ff2e 	bl	800231c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 80054c0:	bf00      	nop
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f7fc ff16 	bl	800231c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80054f0:	bf00      	nop
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <DCMI_TransferSize>:
  * @note InputSize MUST be even.
  * @param  InputSize full buffer size (in 32-bit words)
  * @retval Transfer size (in 32-bit words)
  */
static uint32_t DCMI_TransferSize(uint32_t InputSize)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b096      	sub	sp, #88	; 0x58
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t j = 1;
 8005500:	2301      	movs	r3, #1
 8005502:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t temp = InputSize;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t aPrime[NPRIME] = {0};
 8005508:	f107 030c 	add.w	r3, r7, #12
 800550c:	2240      	movs	r2, #64	; 0x40
 800550e:	2100      	movs	r1, #0
 8005510:	4618      	mov	r0, r3
 8005512:	f00b f83b 	bl	801058c <memset>
  uint32_t output = 2; /* Want a result which is an even number */
 8005516:	2302      	movs	r3, #2
 8005518:	64fb      	str	r3, [r7, #76]	; 0x4c
                               37UL, 41UL, 43UL, 47UL};


  /* Develop InputSize in product of prime numbers */

  while (j < NPRIME)
 800551a:	e02b      	b.n	8005574 <DCMI_TransferSize+0x7c>
  {
    if (temp < PrimeArray[j])
 800551c:	4a38      	ldr	r2, [pc, #224]	; (8005600 <DCMI_TransferSize+0x108>)
 800551e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005524:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005526:	429a      	cmp	r2, r3
 8005528:	d328      	bcc.n	800557c <DCMI_TransferSize+0x84>
    {
      break;
    }
    while ((temp % PrimeArray[j]) == 0U)
 800552a:	e014      	b.n	8005556 <DCMI_TransferSize+0x5e>
    {
      aPrime[j]++;
 800552c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	3358      	adds	r3, #88	; 0x58
 8005532:	443b      	add	r3, r7
 8005534:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	3358      	adds	r3, #88	; 0x58
 8005540:	443b      	add	r3, r7
 8005542:	f843 2c4c 	str.w	r2, [r3, #-76]
      temp /= PrimeArray[j];
 8005546:	4a2e      	ldr	r2, [pc, #184]	; (8005600 <DCMI_TransferSize+0x108>)
 8005548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800554a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800554e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005550:	fbb2 f3f3 	udiv	r3, r2, r3
 8005554:	653b      	str	r3, [r7, #80]	; 0x50
    while ((temp % PrimeArray[j]) == 0U)
 8005556:	4a2a      	ldr	r2, [pc, #168]	; (8005600 <DCMI_TransferSize+0x108>)
 8005558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800555a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800555e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005560:	fbb3 f1f2 	udiv	r1, r3, r2
 8005564:	fb01 f202 	mul.w	r2, r1, r2
 8005568:	1a9b      	subs	r3, r3, r2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0de      	beq.n	800552c <DCMI_TransferSize+0x34>
    }
    j++;
 800556e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005570:	3301      	adds	r3, #1
 8005572:	657b      	str	r3, [r7, #84]	; 0x54
  while (j < NPRIME)
 8005574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005576:	2b0f      	cmp	r3, #15
 8005578:	d9d0      	bls.n	800551c <DCMI_TransferSize+0x24>
 800557a:	e000      	b.n	800557e <DCMI_TransferSize+0x86>
      break;
 800557c:	bf00      	nop
  }

  /*  Search for the biggest even divisor less or equal to 0xFFFE = 65534 */
  aPrime[1] -= 1U; /* output is initialized to 2, so don't count divider 2 twice */
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	3b01      	subs	r3, #1
 8005582:	613b      	str	r3, [r7, #16]

   /*  The algorithm below yields a sub-optimal solution
       but in an acceptable time.  */
    j =  NPRIME-1U;
 8005584:	230f      	movs	r3, #15
 8005586:	657b      	str	r3, [r7, #84]	; 0x54
  while ((j > 0U) &&  (output <= 0xFFFEU))
 8005588:	e02c      	b.n	80055e4 <DCMI_TransferSize+0xec>
  {
    while (aPrime[j] > 0U)
    {
      if ((output * PrimeArray[j]) > 0xFFFEU)
 800558a:	4a1d      	ldr	r2, [pc, #116]	; (8005600 <DCMI_TransferSize+0x108>)
 800558c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800558e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005592:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005594:	fb02 f303 	mul.w	r3, r2, r3
 8005598:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800559c:	4293      	cmp	r3, r2
 800559e:	d81d      	bhi.n	80055dc <DCMI_TransferSize+0xe4>
      {
        break;
      }
      else
      {
        output *= PrimeArray[j];
 80055a0:	4a17      	ldr	r2, [pc, #92]	; (8005600 <DCMI_TransferSize+0x108>)
 80055a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80055a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055aa:	fb02 f303 	mul.w	r3, r2, r3
 80055ae:	64fb      	str	r3, [r7, #76]	; 0x4c
        aPrime[j]--;
 80055b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	3358      	adds	r3, #88	; 0x58
 80055b6:	443b      	add	r3, r7
 80055b8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80055bc:	1e5a      	subs	r2, r3, #1
 80055be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	3358      	adds	r3, #88	; 0x58
 80055c4:	443b      	add	r3, r7
 80055c6:	f843 2c4c 	str.w	r2, [r3, #-76]
    while (aPrime[j] > 0U)
 80055ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	3358      	adds	r3, #88	; 0x58
 80055d0:	443b      	add	r3, r7
 80055d2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1d7      	bne.n	800558a <DCMI_TransferSize+0x92>
 80055da:	e000      	b.n	80055de <DCMI_TransferSize+0xe6>
        break;
 80055dc:	bf00      	nop
      }
    }
    j--;
 80055de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055e0:	3b01      	subs	r3, #1
 80055e2:	657b      	str	r3, [r7, #84]	; 0x54
  while ((j > 0U) &&  (output <= 0xFFFEU))
 80055e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d004      	beq.n	80055f4 <DCMI_TransferSize+0xfc>
 80055ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d9ea      	bls.n	80055ca <DCMI_TransferSize+0xd2>
  }



  return output;
 80055f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3758      	adds	r7, #88	; 0x58
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	08011fbc 	.word	0x08011fbc

08005604 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e098      	b.n	8005748 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	4b4d      	ldr	r3, [pc, #308]	; (8005754 <HAL_DMA_Init+0x150>)
 800561e:	429a      	cmp	r2, r3
 8005620:	d80f      	bhi.n	8005642 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	4b4b      	ldr	r3, [pc, #300]	; (8005758 <HAL_DMA_Init+0x154>)
 800562a:	4413      	add	r3, r2
 800562c:	4a4b      	ldr	r2, [pc, #300]	; (800575c <HAL_DMA_Init+0x158>)
 800562e:	fba2 2303 	umull	r2, r3, r2, r3
 8005632:	091b      	lsrs	r3, r3, #4
 8005634:	009a      	lsls	r2, r3, #2
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a48      	ldr	r2, [pc, #288]	; (8005760 <HAL_DMA_Init+0x15c>)
 800563e:	641a      	str	r2, [r3, #64]	; 0x40
 8005640:	e00e      	b.n	8005660 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	4b46      	ldr	r3, [pc, #280]	; (8005764 <HAL_DMA_Init+0x160>)
 800564a:	4413      	add	r3, r2
 800564c:	4a43      	ldr	r2, [pc, #268]	; (800575c <HAL_DMA_Init+0x158>)
 800564e:	fba2 2303 	umull	r2, r3, r2, r3
 8005652:	091b      	lsrs	r3, r3, #4
 8005654:	009a      	lsls	r2, r3, #2
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a42      	ldr	r2, [pc, #264]	; (8005768 <HAL_DMA_Init+0x164>)
 800565e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005684:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005690:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800569c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056ba:	d039      	beq.n	8005730 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c0:	4a27      	ldr	r2, [pc, #156]	; (8005760 <HAL_DMA_Init+0x15c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d11a      	bne.n	80056fc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80056c6:	4b29      	ldr	r3, [pc, #164]	; (800576c <HAL_DMA_Init+0x168>)
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ce:	f003 031c 	and.w	r3, r3, #28
 80056d2:	210f      	movs	r1, #15
 80056d4:	fa01 f303 	lsl.w	r3, r1, r3
 80056d8:	43db      	mvns	r3, r3
 80056da:	4924      	ldr	r1, [pc, #144]	; (800576c <HAL_DMA_Init+0x168>)
 80056dc:	4013      	ands	r3, r2
 80056de:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80056e0:	4b22      	ldr	r3, [pc, #136]	; (800576c <HAL_DMA_Init+0x168>)
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6859      	ldr	r1, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ec:	f003 031c 	and.w	r3, r3, #28
 80056f0:	fa01 f303 	lsl.w	r3, r1, r3
 80056f4:	491d      	ldr	r1, [pc, #116]	; (800576c <HAL_DMA_Init+0x168>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	600b      	str	r3, [r1, #0]
 80056fa:	e019      	b.n	8005730 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80056fc:	4b1c      	ldr	r3, [pc, #112]	; (8005770 <HAL_DMA_Init+0x16c>)
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005704:	f003 031c 	and.w	r3, r3, #28
 8005708:	210f      	movs	r1, #15
 800570a:	fa01 f303 	lsl.w	r3, r1, r3
 800570e:	43db      	mvns	r3, r3
 8005710:	4917      	ldr	r1, [pc, #92]	; (8005770 <HAL_DMA_Init+0x16c>)
 8005712:	4013      	ands	r3, r2
 8005714:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005716:	4b16      	ldr	r3, [pc, #88]	; (8005770 <HAL_DMA_Init+0x16c>)
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6859      	ldr	r1, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005722:	f003 031c 	and.w	r3, r3, #28
 8005726:	fa01 f303 	lsl.w	r3, r1, r3
 800572a:	4911      	ldr	r1, [pc, #68]	; (8005770 <HAL_DMA_Init+0x16c>)
 800572c:	4313      	orrs	r3, r2
 800572e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	40020407 	.word	0x40020407
 8005758:	bffdfff8 	.word	0xbffdfff8
 800575c:	cccccccd 	.word	0xcccccccd
 8005760:	40020000 	.word	0x40020000
 8005764:	bffdfbf8 	.word	0xbffdfbf8
 8005768:	40020400 	.word	0x40020400
 800576c:	400200a8 	.word	0x400200a8
 8005770:	400204a8 	.word	0x400204a8

08005774 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800578c:	2b01      	cmp	r3, #1
 800578e:	d101      	bne.n	8005794 <HAL_DMA_Start_IT+0x20>
 8005790:	2302      	movs	r3, #2
 8005792:	e04b      	b.n	800582c <HAL_DMA_Start_IT+0xb8>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d13a      	bne.n	800581e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0201 	bic.w	r2, r2, #1
 80057c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 f95f 	bl	8005a90 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d008      	beq.n	80057ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f042 020e 	orr.w	r2, r2, #14
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e00f      	b.n	800580c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0204 	bic.w	r2, r2, #4
 80057fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 020a 	orr.w	r2, r2, #10
 800580a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0201 	orr.w	r2, r2, #1
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	e005      	b.n	800582a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005826:	2302      	movs	r3, #2
 8005828:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800582a:	7dfb      	ldrb	r3, [r7, #23]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d008      	beq.n	800585e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2204      	movs	r2, #4
 8005850:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e022      	b.n	80058a4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 020e 	bic.w	r2, r2, #14
 800586c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0201 	bic.w	r2, r2, #1
 800587c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005882:	f003 021c 	and.w	r2, r3, #28
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	2101      	movs	r1, #1
 800588c:	fa01 f202 	lsl.w	r2, r1, r2
 8005890:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d005      	beq.n	80058d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2204      	movs	r2, #4
 80058cc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	73fb      	strb	r3, [r7, #15]
 80058d2:	e029      	b.n	8005928 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 020e 	bic.w	r2, r2, #14
 80058e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0201 	bic.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f8:	f003 021c 	and.w	r2, r3, #28
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005900:	2101      	movs	r1, #1
 8005902:	fa01 f202 	lsl.w	r2, r1, r2
 8005906:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	4798      	blx	r3
    }
  }
  return status;
 8005928:	7bfb      	ldrb	r3, [r7, #15]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b084      	sub	sp, #16
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594e:	f003 031c 	and.w	r3, r3, #28
 8005952:	2204      	movs	r2, #4
 8005954:	409a      	lsls	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	4013      	ands	r3, r2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d026      	beq.n	80059ac <HAL_DMA_IRQHandler+0x7a>
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d021      	beq.n	80059ac <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d107      	bne.n	8005986 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0204 	bic.w	r2, r2, #4
 8005984:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598a:	f003 021c 	and.w	r2, r3, #28
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	2104      	movs	r1, #4
 8005994:	fa01 f202 	lsl.w	r2, r1, r2
 8005998:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d071      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80059aa:	e06c      	b.n	8005a86 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b0:	f003 031c 	and.w	r3, r3, #28
 80059b4:	2202      	movs	r2, #2
 80059b6:	409a      	lsls	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4013      	ands	r3, r2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d02e      	beq.n	8005a1e <HAL_DMA_IRQHandler+0xec>
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d029      	beq.n	8005a1e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0320 	and.w	r3, r3, #32
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10b      	bne.n	80059f0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 020a 	bic.w	r2, r2, #10
 80059e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f4:	f003 021c 	and.w	r2, r3, #28
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	2102      	movs	r1, #2
 80059fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005a02:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d038      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005a1c:	e033      	b.n	8005a86 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a22:	f003 031c 	and.w	r3, r3, #28
 8005a26:	2208      	movs	r2, #8
 8005a28:	409a      	lsls	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d02a      	beq.n	8005a88 <HAL_DMA_IRQHandler+0x156>
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d025      	beq.n	8005a88 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 020e 	bic.w	r2, r2, #14
 8005a4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a50:	f003 021c 	and.w	r2, r3, #28
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a58:	2101      	movs	r1, #1
 8005a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d004      	beq.n	8005a88 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a86:	bf00      	nop
 8005a88:	bf00      	nop
}
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa2:	f003 021c 	and.w	r2, r3, #28
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	2101      	movs	r1, #1
 8005aac:	fa01 f202 	lsl.w	r2, r1, r2
 8005ab0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2b10      	cmp	r3, #16
 8005ac0:	d108      	bne.n	8005ad4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005ad2:	e007      	b.n	8005ae4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	60da      	str	r2, [r3, #12]
}
 8005ae4:	bf00      	nop
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d026      	beq.n	8005b60 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d021      	beq.n	8005b60 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b2a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b30:	f043 0201 	orr.w	r2, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2204      	movs	r2, #4
 8005b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f003 0320 	and.w	r3, r3, #32
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d026      	beq.n	8005bb8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d021      	beq.n	8005bb8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b82:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b90:	f043 0202 	orr.w	r2, r3, #2
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2204      	movs	r2, #4
 8005b9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d026      	beq.n	8005c10 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d021      	beq.n	8005c10 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bda:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2208      	movs	r2, #8
 8005be2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be8:	f043 0204 	orr.w	r2, r3, #4
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2204      	movs	r2, #4
 8005bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d013      	beq.n	8005c42 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00e      	beq.n	8005c42 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c32:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2204      	movs	r2, #4
 8005c3a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f853 	bl	8005ce8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d024      	beq.n	8005c96 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d01f      	beq.n	8005c96 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c64:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f003 0310 	and.w	r3, r3, #16
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d01f      	beq.n	8005ce0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d01a      	beq.n	8005ce0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cb8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2210      	movs	r2, #16
 8005cc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f80e 	bl	8005cfc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005ce0:	bf00      	nop
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d1e:	e166      	b.n	8005fee <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	2101      	movs	r1, #1
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	fa01 f303 	lsl.w	r3, r1, r3
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 8158 	beq.w	8005fe8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f003 0303 	and.w	r3, r3, #3
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d005      	beq.n	8005d50 <HAL_GPIO_Init+0x40>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f003 0303 	and.w	r3, r3, #3
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d130      	bne.n	8005db2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	2203      	movs	r2, #3
 8005d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d60:	43db      	mvns	r3, r3
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4013      	ands	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	fa02 f303 	lsl.w	r3, r2, r3
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d86:	2201      	movs	r2, #1
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8e:	43db      	mvns	r3, r3
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4013      	ands	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	091b      	lsrs	r3, r3, #4
 8005d9c:	f003 0201 	and.w	r2, r3, #1
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	fa02 f303 	lsl.w	r3, r2, r3
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f003 0303 	and.w	r3, r3, #3
 8005dba:	2b03      	cmp	r3, #3
 8005dbc:	d017      	beq.n	8005dee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	2203      	movs	r2, #3
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	43db      	mvns	r3, r3
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	fa02 f303 	lsl.w	r3, r2, r3
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d123      	bne.n	8005e42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	08da      	lsrs	r2, r3, #3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3208      	adds	r2, #8
 8005e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	220f      	movs	r2, #15
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	43db      	mvns	r3, r3
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	691a      	ldr	r2, [r3, #16]
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f003 0307 	and.w	r3, r3, #7
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	08da      	lsrs	r2, r3, #3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3208      	adds	r2, #8
 8005e3c:	6939      	ldr	r1, [r7, #16]
 8005e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	2203      	movs	r2, #3
 8005e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e52:	43db      	mvns	r3, r3
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	4013      	ands	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f003 0203 	and.w	r2, r3, #3
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 80b2 	beq.w	8005fe8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e84:	4b61      	ldr	r3, [pc, #388]	; (800600c <HAL_GPIO_Init+0x2fc>)
 8005e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e88:	4a60      	ldr	r2, [pc, #384]	; (800600c <HAL_GPIO_Init+0x2fc>)
 8005e8a:	f043 0301 	orr.w	r3, r3, #1
 8005e8e:	6613      	str	r3, [r2, #96]	; 0x60
 8005e90:	4b5e      	ldr	r3, [pc, #376]	; (800600c <HAL_GPIO_Init+0x2fc>)
 8005e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	60bb      	str	r3, [r7, #8]
 8005e9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005e9c:	4a5c      	ldr	r2, [pc, #368]	; (8006010 <HAL_GPIO_Init+0x300>)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	089b      	lsrs	r3, r3, #2
 8005ea2:	3302      	adds	r3, #2
 8005ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f003 0303 	and.w	r3, r3, #3
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	220f      	movs	r2, #15
 8005eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005ec6:	d02b      	beq.n	8005f20 <HAL_GPIO_Init+0x210>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a52      	ldr	r2, [pc, #328]	; (8006014 <HAL_GPIO_Init+0x304>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d025      	beq.n	8005f1c <HAL_GPIO_Init+0x20c>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a51      	ldr	r2, [pc, #324]	; (8006018 <HAL_GPIO_Init+0x308>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d01f      	beq.n	8005f18 <HAL_GPIO_Init+0x208>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a50      	ldr	r2, [pc, #320]	; (800601c <HAL_GPIO_Init+0x30c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d019      	beq.n	8005f14 <HAL_GPIO_Init+0x204>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a4f      	ldr	r2, [pc, #316]	; (8006020 <HAL_GPIO_Init+0x310>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d013      	beq.n	8005f10 <HAL_GPIO_Init+0x200>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a4e      	ldr	r2, [pc, #312]	; (8006024 <HAL_GPIO_Init+0x314>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00d      	beq.n	8005f0c <HAL_GPIO_Init+0x1fc>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a4d      	ldr	r2, [pc, #308]	; (8006028 <HAL_GPIO_Init+0x318>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d007      	beq.n	8005f08 <HAL_GPIO_Init+0x1f8>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a4c      	ldr	r2, [pc, #304]	; (800602c <HAL_GPIO_Init+0x31c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d101      	bne.n	8005f04 <HAL_GPIO_Init+0x1f4>
 8005f00:	2307      	movs	r3, #7
 8005f02:	e00e      	b.n	8005f22 <HAL_GPIO_Init+0x212>
 8005f04:	2308      	movs	r3, #8
 8005f06:	e00c      	b.n	8005f22 <HAL_GPIO_Init+0x212>
 8005f08:	2306      	movs	r3, #6
 8005f0a:	e00a      	b.n	8005f22 <HAL_GPIO_Init+0x212>
 8005f0c:	2305      	movs	r3, #5
 8005f0e:	e008      	b.n	8005f22 <HAL_GPIO_Init+0x212>
 8005f10:	2304      	movs	r3, #4
 8005f12:	e006      	b.n	8005f22 <HAL_GPIO_Init+0x212>
 8005f14:	2303      	movs	r3, #3
 8005f16:	e004      	b.n	8005f22 <HAL_GPIO_Init+0x212>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e002      	b.n	8005f22 <HAL_GPIO_Init+0x212>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e000      	b.n	8005f22 <HAL_GPIO_Init+0x212>
 8005f20:	2300      	movs	r3, #0
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	f002 0203 	and.w	r2, r2, #3
 8005f28:	0092      	lsls	r2, r2, #2
 8005f2a:	4093      	lsls	r3, r2
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005f32:	4937      	ldr	r1, [pc, #220]	; (8006010 <HAL_GPIO_Init+0x300>)
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	089b      	lsrs	r3, r3, #2
 8005f38:	3302      	adds	r3, #2
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f40:	4b3b      	ldr	r3, [pc, #236]	; (8006030 <HAL_GPIO_Init+0x320>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	43db      	mvns	r3, r3
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f64:	4a32      	ldr	r2, [pc, #200]	; (8006030 <HAL_GPIO_Init+0x320>)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f6a:	4b31      	ldr	r3, [pc, #196]	; (8006030 <HAL_GPIO_Init+0x320>)
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	43db      	mvns	r3, r3
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	4013      	ands	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f8e:	4a28      	ldr	r2, [pc, #160]	; (8006030 <HAL_GPIO_Init+0x320>)
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005f94:	4b26      	ldr	r3, [pc, #152]	; (8006030 <HAL_GPIO_Init+0x320>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	43db      	mvns	r3, r3
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d003      	beq.n	8005fb8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005fb8:	4a1d      	ldr	r2, [pc, #116]	; (8006030 <HAL_GPIO_Init+0x320>)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005fbe:	4b1c      	ldr	r3, [pc, #112]	; (8006030 <HAL_GPIO_Init+0x320>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005fe2:	4a13      	ldr	r2, [pc, #76]	; (8006030 <HAL_GPIO_Init+0x320>)
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	3301      	adds	r3, #1
 8005fec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f47f ae91 	bne.w	8005d20 <HAL_GPIO_Init+0x10>
  }
}
 8005ffe:	bf00      	nop
 8006000:	bf00      	nop
 8006002:	371c      	adds	r7, #28
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	40021000 	.word	0x40021000
 8006010:	40010000 	.word	0x40010000
 8006014:	48000400 	.word	0x48000400
 8006018:	48000800 	.word	0x48000800
 800601c:	48000c00 	.word	0x48000c00
 8006020:	48001000 	.word	0x48001000
 8006024:	48001400 	.word	0x48001400
 8006028:	48001800 	.word	0x48001800
 800602c:	48001c00 	.word	0x48001c00
 8006030:	40010400 	.word	0x40010400

08006034 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800603e:	2300      	movs	r3, #0
 8006040:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006042:	e0c9      	b.n	80061d8 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006044:	2201      	movs	r2, #1
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	fa02 f303 	lsl.w	r3, r2, r3
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	4013      	ands	r3, r2
 8006050:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 80bc 	beq.w	80061d2 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800605a:	4a66      	ldr	r2, [pc, #408]	; (80061f4 <HAL_GPIO_DeInit+0x1c0>)
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	089b      	lsrs	r3, r3, #2
 8006060:	3302      	adds	r3, #2
 8006062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006066:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f003 0303 	and.w	r3, r3, #3
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	220f      	movs	r2, #15
 8006072:	fa02 f303 	lsl.w	r3, r2, r3
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4013      	ands	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006082:	d02b      	beq.n	80060dc <HAL_GPIO_DeInit+0xa8>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a5c      	ldr	r2, [pc, #368]	; (80061f8 <HAL_GPIO_DeInit+0x1c4>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d025      	beq.n	80060d8 <HAL_GPIO_DeInit+0xa4>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a5b      	ldr	r2, [pc, #364]	; (80061fc <HAL_GPIO_DeInit+0x1c8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d01f      	beq.n	80060d4 <HAL_GPIO_DeInit+0xa0>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a5a      	ldr	r2, [pc, #360]	; (8006200 <HAL_GPIO_DeInit+0x1cc>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d019      	beq.n	80060d0 <HAL_GPIO_DeInit+0x9c>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a59      	ldr	r2, [pc, #356]	; (8006204 <HAL_GPIO_DeInit+0x1d0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d013      	beq.n	80060cc <HAL_GPIO_DeInit+0x98>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a58      	ldr	r2, [pc, #352]	; (8006208 <HAL_GPIO_DeInit+0x1d4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00d      	beq.n	80060c8 <HAL_GPIO_DeInit+0x94>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a57      	ldr	r2, [pc, #348]	; (800620c <HAL_GPIO_DeInit+0x1d8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d007      	beq.n	80060c4 <HAL_GPIO_DeInit+0x90>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a56      	ldr	r2, [pc, #344]	; (8006210 <HAL_GPIO_DeInit+0x1dc>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d101      	bne.n	80060c0 <HAL_GPIO_DeInit+0x8c>
 80060bc:	2307      	movs	r3, #7
 80060be:	e00e      	b.n	80060de <HAL_GPIO_DeInit+0xaa>
 80060c0:	2308      	movs	r3, #8
 80060c2:	e00c      	b.n	80060de <HAL_GPIO_DeInit+0xaa>
 80060c4:	2306      	movs	r3, #6
 80060c6:	e00a      	b.n	80060de <HAL_GPIO_DeInit+0xaa>
 80060c8:	2305      	movs	r3, #5
 80060ca:	e008      	b.n	80060de <HAL_GPIO_DeInit+0xaa>
 80060cc:	2304      	movs	r3, #4
 80060ce:	e006      	b.n	80060de <HAL_GPIO_DeInit+0xaa>
 80060d0:	2303      	movs	r3, #3
 80060d2:	e004      	b.n	80060de <HAL_GPIO_DeInit+0xaa>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e002      	b.n	80060de <HAL_GPIO_DeInit+0xaa>
 80060d8:	2301      	movs	r3, #1
 80060da:	e000      	b.n	80060de <HAL_GPIO_DeInit+0xaa>
 80060dc:	2300      	movs	r3, #0
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	f002 0203 	and.w	r2, r2, #3
 80060e4:	0092      	lsls	r2, r2, #2
 80060e6:	4093      	lsls	r3, r2
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d132      	bne.n	8006154 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80060ee:	4b49      	ldr	r3, [pc, #292]	; (8006214 <HAL_GPIO_DeInit+0x1e0>)
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	43db      	mvns	r3, r3
 80060f6:	4947      	ldr	r1, [pc, #284]	; (8006214 <HAL_GPIO_DeInit+0x1e0>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80060fc:	4b45      	ldr	r3, [pc, #276]	; (8006214 <HAL_GPIO_DeInit+0x1e0>)
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	43db      	mvns	r3, r3
 8006104:	4943      	ldr	r1, [pc, #268]	; (8006214 <HAL_GPIO_DeInit+0x1e0>)
 8006106:	4013      	ands	r3, r2
 8006108:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800610a:	4b42      	ldr	r3, [pc, #264]	; (8006214 <HAL_GPIO_DeInit+0x1e0>)
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	43db      	mvns	r3, r3
 8006112:	4940      	ldr	r1, [pc, #256]	; (8006214 <HAL_GPIO_DeInit+0x1e0>)
 8006114:	4013      	ands	r3, r2
 8006116:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8006118:	4b3e      	ldr	r3, [pc, #248]	; (8006214 <HAL_GPIO_DeInit+0x1e0>)
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	43db      	mvns	r3, r3
 8006120:	493c      	ldr	r1, [pc, #240]	; (8006214 <HAL_GPIO_DeInit+0x1e0>)
 8006122:	4013      	ands	r3, r2
 8006124:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f003 0303 	and.w	r3, r3, #3
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	220f      	movs	r2, #15
 8006130:	fa02 f303 	lsl.w	r3, r2, r3
 8006134:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006136:	4a2f      	ldr	r2, [pc, #188]	; (80061f4 <HAL_GPIO_DeInit+0x1c0>)
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	089b      	lsrs	r3, r3, #2
 800613c:	3302      	adds	r3, #2
 800613e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	43da      	mvns	r2, r3
 8006146:	482b      	ldr	r0, [pc, #172]	; (80061f4 <HAL_GPIO_DeInit+0x1c0>)
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	089b      	lsrs	r3, r3, #2
 800614c:	400a      	ands	r2, r1
 800614e:	3302      	adds	r3, #2
 8006150:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	2103      	movs	r1, #3
 800615e:	fa01 f303 	lsl.w	r3, r1, r3
 8006162:	431a      	orrs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	08da      	lsrs	r2, r3, #3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	3208      	adds	r2, #8
 8006170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	220f      	movs	r2, #15
 800617e:	fa02 f303 	lsl.w	r3, r2, r3
 8006182:	43db      	mvns	r3, r3
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	08d2      	lsrs	r2, r2, #3
 8006188:	4019      	ands	r1, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	3208      	adds	r2, #8
 800618e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689a      	ldr	r2, [r3, #8]
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	2103      	movs	r1, #3
 800619c:	fa01 f303 	lsl.w	r3, r1, r3
 80061a0:	43db      	mvns	r3, r3
 80061a2:	401a      	ands	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	2101      	movs	r1, #1
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	fa01 f303 	lsl.w	r3, r1, r3
 80061b4:	43db      	mvns	r3, r3
 80061b6:	401a      	ands	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	2103      	movs	r1, #3
 80061c6:	fa01 f303 	lsl.w	r3, r1, r3
 80061ca:	43db      	mvns	r3, r3
 80061cc:	401a      	ands	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	3301      	adds	r3, #1
 80061d6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	fa22 f303 	lsr.w	r3, r2, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f47f af2f 	bne.w	8006044 <HAL_GPIO_DeInit+0x10>
  }
}
 80061e6:	bf00      	nop
 80061e8:	bf00      	nop
 80061ea:	371c      	adds	r7, #28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	40010000 	.word	0x40010000
 80061f8:	48000400 	.word	0x48000400
 80061fc:	48000800 	.word	0x48000800
 8006200:	48000c00 	.word	0x48000c00
 8006204:	48001000 	.word	0x48001000
 8006208:	48001400 	.word	0x48001400
 800620c:	48001800 	.word	0x48001800
 8006210:	48001c00 	.word	0x48001c00
 8006214:	40010400 	.word	0x40010400

08006218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	460b      	mov	r3, r1
 8006222:	807b      	strh	r3, [r7, #2]
 8006224:	4613      	mov	r3, r2
 8006226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006228:	787b      	ldrb	r3, [r7, #1]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800622e:	887a      	ldrh	r2, [r7, #2]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006234:	e002      	b.n	800623c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006236:	887a      	ldrh	r2, [r7, #2]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	4603      	mov	r3, r0
 8006250:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006252:	4b08      	ldr	r3, [pc, #32]	; (8006274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006254:	695a      	ldr	r2, [r3, #20]
 8006256:	88fb      	ldrh	r3, [r7, #6]
 8006258:	4013      	ands	r3, r2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d006      	beq.n	800626c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800625e:	4a05      	ldr	r2, [pc, #20]	; (8006274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006260:	88fb      	ldrh	r3, [r7, #6]
 8006262:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006264:	88fb      	ldrh	r3, [r7, #6]
 8006266:	4618      	mov	r0, r3
 8006268:	f7fc fad2 	bl	8002810 <HAL_GPIO_EXTI_Callback>
  }
}
 800626c:	bf00      	nop
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	40010400 	.word	0x40010400

08006278 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e081      	b.n	800638e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d106      	bne.n	80062a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f8a8 	bl	80063f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2224      	movs	r2, #36	; 0x24
 80062a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0201 	bic.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80062c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d107      	bne.n	80062f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062ee:	609a      	str	r2, [r3, #8]
 80062f0:	e006      	b.n	8006300 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80062fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	2b02      	cmp	r3, #2
 8006306:	d104      	bne.n	8006312 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006310:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6812      	ldr	r2, [r2, #0]
 800631c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006324:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006334:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691a      	ldr	r2, [r3, #16]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	69d9      	ldr	r1, [r3, #28]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a1a      	ldr	r2, [r3, #32]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0201 	orr.w	r2, r2, #1
 800636e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2220      	movs	r2, #32
 800637a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b082      	sub	sp, #8
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e021      	b.n	80063ec <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2224      	movs	r2, #36	; 0x24
 80063ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f022 0201 	bic.w	r2, r2, #1
 80063be:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f821 	bl	8006408 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af02      	add	r7, sp, #8
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	4608      	mov	r0, r1
 8006426:	4611      	mov	r1, r2
 8006428:	461a      	mov	r2, r3
 800642a:	4603      	mov	r3, r0
 800642c:	817b      	strh	r3, [r7, #10]
 800642e:	460b      	mov	r3, r1
 8006430:	813b      	strh	r3, [r7, #8]
 8006432:	4613      	mov	r3, r2
 8006434:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b20      	cmp	r3, #32
 8006440:	f040 80f9 	bne.w	8006636 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <HAL_I2C_Mem_Write+0x34>
 800644a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800644c:	2b00      	cmp	r3, #0
 800644e:	d105      	bne.n	800645c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006456:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e0ed      	b.n	8006638 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006462:	2b01      	cmp	r3, #1
 8006464:	d101      	bne.n	800646a <HAL_I2C_Mem_Write+0x4e>
 8006466:	2302      	movs	r3, #2
 8006468:	e0e6      	b.n	8006638 <HAL_I2C_Mem_Write+0x21c>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006472:	f7fe fb77 	bl	8004b64 <HAL_GetTick>
 8006476:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	2319      	movs	r3, #25
 800647e:	2201      	movs	r2, #1
 8006480:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fbd9 	bl	8006c3c <I2C_WaitOnFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e0d1      	b.n	8006638 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2221      	movs	r2, #33	; 0x21
 8006498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2240      	movs	r2, #64	; 0x40
 80064a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6a3a      	ldr	r2, [r7, #32]
 80064ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80064b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064bc:	88f8      	ldrh	r0, [r7, #6]
 80064be:	893a      	ldrh	r2, [r7, #8]
 80064c0:	8979      	ldrh	r1, [r7, #10]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	9301      	str	r3, [sp, #4]
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	4603      	mov	r3, r0
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 fae9 	bl	8006aa4 <I2C_RequestMemoryWrite>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e0a9      	b.n	8006638 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2bff      	cmp	r3, #255	; 0xff
 80064ec:	d90e      	bls.n	800650c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	22ff      	movs	r2, #255	; 0xff
 80064f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	8979      	ldrh	r1, [r7, #10]
 80064fc:	2300      	movs	r3, #0
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 fd41 	bl	8006f8c <I2C_TransferConfig>
 800650a:	e00f      	b.n	800652c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800651a:	b2da      	uxtb	r2, r3
 800651c:	8979      	ldrh	r1, [r7, #10]
 800651e:	2300      	movs	r3, #0
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 fd30 	bl	8006f8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 fbc3 	bl	8006cbc <I2C_WaitOnTXISFlagUntilTimeout>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e07b      	b.n	8006638 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	781a      	ldrb	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800655a:	b29b      	uxth	r3, r3
 800655c:	3b01      	subs	r3, #1
 800655e:	b29a      	uxth	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006568:	3b01      	subs	r3, #1
 800656a:	b29a      	uxth	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006574:	b29b      	uxth	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d034      	beq.n	80065e4 <HAL_I2C_Mem_Write+0x1c8>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800657e:	2b00      	cmp	r3, #0
 8006580:	d130      	bne.n	80065e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006588:	2200      	movs	r2, #0
 800658a:	2180      	movs	r1, #128	; 0x80
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 fb55 	bl	8006c3c <I2C_WaitOnFlagUntilTimeout>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d001      	beq.n	800659c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e04d      	b.n	8006638 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	2bff      	cmp	r3, #255	; 0xff
 80065a4:	d90e      	bls.n	80065c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	22ff      	movs	r2, #255	; 0xff
 80065aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	8979      	ldrh	r1, [r7, #10]
 80065b4:	2300      	movs	r3, #0
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 fce5 	bl	8006f8c <I2C_TransferConfig>
 80065c2:	e00f      	b.n	80065e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	8979      	ldrh	r1, [r7, #10]
 80065d6:	2300      	movs	r3, #0
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 fcd4 	bl	8006f8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d19e      	bne.n	800652c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 fba2 	bl	8006d3c <I2C_WaitOnSTOPFlagUntilTimeout>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e01a      	b.n	8006638 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2220      	movs	r2, #32
 8006608:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6859      	ldr	r1, [r3, #4]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <HAL_I2C_Mem_Write+0x224>)
 8006616:	400b      	ands	r3, r1
 8006618:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2220      	movs	r2, #32
 800661e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	e000      	b.n	8006638 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006636:	2302      	movs	r3, #2
  }
}
 8006638:	4618      	mov	r0, r3
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	fe00e800 	.word	0xfe00e800

08006644 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b088      	sub	sp, #32
 8006648:	af02      	add	r7, sp, #8
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	4608      	mov	r0, r1
 800664e:	4611      	mov	r1, r2
 8006650:	461a      	mov	r2, r3
 8006652:	4603      	mov	r3, r0
 8006654:	817b      	strh	r3, [r7, #10]
 8006656:	460b      	mov	r3, r1
 8006658:	813b      	strh	r3, [r7, #8]
 800665a:	4613      	mov	r3, r2
 800665c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b20      	cmp	r3, #32
 8006668:	f040 80fd 	bne.w	8006866 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <HAL_I2C_Mem_Read+0x34>
 8006672:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006674:	2b00      	cmp	r3, #0
 8006676:	d105      	bne.n	8006684 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800667e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e0f1      	b.n	8006868 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800668a:	2b01      	cmp	r3, #1
 800668c:	d101      	bne.n	8006692 <HAL_I2C_Mem_Read+0x4e>
 800668e:	2302      	movs	r3, #2
 8006690:	e0ea      	b.n	8006868 <HAL_I2C_Mem_Read+0x224>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800669a:	f7fe fa63 	bl	8004b64 <HAL_GetTick>
 800669e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	2319      	movs	r3, #25
 80066a6:	2201      	movs	r2, #1
 80066a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 fac5 	bl	8006c3c <I2C_WaitOnFlagUntilTimeout>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e0d5      	b.n	8006868 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2222      	movs	r2, #34	; 0x22
 80066c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2240      	movs	r2, #64	; 0x40
 80066c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a3a      	ldr	r2, [r7, #32]
 80066d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80066dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066e4:	88f8      	ldrh	r0, [r7, #6]
 80066e6:	893a      	ldrh	r2, [r7, #8]
 80066e8:	8979      	ldrh	r1, [r7, #10]
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	9301      	str	r3, [sp, #4]
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	4603      	mov	r3, r0
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 fa29 	bl	8006b4c <I2C_RequestMemoryRead>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d005      	beq.n	800670c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e0ad      	b.n	8006868 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006710:	b29b      	uxth	r3, r3
 8006712:	2bff      	cmp	r3, #255	; 0xff
 8006714:	d90e      	bls.n	8006734 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	22ff      	movs	r2, #255	; 0xff
 800671a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006720:	b2da      	uxtb	r2, r3
 8006722:	8979      	ldrh	r1, [r7, #10]
 8006724:	4b52      	ldr	r3, [pc, #328]	; (8006870 <HAL_I2C_Mem_Read+0x22c>)
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 fc2d 	bl	8006f8c <I2C_TransferConfig>
 8006732:	e00f      	b.n	8006754 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006738:	b29a      	uxth	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006742:	b2da      	uxtb	r2, r3
 8006744:	8979      	ldrh	r1, [r7, #10]
 8006746:	4b4a      	ldr	r3, [pc, #296]	; (8006870 <HAL_I2C_Mem_Read+0x22c>)
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 fc1c 	bl	8006f8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	2200      	movs	r2, #0
 800675c:	2104      	movs	r1, #4
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 fa6c 	bl	8006c3c <I2C_WaitOnFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e07c      	b.n	8006868 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	b2d2      	uxtb	r2, r2
 800677a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800678a:	3b01      	subs	r3, #1
 800678c:	b29a      	uxth	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006796:	b29b      	uxth	r3, r3
 8006798:	3b01      	subs	r3, #1
 800679a:	b29a      	uxth	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d034      	beq.n	8006814 <HAL_I2C_Mem_Read+0x1d0>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d130      	bne.n	8006814 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b8:	2200      	movs	r2, #0
 80067ba:	2180      	movs	r1, #128	; 0x80
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 fa3d 	bl	8006c3c <I2C_WaitOnFlagUntilTimeout>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e04d      	b.n	8006868 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	2bff      	cmp	r3, #255	; 0xff
 80067d4:	d90e      	bls.n	80067f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	22ff      	movs	r2, #255	; 0xff
 80067da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	8979      	ldrh	r1, [r7, #10]
 80067e4:	2300      	movs	r3, #0
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 fbcd 	bl	8006f8c <I2C_TransferConfig>
 80067f2:	e00f      	b.n	8006814 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006802:	b2da      	uxtb	r2, r3
 8006804:	8979      	ldrh	r1, [r7, #10]
 8006806:	2300      	movs	r3, #0
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f000 fbbc 	bl	8006f8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006818:	b29b      	uxth	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d19a      	bne.n	8006754 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 fa8a 	bl	8006d3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e01a      	b.n	8006868 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2220      	movs	r2, #32
 8006838:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6859      	ldr	r1, [r3, #4]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <HAL_I2C_Mem_Read+0x230>)
 8006846:	400b      	ands	r3, r1
 8006848:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2220      	movs	r2, #32
 800684e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	e000      	b.n	8006868 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006866:	2302      	movs	r3, #2
  }
}
 8006868:	4618      	mov	r0, r3
 800686a:	3718      	adds	r7, #24
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	80002400 	.word	0x80002400
 8006874:	fe00e800 	.word	0xfe00e800

08006878 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08a      	sub	sp, #40	; 0x28
 800687c:	af02      	add	r7, sp, #8
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	607a      	str	r2, [r7, #4]
 8006882:	603b      	str	r3, [r7, #0]
 8006884:	460b      	mov	r3, r1
 8006886:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006888:	2300      	movs	r3, #0
 800688a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b20      	cmp	r3, #32
 8006896:	f040 80f1 	bne.w	8006a7c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068a8:	d101      	bne.n	80068ae <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80068aa:	2302      	movs	r3, #2
 80068ac:	e0e7      	b.n	8006a7e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d101      	bne.n	80068bc <HAL_I2C_IsDeviceReady+0x44>
 80068b8:	2302      	movs	r3, #2
 80068ba:	e0e0      	b.n	8006a7e <HAL_I2C_IsDeviceReady+0x206>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2224      	movs	r2, #36	; 0x24
 80068c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d107      	bne.n	80068ea <HAL_I2C_IsDeviceReady+0x72>
 80068da:	897b      	ldrh	r3, [r7, #10]
 80068dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80068e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80068e8:	e004      	b.n	80068f4 <HAL_I2C_IsDeviceReady+0x7c>
 80068ea:	897b      	ldrh	r3, [r7, #10]
 80068ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068f0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	6812      	ldr	r2, [r2, #0]
 80068f8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80068fa:	f7fe f933 	bl	8004b64 <HAL_GetTick>
 80068fe:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	f003 0320 	and.w	r3, r3, #32
 800690a:	2b20      	cmp	r3, #32
 800690c:	bf0c      	ite	eq
 800690e:	2301      	moveq	r3, #1
 8006910:	2300      	movne	r3, #0
 8006912:	b2db      	uxtb	r3, r3
 8006914:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	f003 0310 	and.w	r3, r3, #16
 8006920:	2b10      	cmp	r3, #16
 8006922:	bf0c      	ite	eq
 8006924:	2301      	moveq	r3, #1
 8006926:	2300      	movne	r3, #0
 8006928:	b2db      	uxtb	r3, r3
 800692a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800692c:	e034      	b.n	8006998 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006934:	d01a      	beq.n	800696c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006936:	f7fe f915 	bl	8004b64 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d302      	bcc.n	800694c <HAL_I2C_IsDeviceReady+0xd4>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10f      	bne.n	800696c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2220      	movs	r2, #32
 8006950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006958:	f043 0220 	orr.w	r2, r3, #32
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e088      	b.n	8006a7e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	f003 0320 	and.w	r3, r3, #32
 8006976:	2b20      	cmp	r3, #32
 8006978:	bf0c      	ite	eq
 800697a:	2301      	moveq	r3, #1
 800697c:	2300      	movne	r3, #0
 800697e:	b2db      	uxtb	r3, r3
 8006980:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	f003 0310 	and.w	r3, r3, #16
 800698c:	2b10      	cmp	r3, #16
 800698e:	bf0c      	ite	eq
 8006990:	2301      	moveq	r3, #1
 8006992:	2300      	movne	r3, #0
 8006994:	b2db      	uxtb	r3, r3
 8006996:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006998:	7ffb      	ldrb	r3, [r7, #31]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d102      	bne.n	80069a4 <HAL_I2C_IsDeviceReady+0x12c>
 800699e:	7fbb      	ldrb	r3, [r7, #30]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d0c4      	beq.n	800692e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	f003 0310 	and.w	r3, r3, #16
 80069ae:	2b10      	cmp	r3, #16
 80069b0:	d01a      	beq.n	80069e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2200      	movs	r2, #0
 80069ba:	2120      	movs	r1, #32
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 f93d 	bl	8006c3c <I2C_WaitOnFlagUntilTimeout>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e058      	b.n	8006a7e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2220      	movs	r2, #32
 80069d2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	e04a      	b.n	8006a7e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2200      	movs	r2, #0
 80069f0:	2120      	movs	r1, #32
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f000 f922 	bl	8006c3c <I2C_WaitOnFlagUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e03d      	b.n	8006a7e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2210      	movs	r2, #16
 8006a08:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d118      	bne.n	8006a4c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a28:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2200      	movs	r2, #0
 8006a32:	2120      	movs	r1, #32
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 f901 	bl	8006c3c <I2C_WaitOnFlagUntilTimeout>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e01c      	b.n	8006a7e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	f63f af3b 	bhi.w	80068d2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a68:	f043 0220 	orr.w	r2, r3, #32
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e000      	b.n	8006a7e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8006a7c:	2302      	movs	r3, #2
  }
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3720      	adds	r7, #32
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a94:	b2db      	uxtb	r3, r3
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
	...

08006aa4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af02      	add	r7, sp, #8
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	4608      	mov	r0, r1
 8006aae:	4611      	mov	r1, r2
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	817b      	strh	r3, [r7, #10]
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	813b      	strh	r3, [r7, #8]
 8006aba:	4613      	mov	r3, r2
 8006abc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006abe:	88fb      	ldrh	r3, [r7, #6]
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	8979      	ldrh	r1, [r7, #10]
 8006ac4:	4b20      	ldr	r3, [pc, #128]	; (8006b48 <I2C_RequestMemoryWrite+0xa4>)
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 fa5d 	bl	8006f8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ad2:	69fa      	ldr	r2, [r7, #28]
 8006ad4:	69b9      	ldr	r1, [r7, #24]
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 f8f0 	bl	8006cbc <I2C_WaitOnTXISFlagUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e02c      	b.n	8006b40 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ae6:	88fb      	ldrh	r3, [r7, #6]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d105      	bne.n	8006af8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006aec:	893b      	ldrh	r3, [r7, #8]
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	629a      	str	r2, [r3, #40]	; 0x28
 8006af6:	e015      	b.n	8006b24 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006af8:	893b      	ldrh	r3, [r7, #8]
 8006afa:	0a1b      	lsrs	r3, r3, #8
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b06:	69fa      	ldr	r2, [r7, #28]
 8006b08:	69b9      	ldr	r1, [r7, #24]
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 f8d6 	bl	8006cbc <I2C_WaitOnTXISFlagUntilTimeout>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e012      	b.n	8006b40 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b1a:	893b      	ldrh	r3, [r7, #8]
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	2180      	movs	r1, #128	; 0x80
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 f884 	bl	8006c3c <I2C_WaitOnFlagUntilTimeout>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e000      	b.n	8006b40 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	80002000 	.word	0x80002000

08006b4c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af02      	add	r7, sp, #8
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	4608      	mov	r0, r1
 8006b56:	4611      	mov	r1, r2
 8006b58:	461a      	mov	r2, r3
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	817b      	strh	r3, [r7, #10]
 8006b5e:	460b      	mov	r3, r1
 8006b60:	813b      	strh	r3, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	8979      	ldrh	r1, [r7, #10]
 8006b6c:	4b20      	ldr	r3, [pc, #128]	; (8006bf0 <I2C_RequestMemoryRead+0xa4>)
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	2300      	movs	r3, #0
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 fa0a 	bl	8006f8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b78:	69fa      	ldr	r2, [r7, #28]
 8006b7a:	69b9      	ldr	r1, [r7, #24]
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 f89d 	bl	8006cbc <I2C_WaitOnTXISFlagUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e02c      	b.n	8006be6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b8c:	88fb      	ldrh	r3, [r7, #6]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d105      	bne.n	8006b9e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b92:	893b      	ldrh	r3, [r7, #8]
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	629a      	str	r2, [r3, #40]	; 0x28
 8006b9c:	e015      	b.n	8006bca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b9e:	893b      	ldrh	r3, [r7, #8]
 8006ba0:	0a1b      	lsrs	r3, r3, #8
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bac:	69fa      	ldr	r2, [r7, #28]
 8006bae:	69b9      	ldr	r1, [r7, #24]
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f883 	bl	8006cbc <I2C_WaitOnTXISFlagUntilTimeout>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e012      	b.n	8006be6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bc0:	893b      	ldrh	r3, [r7, #8]
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	2140      	movs	r1, #64	; 0x40
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 f831 	bl	8006c3c <I2C_WaitOnFlagUntilTimeout>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e000      	b.n	8006be6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	80002000 	.word	0x80002000

08006bf4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d103      	bne.n	8006c12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d007      	beq.n	8006c30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0201 	orr.w	r2, r2, #1
 8006c2e:	619a      	str	r2, [r3, #24]
  }
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	603b      	str	r3, [r7, #0]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c4c:	e022      	b.n	8006c94 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c54:	d01e      	beq.n	8006c94 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c56:	f7fd ff85 	bl	8004b64 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d302      	bcc.n	8006c6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d113      	bne.n	8006c94 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c70:	f043 0220 	orr.w	r2, r3, #32
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e00f      	b.n	8006cb4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	bf0c      	ite	eq
 8006ca4:	2301      	moveq	r3, #1
 8006ca6:	2300      	movne	r3, #0
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	461a      	mov	r2, r3
 8006cac:	79fb      	ldrb	r3, [r7, #7]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d0cd      	beq.n	8006c4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006cc8:	e02c      	b.n	8006d24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	68b9      	ldr	r1, [r7, #8]
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 f870 	bl	8006db4 <I2C_IsErrorOccurred>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e02a      	b.n	8006d34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce4:	d01e      	beq.n	8006d24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ce6:	f7fd ff3d 	bl	8004b64 <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d302      	bcc.n	8006cfc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d113      	bne.n	8006d24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d00:	f043 0220 	orr.w	r2, r3, #32
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e007      	b.n	8006d34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d1cb      	bne.n	8006cca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d48:	e028      	b.n	8006d9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 f830 	bl	8006db4 <I2C_IsErrorOccurred>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e026      	b.n	8006dac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d5e:	f7fd ff01 	bl	8004b64 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d302      	bcc.n	8006d74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d113      	bne.n	8006d9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d78:	f043 0220 	orr.w	r2, r3, #32
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2220      	movs	r2, #32
 8006d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e007      	b.n	8006dac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b20      	cmp	r3, #32
 8006da8:	d1cf      	bne.n	8006d4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08a      	sub	sp, #40	; 0x28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	f003 0310 	and.w	r3, r3, #16
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d075      	beq.n	8006ecc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2210      	movs	r2, #16
 8006de6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006de8:	e056      	b.n	8006e98 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df0:	d052      	beq.n	8006e98 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006df2:	f7fd feb7 	bl	8004b64 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d302      	bcc.n	8006e08 <I2C_IsErrorOccurred+0x54>
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d147      	bne.n	8006e98 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e1a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e2a:	d12e      	bne.n	8006e8a <I2C_IsErrorOccurred+0xd6>
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e32:	d02a      	beq.n	8006e8a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006e34:	7cfb      	ldrb	r3, [r7, #19]
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	d027      	beq.n	8006e8a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e48:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006e4a:	f7fd fe8b 	bl	8004b64 <HAL_GetTick>
 8006e4e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e50:	e01b      	b.n	8006e8a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006e52:	f7fd fe87 	bl	8004b64 <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	2b19      	cmp	r3, #25
 8006e5e:	d914      	bls.n	8006e8a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e64:	f043 0220 	orr.w	r2, r3, #32
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	f003 0320 	and.w	r3, r3, #32
 8006e94:	2b20      	cmp	r3, #32
 8006e96:	d1dc      	bne.n	8006e52 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	f003 0320 	and.w	r3, r3, #32
 8006ea2:	2b20      	cmp	r3, #32
 8006ea4:	d003      	beq.n	8006eae <I2C_IsErrorOccurred+0xfa>
 8006ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d09d      	beq.n	8006dea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d103      	bne.n	8006ebe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	f043 0304 	orr.w	r3, r3, #4
 8006ec4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00b      	beq.n	8006ef6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	f043 0301 	orr.w	r3, r3, #1
 8006ee4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006eee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00b      	beq.n	8006f18 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	f043 0308 	orr.w	r3, r3, #8
 8006f06:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00b      	beq.n	8006f3a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	f043 0302 	orr.w	r3, r3, #2
 8006f28:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d01c      	beq.n	8006f7c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f7ff fe56 	bl	8006bf4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6859      	ldr	r1, [r3, #4]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	4b0d      	ldr	r3, [pc, #52]	; (8006f88 <I2C_IsErrorOccurred+0x1d4>)
 8006f54:	400b      	ands	r3, r1
 8006f56:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3728      	adds	r7, #40	; 0x28
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	fe00e800 	.word	0xfe00e800

08006f8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	607b      	str	r3, [r7, #4]
 8006f96:	460b      	mov	r3, r1
 8006f98:	817b      	strh	r3, [r7, #10]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f9e:	897b      	ldrh	r3, [r7, #10]
 8006fa0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006fa4:	7a7b      	ldrb	r3, [r7, #9]
 8006fa6:	041b      	lsls	r3, r3, #16
 8006fa8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	0d5b      	lsrs	r3, r3, #21
 8006fc6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006fca:	4b08      	ldr	r3, [pc, #32]	; (8006fec <I2C_TransferConfig+0x60>)
 8006fcc:	430b      	orrs	r3, r1
 8006fce:	43db      	mvns	r3, r3
 8006fd0:	ea02 0103 	and.w	r1, r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006fde:	bf00      	nop
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	03ff63ff 	.word	0x03ff63ff

08006ff0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006ff4:	4b04      	ldr	r3, [pc, #16]	; (8007008 <HAL_PWREx_GetVoltageRange+0x18>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40007000 	.word	0x40007000

0800700c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800701a:	d130      	bne.n	800707e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800701c:	4b23      	ldr	r3, [pc, #140]	; (80070ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007028:	d038      	beq.n	800709c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800702a:	4b20      	ldr	r3, [pc, #128]	; (80070ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007032:	4a1e      	ldr	r2, [pc, #120]	; (80070ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007034:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007038:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800703a:	4b1d      	ldr	r3, [pc, #116]	; (80070b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2232      	movs	r2, #50	; 0x32
 8007040:	fb02 f303 	mul.w	r3, r2, r3
 8007044:	4a1b      	ldr	r2, [pc, #108]	; (80070b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007046:	fba2 2303 	umull	r2, r3, r2, r3
 800704a:	0c9b      	lsrs	r3, r3, #18
 800704c:	3301      	adds	r3, #1
 800704e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007050:	e002      	b.n	8007058 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3b01      	subs	r3, #1
 8007056:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007058:	4b14      	ldr	r3, [pc, #80]	; (80070ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007064:	d102      	bne.n	800706c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1f2      	bne.n	8007052 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800706c:	4b0f      	ldr	r3, [pc, #60]	; (80070ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007078:	d110      	bne.n	800709c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e00f      	b.n	800709e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800707e:	4b0b      	ldr	r3, [pc, #44]	; (80070ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800708a:	d007      	beq.n	800709c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800708c:	4b07      	ldr	r3, [pc, #28]	; (80070ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007094:	4a05      	ldr	r2, [pc, #20]	; (80070ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800709a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	40007000 	.word	0x40007000
 80070b0:	200000a4 	.word	0x200000a4
 80070b4:	431bde83 	.word	0x431bde83

080070b8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80070b8:	b480      	push	{r7}
 80070ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80070bc:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	4a04      	ldr	r2, [pc, #16]	; (80070d4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80070c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070c6:	6053      	str	r3, [r2, #4]
}
 80070c8:	bf00      	nop
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	40007000 	.word	0x40007000

080070d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b088      	sub	sp, #32
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d102      	bne.n	80070ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	f000 bc08 	b.w	80078fc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070ec:	4b96      	ldr	r3, [pc, #600]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f003 030c 	and.w	r3, r3, #12
 80070f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070f6:	4b94      	ldr	r3, [pc, #592]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	f003 0303 	and.w	r3, r3, #3
 80070fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0310 	and.w	r3, r3, #16
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 80e4 	beq.w	80072d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d007      	beq.n	8007124 <HAL_RCC_OscConfig+0x4c>
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	2b0c      	cmp	r3, #12
 8007118:	f040 808b 	bne.w	8007232 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	2b01      	cmp	r3, #1
 8007120:	f040 8087 	bne.w	8007232 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007124:	4b88      	ldr	r3, [pc, #544]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d005      	beq.n	800713c <HAL_RCC_OscConfig+0x64>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e3df      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a1a      	ldr	r2, [r3, #32]
 8007140:	4b81      	ldr	r3, [pc, #516]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0308 	and.w	r3, r3, #8
 8007148:	2b00      	cmp	r3, #0
 800714a:	d004      	beq.n	8007156 <HAL_RCC_OscConfig+0x7e>
 800714c:	4b7e      	ldr	r3, [pc, #504]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007154:	e005      	b.n	8007162 <HAL_RCC_OscConfig+0x8a>
 8007156:	4b7c      	ldr	r3, [pc, #496]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 8007158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800715c:	091b      	lsrs	r3, r3, #4
 800715e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007162:	4293      	cmp	r3, r2
 8007164:	d223      	bcs.n	80071ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	4618      	mov	r0, r3
 800716c:	f000 fdc6 	bl	8007cfc <RCC_SetFlashLatencyFromMSIRange>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e3c0      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800717a:	4b73      	ldr	r3, [pc, #460]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a72      	ldr	r2, [pc, #456]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 8007180:	f043 0308 	orr.w	r3, r3, #8
 8007184:	6013      	str	r3, [r2, #0]
 8007186:	4b70      	ldr	r3, [pc, #448]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	496d      	ldr	r1, [pc, #436]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 8007194:	4313      	orrs	r3, r2
 8007196:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007198:	4b6b      	ldr	r3, [pc, #428]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	69db      	ldr	r3, [r3, #28]
 80071a4:	021b      	lsls	r3, r3, #8
 80071a6:	4968      	ldr	r1, [pc, #416]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	604b      	str	r3, [r1, #4]
 80071ac:	e025      	b.n	80071fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80071ae:	4b66      	ldr	r3, [pc, #408]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a65      	ldr	r2, [pc, #404]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 80071b4:	f043 0308 	orr.w	r3, r3, #8
 80071b8:	6013      	str	r3, [r2, #0]
 80071ba:	4b63      	ldr	r3, [pc, #396]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	4960      	ldr	r1, [pc, #384]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80071cc:	4b5e      	ldr	r3, [pc, #376]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	69db      	ldr	r3, [r3, #28]
 80071d8:	021b      	lsls	r3, r3, #8
 80071da:	495b      	ldr	r1, [pc, #364]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d109      	bne.n	80071fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 fd86 	bl	8007cfc <RCC_SetFlashLatencyFromMSIRange>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e380      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80071fa:	f000 fcbb 	bl	8007b74 <HAL_RCC_GetSysClockFreq>
 80071fe:	4602      	mov	r2, r0
 8007200:	4b51      	ldr	r3, [pc, #324]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	091b      	lsrs	r3, r3, #4
 8007206:	f003 030f 	and.w	r3, r3, #15
 800720a:	4950      	ldr	r1, [pc, #320]	; (800734c <HAL_RCC_OscConfig+0x274>)
 800720c:	5ccb      	ldrb	r3, [r1, r3]
 800720e:	f003 031f 	and.w	r3, r3, #31
 8007212:	fa22 f303 	lsr.w	r3, r2, r3
 8007216:	4a4e      	ldr	r2, [pc, #312]	; (8007350 <HAL_RCC_OscConfig+0x278>)
 8007218:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800721a:	4b4e      	ldr	r3, [pc, #312]	; (8007354 <HAL_RCC_OscConfig+0x27c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4618      	mov	r0, r3
 8007220:	f7fd fc50 	bl	8004ac4 <HAL_InitTick>
 8007224:	4603      	mov	r3, r0
 8007226:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007228:	7bfb      	ldrb	r3, [r7, #15]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d052      	beq.n	80072d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	e364      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d032      	beq.n	80072a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800723a:	4b43      	ldr	r3, [pc, #268]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a42      	ldr	r2, [pc, #264]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 8007240:	f043 0301 	orr.w	r3, r3, #1
 8007244:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007246:	f7fd fc8d 	bl	8004b64 <HAL_GetTick>
 800724a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800724c:	e008      	b.n	8007260 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800724e:	f7fd fc89 	bl	8004b64 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b02      	cmp	r3, #2
 800725a:	d901      	bls.n	8007260 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e34d      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007260:	4b39      	ldr	r3, [pc, #228]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	2b00      	cmp	r3, #0
 800726a:	d0f0      	beq.n	800724e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800726c:	4b36      	ldr	r3, [pc, #216]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a35      	ldr	r2, [pc, #212]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 8007272:	f043 0308 	orr.w	r3, r3, #8
 8007276:	6013      	str	r3, [r2, #0]
 8007278:	4b33      	ldr	r3, [pc, #204]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	4930      	ldr	r1, [pc, #192]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 8007286:	4313      	orrs	r3, r2
 8007288:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800728a:	4b2f      	ldr	r3, [pc, #188]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	021b      	lsls	r3, r3, #8
 8007298:	492b      	ldr	r1, [pc, #172]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 800729a:	4313      	orrs	r3, r2
 800729c:	604b      	str	r3, [r1, #4]
 800729e:	e01a      	b.n	80072d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80072a0:	4b29      	ldr	r3, [pc, #164]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a28      	ldr	r2, [pc, #160]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 80072a6:	f023 0301 	bic.w	r3, r3, #1
 80072aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80072ac:	f7fd fc5a 	bl	8004b64 <HAL_GetTick>
 80072b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80072b2:	e008      	b.n	80072c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80072b4:	f7fd fc56 	bl	8004b64 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e31a      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80072c6:	4b20      	ldr	r3, [pc, #128]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1f0      	bne.n	80072b4 <HAL_RCC_OscConfig+0x1dc>
 80072d2:	e000      	b.n	80072d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80072d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d073      	beq.n	80073ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	2b08      	cmp	r3, #8
 80072e6:	d005      	beq.n	80072f4 <HAL_RCC_OscConfig+0x21c>
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	2b0c      	cmp	r3, #12
 80072ec:	d10e      	bne.n	800730c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d10b      	bne.n	800730c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072f4:	4b14      	ldr	r3, [pc, #80]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d063      	beq.n	80073c8 <HAL_RCC_OscConfig+0x2f0>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d15f      	bne.n	80073c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e2f7      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007314:	d106      	bne.n	8007324 <HAL_RCC_OscConfig+0x24c>
 8007316:	4b0c      	ldr	r3, [pc, #48]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a0b      	ldr	r2, [pc, #44]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 800731c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	e025      	b.n	8007370 <HAL_RCC_OscConfig+0x298>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800732c:	d114      	bne.n	8007358 <HAL_RCC_OscConfig+0x280>
 800732e:	4b06      	ldr	r3, [pc, #24]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a05      	ldr	r2, [pc, #20]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 8007334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	4b03      	ldr	r3, [pc, #12]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a02      	ldr	r2, [pc, #8]	; (8007348 <HAL_RCC_OscConfig+0x270>)
 8007340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007344:	6013      	str	r3, [r2, #0]
 8007346:	e013      	b.n	8007370 <HAL_RCC_OscConfig+0x298>
 8007348:	40021000 	.word	0x40021000
 800734c:	08011f74 	.word	0x08011f74
 8007350:	200000a4 	.word	0x200000a4
 8007354:	200000a8 	.word	0x200000a8
 8007358:	4ba0      	ldr	r3, [pc, #640]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a9f      	ldr	r2, [pc, #636]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 800735e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007362:	6013      	str	r3, [r2, #0]
 8007364:	4b9d      	ldr	r3, [pc, #628]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a9c      	ldr	r2, [pc, #624]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 800736a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800736e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d013      	beq.n	80073a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007378:	f7fd fbf4 	bl	8004b64 <HAL_GetTick>
 800737c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800737e:	e008      	b.n	8007392 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007380:	f7fd fbf0 	bl	8004b64 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	2b64      	cmp	r3, #100	; 0x64
 800738c:	d901      	bls.n	8007392 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e2b4      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007392:	4b92      	ldr	r3, [pc, #584]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0f0      	beq.n	8007380 <HAL_RCC_OscConfig+0x2a8>
 800739e:	e014      	b.n	80073ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a0:	f7fd fbe0 	bl	8004b64 <HAL_GetTick>
 80073a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80073a6:	e008      	b.n	80073ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073a8:	f7fd fbdc 	bl	8004b64 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b64      	cmp	r3, #100	; 0x64
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e2a0      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80073ba:	4b88      	ldr	r3, [pc, #544]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1f0      	bne.n	80073a8 <HAL_RCC_OscConfig+0x2d0>
 80073c6:	e000      	b.n	80073ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d060      	beq.n	8007498 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	2b04      	cmp	r3, #4
 80073da:	d005      	beq.n	80073e8 <HAL_RCC_OscConfig+0x310>
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	2b0c      	cmp	r3, #12
 80073e0:	d119      	bne.n	8007416 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d116      	bne.n	8007416 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073e8:	4b7c      	ldr	r3, [pc, #496]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d005      	beq.n	8007400 <HAL_RCC_OscConfig+0x328>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e27d      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007400:	4b76      	ldr	r3, [pc, #472]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	061b      	lsls	r3, r3, #24
 800740e:	4973      	ldr	r1, [pc, #460]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 8007410:	4313      	orrs	r3, r2
 8007412:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007414:	e040      	b.n	8007498 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d023      	beq.n	8007466 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800741e:	4b6f      	ldr	r3, [pc, #444]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a6e      	ldr	r2, [pc, #440]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 8007424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800742a:	f7fd fb9b 	bl	8004b64 <HAL_GetTick>
 800742e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007430:	e008      	b.n	8007444 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007432:	f7fd fb97 	bl	8004b64 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b02      	cmp	r3, #2
 800743e:	d901      	bls.n	8007444 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e25b      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007444:	4b65      	ldr	r3, [pc, #404]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800744c:	2b00      	cmp	r3, #0
 800744e:	d0f0      	beq.n	8007432 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007450:	4b62      	ldr	r3, [pc, #392]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	061b      	lsls	r3, r3, #24
 800745e:	495f      	ldr	r1, [pc, #380]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 8007460:	4313      	orrs	r3, r2
 8007462:	604b      	str	r3, [r1, #4]
 8007464:	e018      	b.n	8007498 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007466:	4b5d      	ldr	r3, [pc, #372]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a5c      	ldr	r2, [pc, #368]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 800746c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007472:	f7fd fb77 	bl	8004b64 <HAL_GetTick>
 8007476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007478:	e008      	b.n	800748c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800747a:	f7fd fb73 	bl	8004b64 <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b02      	cmp	r3, #2
 8007486:	d901      	bls.n	800748c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e237      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800748c:	4b53      	ldr	r3, [pc, #332]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1f0      	bne.n	800747a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0308 	and.w	r3, r3, #8
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d03c      	beq.n	800751e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d01c      	beq.n	80074e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074ac:	4b4b      	ldr	r3, [pc, #300]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 80074ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074b2:	4a4a      	ldr	r2, [pc, #296]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 80074b4:	f043 0301 	orr.w	r3, r3, #1
 80074b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074bc:	f7fd fb52 	bl	8004b64 <HAL_GetTick>
 80074c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80074c2:	e008      	b.n	80074d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074c4:	f7fd fb4e 	bl	8004b64 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d901      	bls.n	80074d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e212      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80074d6:	4b41      	ldr	r3, [pc, #260]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 80074d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d0ef      	beq.n	80074c4 <HAL_RCC_OscConfig+0x3ec>
 80074e4:	e01b      	b.n	800751e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074e6:	4b3d      	ldr	r3, [pc, #244]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 80074e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074ec:	4a3b      	ldr	r2, [pc, #236]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 80074ee:	f023 0301 	bic.w	r3, r3, #1
 80074f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074f6:	f7fd fb35 	bl	8004b64 <HAL_GetTick>
 80074fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80074fc:	e008      	b.n	8007510 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074fe:	f7fd fb31 	bl	8004b64 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b02      	cmp	r3, #2
 800750a:	d901      	bls.n	8007510 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e1f5      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007510:	4b32      	ldr	r3, [pc, #200]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 8007512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1ef      	bne.n	80074fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0304 	and.w	r3, r3, #4
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 80a6 	beq.w	8007678 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800752c:	2300      	movs	r3, #0
 800752e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007530:	4b2a      	ldr	r3, [pc, #168]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 8007532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10d      	bne.n	8007558 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800753c:	4b27      	ldr	r3, [pc, #156]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 800753e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007540:	4a26      	ldr	r2, [pc, #152]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 8007542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007546:	6593      	str	r3, [r2, #88]	; 0x58
 8007548:	4b24      	ldr	r3, [pc, #144]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 800754a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800754c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007550:	60bb      	str	r3, [r7, #8]
 8007552:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007554:	2301      	movs	r3, #1
 8007556:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007558:	4b21      	ldr	r3, [pc, #132]	; (80075e0 <HAL_RCC_OscConfig+0x508>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007560:	2b00      	cmp	r3, #0
 8007562:	d118      	bne.n	8007596 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007564:	4b1e      	ldr	r3, [pc, #120]	; (80075e0 <HAL_RCC_OscConfig+0x508>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a1d      	ldr	r2, [pc, #116]	; (80075e0 <HAL_RCC_OscConfig+0x508>)
 800756a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800756e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007570:	f7fd faf8 	bl	8004b64 <HAL_GetTick>
 8007574:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007576:	e008      	b.n	800758a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007578:	f7fd faf4 	bl	8004b64 <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	2b02      	cmp	r3, #2
 8007584:	d901      	bls.n	800758a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e1b8      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800758a:	4b15      	ldr	r3, [pc, #84]	; (80075e0 <HAL_RCC_OscConfig+0x508>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007592:	2b00      	cmp	r3, #0
 8007594:	d0f0      	beq.n	8007578 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d108      	bne.n	80075b0 <HAL_RCC_OscConfig+0x4d8>
 800759e:	4b0f      	ldr	r3, [pc, #60]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 80075a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a4:	4a0d      	ldr	r2, [pc, #52]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 80075a6:	f043 0301 	orr.w	r3, r3, #1
 80075aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80075ae:	e029      	b.n	8007604 <HAL_RCC_OscConfig+0x52c>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	2b05      	cmp	r3, #5
 80075b6:	d115      	bne.n	80075e4 <HAL_RCC_OscConfig+0x50c>
 80075b8:	4b08      	ldr	r3, [pc, #32]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 80075ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075be:	4a07      	ldr	r2, [pc, #28]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 80075c0:	f043 0304 	orr.w	r3, r3, #4
 80075c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80075c8:	4b04      	ldr	r3, [pc, #16]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 80075ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ce:	4a03      	ldr	r2, [pc, #12]	; (80075dc <HAL_RCC_OscConfig+0x504>)
 80075d0:	f043 0301 	orr.w	r3, r3, #1
 80075d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80075d8:	e014      	b.n	8007604 <HAL_RCC_OscConfig+0x52c>
 80075da:	bf00      	nop
 80075dc:	40021000 	.word	0x40021000
 80075e0:	40007000 	.word	0x40007000
 80075e4:	4b9d      	ldr	r3, [pc, #628]	; (800785c <HAL_RCC_OscConfig+0x784>)
 80075e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ea:	4a9c      	ldr	r2, [pc, #624]	; (800785c <HAL_RCC_OscConfig+0x784>)
 80075ec:	f023 0301 	bic.w	r3, r3, #1
 80075f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80075f4:	4b99      	ldr	r3, [pc, #612]	; (800785c <HAL_RCC_OscConfig+0x784>)
 80075f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075fa:	4a98      	ldr	r2, [pc, #608]	; (800785c <HAL_RCC_OscConfig+0x784>)
 80075fc:	f023 0304 	bic.w	r3, r3, #4
 8007600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d016      	beq.n	800763a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800760c:	f7fd faaa 	bl	8004b64 <HAL_GetTick>
 8007610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007612:	e00a      	b.n	800762a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007614:	f7fd faa6 	bl	8004b64 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007622:	4293      	cmp	r3, r2
 8007624:	d901      	bls.n	800762a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e168      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800762a:	4b8c      	ldr	r3, [pc, #560]	; (800785c <HAL_RCC_OscConfig+0x784>)
 800762c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	2b00      	cmp	r3, #0
 8007636:	d0ed      	beq.n	8007614 <HAL_RCC_OscConfig+0x53c>
 8007638:	e015      	b.n	8007666 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800763a:	f7fd fa93 	bl	8004b64 <HAL_GetTick>
 800763e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007640:	e00a      	b.n	8007658 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007642:	f7fd fa8f 	bl	8004b64 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007650:	4293      	cmp	r3, r2
 8007652:	d901      	bls.n	8007658 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e151      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007658:	4b80      	ldr	r3, [pc, #512]	; (800785c <HAL_RCC_OscConfig+0x784>)
 800765a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765e:	f003 0302 	and.w	r3, r3, #2
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1ed      	bne.n	8007642 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007666:	7ffb      	ldrb	r3, [r7, #31]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d105      	bne.n	8007678 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800766c:	4b7b      	ldr	r3, [pc, #492]	; (800785c <HAL_RCC_OscConfig+0x784>)
 800766e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007670:	4a7a      	ldr	r2, [pc, #488]	; (800785c <HAL_RCC_OscConfig+0x784>)
 8007672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007676:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0320 	and.w	r3, r3, #32
 8007680:	2b00      	cmp	r3, #0
 8007682:	d03c      	beq.n	80076fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007688:	2b00      	cmp	r3, #0
 800768a:	d01c      	beq.n	80076c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800768c:	4b73      	ldr	r3, [pc, #460]	; (800785c <HAL_RCC_OscConfig+0x784>)
 800768e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007692:	4a72      	ldr	r2, [pc, #456]	; (800785c <HAL_RCC_OscConfig+0x784>)
 8007694:	f043 0301 	orr.w	r3, r3, #1
 8007698:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800769c:	f7fd fa62 	bl	8004b64 <HAL_GetTick>
 80076a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80076a2:	e008      	b.n	80076b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076a4:	f7fd fa5e 	bl	8004b64 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d901      	bls.n	80076b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e122      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80076b6:	4b69      	ldr	r3, [pc, #420]	; (800785c <HAL_RCC_OscConfig+0x784>)
 80076b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d0ef      	beq.n	80076a4 <HAL_RCC_OscConfig+0x5cc>
 80076c4:	e01b      	b.n	80076fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80076c6:	4b65      	ldr	r3, [pc, #404]	; (800785c <HAL_RCC_OscConfig+0x784>)
 80076c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076cc:	4a63      	ldr	r2, [pc, #396]	; (800785c <HAL_RCC_OscConfig+0x784>)
 80076ce:	f023 0301 	bic.w	r3, r3, #1
 80076d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d6:	f7fd fa45 	bl	8004b64 <HAL_GetTick>
 80076da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80076dc:	e008      	b.n	80076f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076de:	f7fd fa41 	bl	8004b64 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d901      	bls.n	80076f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e105      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80076f0:	4b5a      	ldr	r3, [pc, #360]	; (800785c <HAL_RCC_OscConfig+0x784>)
 80076f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076f6:	f003 0302 	and.w	r3, r3, #2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1ef      	bne.n	80076de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 80f9 	beq.w	80078fa <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770c:	2b02      	cmp	r3, #2
 800770e:	f040 80cf 	bne.w	80078b0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007712:	4b52      	ldr	r3, [pc, #328]	; (800785c <HAL_RCC_OscConfig+0x784>)
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	f003 0203 	and.w	r2, r3, #3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007722:	429a      	cmp	r2, r3
 8007724:	d12c      	bne.n	8007780 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007730:	3b01      	subs	r3, #1
 8007732:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007734:	429a      	cmp	r2, r3
 8007736:	d123      	bne.n	8007780 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007742:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007744:	429a      	cmp	r2, r3
 8007746:	d11b      	bne.n	8007780 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007752:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007754:	429a      	cmp	r2, r3
 8007756:	d113      	bne.n	8007780 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007762:	085b      	lsrs	r3, r3, #1
 8007764:	3b01      	subs	r3, #1
 8007766:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007768:	429a      	cmp	r2, r3
 800776a:	d109      	bne.n	8007780 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007776:	085b      	lsrs	r3, r3, #1
 8007778:	3b01      	subs	r3, #1
 800777a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800777c:	429a      	cmp	r2, r3
 800777e:	d071      	beq.n	8007864 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	2b0c      	cmp	r3, #12
 8007784:	d068      	beq.n	8007858 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007786:	4b35      	ldr	r3, [pc, #212]	; (800785c <HAL_RCC_OscConfig+0x784>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d105      	bne.n	800779e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007792:	4b32      	ldr	r3, [pc, #200]	; (800785c <HAL_RCC_OscConfig+0x784>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e0ac      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80077a2:	4b2e      	ldr	r3, [pc, #184]	; (800785c <HAL_RCC_OscConfig+0x784>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a2d      	ldr	r2, [pc, #180]	; (800785c <HAL_RCC_OscConfig+0x784>)
 80077a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077ac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80077ae:	f7fd f9d9 	bl	8004b64 <HAL_GetTick>
 80077b2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077b4:	e008      	b.n	80077c8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077b6:	f7fd f9d5 	bl	8004b64 <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d901      	bls.n	80077c8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e099      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077c8:	4b24      	ldr	r3, [pc, #144]	; (800785c <HAL_RCC_OscConfig+0x784>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1f0      	bne.n	80077b6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80077d4:	4b21      	ldr	r3, [pc, #132]	; (800785c <HAL_RCC_OscConfig+0x784>)
 80077d6:	68da      	ldr	r2, [r3, #12]
 80077d8:	4b21      	ldr	r3, [pc, #132]	; (8007860 <HAL_RCC_OscConfig+0x788>)
 80077da:	4013      	ands	r3, r2
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80077e4:	3a01      	subs	r2, #1
 80077e6:	0112      	lsls	r2, r2, #4
 80077e8:	4311      	orrs	r1, r2
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80077ee:	0212      	lsls	r2, r2, #8
 80077f0:	4311      	orrs	r1, r2
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80077f6:	0852      	lsrs	r2, r2, #1
 80077f8:	3a01      	subs	r2, #1
 80077fa:	0552      	lsls	r2, r2, #21
 80077fc:	4311      	orrs	r1, r2
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007802:	0852      	lsrs	r2, r2, #1
 8007804:	3a01      	subs	r2, #1
 8007806:	0652      	lsls	r2, r2, #25
 8007808:	4311      	orrs	r1, r2
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800780e:	06d2      	lsls	r2, r2, #27
 8007810:	430a      	orrs	r2, r1
 8007812:	4912      	ldr	r1, [pc, #72]	; (800785c <HAL_RCC_OscConfig+0x784>)
 8007814:	4313      	orrs	r3, r2
 8007816:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007818:	4b10      	ldr	r3, [pc, #64]	; (800785c <HAL_RCC_OscConfig+0x784>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a0f      	ldr	r2, [pc, #60]	; (800785c <HAL_RCC_OscConfig+0x784>)
 800781e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007822:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007824:	4b0d      	ldr	r3, [pc, #52]	; (800785c <HAL_RCC_OscConfig+0x784>)
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	4a0c      	ldr	r2, [pc, #48]	; (800785c <HAL_RCC_OscConfig+0x784>)
 800782a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800782e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007830:	f7fd f998 	bl	8004b64 <HAL_GetTick>
 8007834:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007836:	e008      	b.n	800784a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007838:	f7fd f994 	bl	8004b64 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	2b02      	cmp	r3, #2
 8007844:	d901      	bls.n	800784a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e058      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800784a:	4b04      	ldr	r3, [pc, #16]	; (800785c <HAL_RCC_OscConfig+0x784>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d0f0      	beq.n	8007838 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007856:	e050      	b.n	80078fa <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e04f      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
 800785c:	40021000 	.word	0x40021000
 8007860:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007864:	4b27      	ldr	r3, [pc, #156]	; (8007904 <HAL_RCC_OscConfig+0x82c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d144      	bne.n	80078fa <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007870:	4b24      	ldr	r3, [pc, #144]	; (8007904 <HAL_RCC_OscConfig+0x82c>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a23      	ldr	r2, [pc, #140]	; (8007904 <HAL_RCC_OscConfig+0x82c>)
 8007876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800787a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800787c:	4b21      	ldr	r3, [pc, #132]	; (8007904 <HAL_RCC_OscConfig+0x82c>)
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	4a20      	ldr	r2, [pc, #128]	; (8007904 <HAL_RCC_OscConfig+0x82c>)
 8007882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007886:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007888:	f7fd f96c 	bl	8004b64 <HAL_GetTick>
 800788c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800788e:	e008      	b.n	80078a2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007890:	f7fd f968 	bl	8004b64 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	2b02      	cmp	r3, #2
 800789c:	d901      	bls.n	80078a2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e02c      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078a2:	4b18      	ldr	r3, [pc, #96]	; (8007904 <HAL_RCC_OscConfig+0x82c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0f0      	beq.n	8007890 <HAL_RCC_OscConfig+0x7b8>
 80078ae:	e024      	b.n	80078fa <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	2b0c      	cmp	r3, #12
 80078b4:	d01f      	beq.n	80078f6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078b6:	4b13      	ldr	r3, [pc, #76]	; (8007904 <HAL_RCC_OscConfig+0x82c>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a12      	ldr	r2, [pc, #72]	; (8007904 <HAL_RCC_OscConfig+0x82c>)
 80078bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c2:	f7fd f94f 	bl	8004b64 <HAL_GetTick>
 80078c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078c8:	e008      	b.n	80078dc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078ca:	f7fd f94b 	bl	8004b64 <HAL_GetTick>
 80078ce:	4602      	mov	r2, r0
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d901      	bls.n	80078dc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	e00f      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078dc:	4b09      	ldr	r3, [pc, #36]	; (8007904 <HAL_RCC_OscConfig+0x82c>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1f0      	bne.n	80078ca <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80078e8:	4b06      	ldr	r3, [pc, #24]	; (8007904 <HAL_RCC_OscConfig+0x82c>)
 80078ea:	68da      	ldr	r2, [r3, #12]
 80078ec:	4905      	ldr	r1, [pc, #20]	; (8007904 <HAL_RCC_OscConfig+0x82c>)
 80078ee:	4b06      	ldr	r3, [pc, #24]	; (8007908 <HAL_RCC_OscConfig+0x830>)
 80078f0:	4013      	ands	r3, r2
 80078f2:	60cb      	str	r3, [r1, #12]
 80078f4:	e001      	b.n	80078fa <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e000      	b.n	80078fc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3720      	adds	r7, #32
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	40021000 	.word	0x40021000
 8007908:	feeefffc 	.word	0xfeeefffc

0800790c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e0e7      	b.n	8007af0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007920:	4b75      	ldr	r3, [pc, #468]	; (8007af8 <HAL_RCC_ClockConfig+0x1ec>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0307 	and.w	r3, r3, #7
 8007928:	683a      	ldr	r2, [r7, #0]
 800792a:	429a      	cmp	r2, r3
 800792c:	d910      	bls.n	8007950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800792e:	4b72      	ldr	r3, [pc, #456]	; (8007af8 <HAL_RCC_ClockConfig+0x1ec>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f023 0207 	bic.w	r2, r3, #7
 8007936:	4970      	ldr	r1, [pc, #448]	; (8007af8 <HAL_RCC_ClockConfig+0x1ec>)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	4313      	orrs	r3, r2
 800793c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800793e:	4b6e      	ldr	r3, [pc, #440]	; (8007af8 <HAL_RCC_ClockConfig+0x1ec>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0307 	and.w	r3, r3, #7
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	429a      	cmp	r2, r3
 800794a:	d001      	beq.n	8007950 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e0cf      	b.n	8007af0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0302 	and.w	r3, r3, #2
 8007958:	2b00      	cmp	r3, #0
 800795a:	d010      	beq.n	800797e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	4b66      	ldr	r3, [pc, #408]	; (8007afc <HAL_RCC_ClockConfig+0x1f0>)
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007968:	429a      	cmp	r2, r3
 800796a:	d908      	bls.n	800797e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800796c:	4b63      	ldr	r3, [pc, #396]	; (8007afc <HAL_RCC_ClockConfig+0x1f0>)
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	4960      	ldr	r1, [pc, #384]	; (8007afc <HAL_RCC_ClockConfig+0x1f0>)
 800797a:	4313      	orrs	r3, r2
 800797c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	d04c      	beq.n	8007a24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	2b03      	cmp	r3, #3
 8007990:	d107      	bne.n	80079a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007992:	4b5a      	ldr	r3, [pc, #360]	; (8007afc <HAL_RCC_ClockConfig+0x1f0>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d121      	bne.n	80079e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e0a6      	b.n	8007af0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d107      	bne.n	80079ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80079aa:	4b54      	ldr	r3, [pc, #336]	; (8007afc <HAL_RCC_ClockConfig+0x1f0>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d115      	bne.n	80079e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e09a      	b.n	8007af0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d107      	bne.n	80079d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80079c2:	4b4e      	ldr	r3, [pc, #312]	; (8007afc <HAL_RCC_ClockConfig+0x1f0>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0302 	and.w	r3, r3, #2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d109      	bne.n	80079e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e08e      	b.n	8007af0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079d2:	4b4a      	ldr	r3, [pc, #296]	; (8007afc <HAL_RCC_ClockConfig+0x1f0>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e086      	b.n	8007af0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80079e2:	4b46      	ldr	r3, [pc, #280]	; (8007afc <HAL_RCC_ClockConfig+0x1f0>)
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f023 0203 	bic.w	r2, r3, #3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	4943      	ldr	r1, [pc, #268]	; (8007afc <HAL_RCC_ClockConfig+0x1f0>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079f4:	f7fd f8b6 	bl	8004b64 <HAL_GetTick>
 80079f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079fa:	e00a      	b.n	8007a12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079fc:	f7fd f8b2 	bl	8004b64 <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e06e      	b.n	8007af0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a12:	4b3a      	ldr	r3, [pc, #232]	; (8007afc <HAL_RCC_ClockConfig+0x1f0>)
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f003 020c 	and.w	r2, r3, #12
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d1eb      	bne.n	80079fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0302 	and.w	r3, r3, #2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d010      	beq.n	8007a52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689a      	ldr	r2, [r3, #8]
 8007a34:	4b31      	ldr	r3, [pc, #196]	; (8007afc <HAL_RCC_ClockConfig+0x1f0>)
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d208      	bcs.n	8007a52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a40:	4b2e      	ldr	r3, [pc, #184]	; (8007afc <HAL_RCC_ClockConfig+0x1f0>)
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	492b      	ldr	r1, [pc, #172]	; (8007afc <HAL_RCC_ClockConfig+0x1f0>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a52:	4b29      	ldr	r3, [pc, #164]	; (8007af8 <HAL_RCC_ClockConfig+0x1ec>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0307 	and.w	r3, r3, #7
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d210      	bcs.n	8007a82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a60:	4b25      	ldr	r3, [pc, #148]	; (8007af8 <HAL_RCC_ClockConfig+0x1ec>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f023 0207 	bic.w	r2, r3, #7
 8007a68:	4923      	ldr	r1, [pc, #140]	; (8007af8 <HAL_RCC_ClockConfig+0x1ec>)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a70:	4b21      	ldr	r3, [pc, #132]	; (8007af8 <HAL_RCC_ClockConfig+0x1ec>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0307 	and.w	r3, r3, #7
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d001      	beq.n	8007a82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e036      	b.n	8007af0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0304 	and.w	r3, r3, #4
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d008      	beq.n	8007aa0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a8e:	4b1b      	ldr	r3, [pc, #108]	; (8007afc <HAL_RCC_ClockConfig+0x1f0>)
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	4918      	ldr	r1, [pc, #96]	; (8007afc <HAL_RCC_ClockConfig+0x1f0>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0308 	and.w	r3, r3, #8
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d009      	beq.n	8007ac0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007aac:	4b13      	ldr	r3, [pc, #76]	; (8007afc <HAL_RCC_ClockConfig+0x1f0>)
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	00db      	lsls	r3, r3, #3
 8007aba:	4910      	ldr	r1, [pc, #64]	; (8007afc <HAL_RCC_ClockConfig+0x1f0>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007ac0:	f000 f858 	bl	8007b74 <HAL_RCC_GetSysClockFreq>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	4b0d      	ldr	r3, [pc, #52]	; (8007afc <HAL_RCC_ClockConfig+0x1f0>)
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	091b      	lsrs	r3, r3, #4
 8007acc:	f003 030f 	and.w	r3, r3, #15
 8007ad0:	490b      	ldr	r1, [pc, #44]	; (8007b00 <HAL_RCC_ClockConfig+0x1f4>)
 8007ad2:	5ccb      	ldrb	r3, [r1, r3]
 8007ad4:	f003 031f 	and.w	r3, r3, #31
 8007ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8007adc:	4a09      	ldr	r2, [pc, #36]	; (8007b04 <HAL_RCC_ClockConfig+0x1f8>)
 8007ade:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007ae0:	4b09      	ldr	r3, [pc, #36]	; (8007b08 <HAL_RCC_ClockConfig+0x1fc>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fc ffed 	bl	8004ac4 <HAL_InitTick>
 8007aea:	4603      	mov	r3, r0
 8007aec:	72fb      	strb	r3, [r7, #11]

  return status;
 8007aee:	7afb      	ldrb	r3, [r7, #11]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	40022000 	.word	0x40022000
 8007afc:	40021000 	.word	0x40021000
 8007b00:	08011f74 	.word	0x08011f74
 8007b04:	200000a4 	.word	0x200000a4
 8007b08:	200000a8 	.word	0x200000a8

08007b0c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b08a      	sub	sp, #40	; 0x28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8007b18:	4b15      	ldr	r3, [pc, #84]	; (8007b70 <HAL_RCC_MCOConfig+0x64>)
 8007b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b1c:	4a14      	ldr	r2, [pc, #80]	; (8007b70 <HAL_RCC_MCOConfig+0x64>)
 8007b1e:	f043 0301 	orr.w	r3, r3, #1
 8007b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b24:	4b12      	ldr	r3, [pc, #72]	; (8007b70 <HAL_RCC_MCOConfig+0x64>)
 8007b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b28:	f003 0301 	and.w	r3, r3, #1
 8007b2c:	613b      	str	r3, [r7, #16]
 8007b2e:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8007b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b36:	2302      	movs	r3, #2
 8007b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007b42:	2300      	movs	r3, #0
 8007b44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007b46:	f107 0314 	add.w	r3, r7, #20
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b50:	f7fe f8de 	bl	8005d10 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8007b54:	4b06      	ldr	r3, [pc, #24]	; (8007b70 <HAL_RCC_MCOConfig+0x64>)
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b5c:	68b9      	ldr	r1, [r7, #8]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	430b      	orrs	r3, r1
 8007b62:	4903      	ldr	r1, [pc, #12]	; (8007b70 <HAL_RCC_MCOConfig+0x64>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	608b      	str	r3, [r1, #8]
}
 8007b68:	bf00      	nop
 8007b6a:	3728      	adds	r7, #40	; 0x28
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	40021000 	.word	0x40021000

08007b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b089      	sub	sp, #36	; 0x24
 8007b78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	61fb      	str	r3, [r7, #28]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b82:	4b3e      	ldr	r3, [pc, #248]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f003 030c 	and.w	r3, r3, #12
 8007b8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b8c:	4b3b      	ldr	r3, [pc, #236]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	f003 0303 	and.w	r3, r3, #3
 8007b94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d005      	beq.n	8007ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	2b0c      	cmp	r3, #12
 8007ba0:	d121      	bne.n	8007be6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d11e      	bne.n	8007be6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007ba8:	4b34      	ldr	r3, [pc, #208]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0308 	and.w	r3, r3, #8
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d107      	bne.n	8007bc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007bb4:	4b31      	ldr	r3, [pc, #196]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8007bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bba:	0a1b      	lsrs	r3, r3, #8
 8007bbc:	f003 030f 	and.w	r3, r3, #15
 8007bc0:	61fb      	str	r3, [r7, #28]
 8007bc2:	e005      	b.n	8007bd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007bc4:	4b2d      	ldr	r3, [pc, #180]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	091b      	lsrs	r3, r3, #4
 8007bca:	f003 030f 	and.w	r3, r3, #15
 8007bce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007bd0:	4a2b      	ldr	r2, [pc, #172]	; (8007c80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10d      	bne.n	8007bfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007be4:	e00a      	b.n	8007bfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	2b04      	cmp	r3, #4
 8007bea:	d102      	bne.n	8007bf2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007bec:	4b25      	ldr	r3, [pc, #148]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x110>)
 8007bee:	61bb      	str	r3, [r7, #24]
 8007bf0:	e004      	b.n	8007bfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	2b08      	cmp	r3, #8
 8007bf6:	d101      	bne.n	8007bfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007bf8:	4b23      	ldr	r3, [pc, #140]	; (8007c88 <HAL_RCC_GetSysClockFreq+0x114>)
 8007bfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	2b0c      	cmp	r3, #12
 8007c00:	d134      	bne.n	8007c6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c02:	4b1e      	ldr	r3, [pc, #120]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	f003 0303 	and.w	r3, r3, #3
 8007c0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d003      	beq.n	8007c1a <HAL_RCC_GetSysClockFreq+0xa6>
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d003      	beq.n	8007c20 <HAL_RCC_GetSysClockFreq+0xac>
 8007c18:	e005      	b.n	8007c26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007c1a:	4b1a      	ldr	r3, [pc, #104]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x110>)
 8007c1c:	617b      	str	r3, [r7, #20]
      break;
 8007c1e:	e005      	b.n	8007c2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007c20:	4b19      	ldr	r3, [pc, #100]	; (8007c88 <HAL_RCC_GetSysClockFreq+0x114>)
 8007c22:	617b      	str	r3, [r7, #20]
      break;
 8007c24:	e002      	b.n	8007c2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	617b      	str	r3, [r7, #20]
      break;
 8007c2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c2c:	4b13      	ldr	r3, [pc, #76]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	091b      	lsrs	r3, r3, #4
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	3301      	adds	r3, #1
 8007c38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007c3a:	4b10      	ldr	r3, [pc, #64]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	0a1b      	lsrs	r3, r3, #8
 8007c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	fb03 f202 	mul.w	r2, r3, r2
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007c52:	4b0a      	ldr	r3, [pc, #40]	; (8007c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	0e5b      	lsrs	r3, r3, #25
 8007c58:	f003 0303 	and.w	r3, r3, #3
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	005b      	lsls	r3, r3, #1
 8007c60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007c6c:	69bb      	ldr	r3, [r7, #24]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3724      	adds	r7, #36	; 0x24
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	40021000 	.word	0x40021000
 8007c80:	08011f8c 	.word	0x08011f8c
 8007c84:	00f42400 	.word	0x00f42400
 8007c88:	007a1200 	.word	0x007a1200

08007c8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c90:	4b03      	ldr	r3, [pc, #12]	; (8007ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c92:	681b      	ldr	r3, [r3, #0]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	200000a4 	.word	0x200000a4

08007ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007ca8:	f7ff fff0 	bl	8007c8c <HAL_RCC_GetHCLKFreq>
 8007cac:	4602      	mov	r2, r0
 8007cae:	4b06      	ldr	r3, [pc, #24]	; (8007cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	0a1b      	lsrs	r3, r3, #8
 8007cb4:	f003 0307 	and.w	r3, r3, #7
 8007cb8:	4904      	ldr	r1, [pc, #16]	; (8007ccc <HAL_RCC_GetPCLK1Freq+0x28>)
 8007cba:	5ccb      	ldrb	r3, [r1, r3]
 8007cbc:	f003 031f 	and.w	r3, r3, #31
 8007cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	40021000 	.word	0x40021000
 8007ccc:	08011f84 	.word	0x08011f84

08007cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007cd4:	f7ff ffda 	bl	8007c8c <HAL_RCC_GetHCLKFreq>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	4b06      	ldr	r3, [pc, #24]	; (8007cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	0adb      	lsrs	r3, r3, #11
 8007ce0:	f003 0307 	and.w	r3, r3, #7
 8007ce4:	4904      	ldr	r1, [pc, #16]	; (8007cf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007ce6:	5ccb      	ldrb	r3, [r1, r3]
 8007ce8:	f003 031f 	and.w	r3, r3, #31
 8007cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	40021000 	.word	0x40021000
 8007cf8:	08011f84 	.word	0x08011f84

08007cfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007d04:	2300      	movs	r3, #0
 8007d06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007d08:	4b2a      	ldr	r3, [pc, #168]	; (8007db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007d14:	f7ff f96c 	bl	8006ff0 <HAL_PWREx_GetVoltageRange>
 8007d18:	6178      	str	r0, [r7, #20]
 8007d1a:	e014      	b.n	8007d46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d1c:	4b25      	ldr	r3, [pc, #148]	; (8007db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d20:	4a24      	ldr	r2, [pc, #144]	; (8007db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d26:	6593      	str	r3, [r2, #88]	; 0x58
 8007d28:	4b22      	ldr	r3, [pc, #136]	; (8007db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d30:	60fb      	str	r3, [r7, #12]
 8007d32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007d34:	f7ff f95c 	bl	8006ff0 <HAL_PWREx_GetVoltageRange>
 8007d38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007d3a:	4b1e      	ldr	r3, [pc, #120]	; (8007db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d3e:	4a1d      	ldr	r2, [pc, #116]	; (8007db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d4c:	d10b      	bne.n	8007d66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b80      	cmp	r3, #128	; 0x80
 8007d52:	d919      	bls.n	8007d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2ba0      	cmp	r3, #160	; 0xa0
 8007d58:	d902      	bls.n	8007d60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	613b      	str	r3, [r7, #16]
 8007d5e:	e013      	b.n	8007d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007d60:	2301      	movs	r3, #1
 8007d62:	613b      	str	r3, [r7, #16]
 8007d64:	e010      	b.n	8007d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2b80      	cmp	r3, #128	; 0x80
 8007d6a:	d902      	bls.n	8007d72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	613b      	str	r3, [r7, #16]
 8007d70:	e00a      	b.n	8007d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b80      	cmp	r3, #128	; 0x80
 8007d76:	d102      	bne.n	8007d7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007d78:	2302      	movs	r3, #2
 8007d7a:	613b      	str	r3, [r7, #16]
 8007d7c:	e004      	b.n	8007d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b70      	cmp	r3, #112	; 0x70
 8007d82:	d101      	bne.n	8007d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007d84:	2301      	movs	r3, #1
 8007d86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007d88:	4b0b      	ldr	r3, [pc, #44]	; (8007db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f023 0207 	bic.w	r2, r3, #7
 8007d90:	4909      	ldr	r1, [pc, #36]	; (8007db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007d98:	4b07      	ldr	r3, [pc, #28]	; (8007db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 0307 	and.w	r3, r3, #7
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d001      	beq.n	8007daa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e000      	b.n	8007dac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	40021000 	.word	0x40021000
 8007db8:	40022000 	.word	0x40022000

08007dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007dc8:	2300      	movs	r3, #0
 8007dca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d041      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ddc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007de0:	d02a      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007de2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007de6:	d824      	bhi.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007de8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007dec:	d008      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007dee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007df2:	d81e      	bhi.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00a      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007df8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007dfc:	d010      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007dfe:	e018      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007e00:	4b86      	ldr	r3, [pc, #536]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	4a85      	ldr	r2, [pc, #532]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007e0c:	e015      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	3304      	adds	r3, #4
 8007e12:	2100      	movs	r1, #0
 8007e14:	4618      	mov	r0, r3
 8007e16:	f001 f97d 	bl	8009114 <RCCEx_PLLSAI1_Config>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007e1e:	e00c      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	3320      	adds	r3, #32
 8007e24:	2100      	movs	r1, #0
 8007e26:	4618      	mov	r0, r3
 8007e28:	f001 fa66 	bl	80092f8 <RCCEx_PLLSAI2_Config>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007e30:	e003      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	74fb      	strb	r3, [r7, #19]
      break;
 8007e36:	e000      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007e38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e3a:	7cfb      	ldrb	r3, [r7, #19]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10b      	bne.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e40:	4b76      	ldr	r3, [pc, #472]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e4e:	4973      	ldr	r1, [pc, #460]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007e56:	e001      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e58:	7cfb      	ldrb	r3, [r7, #19]
 8007e5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d041      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007e70:	d02a      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007e72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007e76:	d824      	bhi.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007e78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e7c:	d008      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007e7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e82:	d81e      	bhi.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00a      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e8c:	d010      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007e8e:	e018      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007e90:	4b62      	ldr	r3, [pc, #392]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	4a61      	ldr	r2, [pc, #388]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e9a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007e9c:	e015      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f001 f935 	bl	8009114 <RCCEx_PLLSAI1_Config>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007eae:	e00c      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	3320      	adds	r3, #32
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f001 fa1e 	bl	80092f8 <RCCEx_PLLSAI2_Config>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007ec0:	e003      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	74fb      	strb	r3, [r7, #19]
      break;
 8007ec6:	e000      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007ec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007eca:	7cfb      	ldrb	r3, [r7, #19]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10b      	bne.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007ed0:	4b52      	ldr	r3, [pc, #328]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ede:	494f      	ldr	r1, [pc, #316]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007ee6:	e001      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee8:	7cfb      	ldrb	r3, [r7, #19]
 8007eea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 80a0 	beq.w	800803a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007efa:	2300      	movs	r3, #0
 8007efc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007efe:	4b47      	ldr	r3, [pc, #284]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e000      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00d      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f14:	4b41      	ldr	r3, [pc, #260]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f18:	4a40      	ldr	r2, [pc, #256]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8007f20:	4b3e      	ldr	r3, [pc, #248]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f28:	60bb      	str	r3, [r7, #8]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f30:	4b3b      	ldr	r3, [pc, #236]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a3a      	ldr	r2, [pc, #232]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f3c:	f7fc fe12 	bl	8004b64 <HAL_GetTick>
 8007f40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007f42:	e009      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f44:	f7fc fe0e 	bl	8004b64 <HAL_GetTick>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d902      	bls.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	74fb      	strb	r3, [r7, #19]
        break;
 8007f56:	e005      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007f58:	4b31      	ldr	r3, [pc, #196]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d0ef      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007f64:	7cfb      	ldrb	r3, [r7, #19]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d15c      	bne.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007f6a:	4b2c      	ldr	r3, [pc, #176]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d01f      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d019      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007f88:	4b24      	ldr	r3, [pc, #144]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f94:	4b21      	ldr	r3, [pc, #132]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f9a:	4a20      	ldr	r2, [pc, #128]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007fa4:	4b1d      	ldr	r3, [pc, #116]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007faa:	4a1c      	ldr	r2, [pc, #112]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007fb4:	4a19      	ldr	r2, [pc, #100]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d016      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc6:	f7fc fdcd 	bl	8004b64 <HAL_GetTick>
 8007fca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fcc:	e00b      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fce:	f7fc fdc9 	bl	8004b64 <HAL_GetTick>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d902      	bls.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	74fb      	strb	r3, [r7, #19]
            break;
 8007fe4:	e006      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fe6:	4b0d      	ldr	r3, [pc, #52]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fec:	f003 0302 	and.w	r3, r3, #2
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d0ec      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007ff4:	7cfb      	ldrb	r3, [r7, #19]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10c      	bne.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ffa:	4b08      	ldr	r3, [pc, #32]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008000:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800800a:	4904      	ldr	r1, [pc, #16]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800800c:	4313      	orrs	r3, r2
 800800e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008012:	e009      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008014:	7cfb      	ldrb	r3, [r7, #19]
 8008016:	74bb      	strb	r3, [r7, #18]
 8008018:	e006      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800801a:	bf00      	nop
 800801c:	40021000 	.word	0x40021000
 8008020:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008024:	7cfb      	ldrb	r3, [r7, #19]
 8008026:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008028:	7c7b      	ldrb	r3, [r7, #17]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d105      	bne.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800802e:	4ba6      	ldr	r3, [pc, #664]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008032:	4aa5      	ldr	r2, [pc, #660]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008038:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00a      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008046:	4ba0      	ldr	r3, [pc, #640]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800804c:	f023 0203 	bic.w	r2, r3, #3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008054:	499c      	ldr	r1, [pc, #624]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008056:	4313      	orrs	r3, r2
 8008058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0302 	and.w	r3, r3, #2
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00a      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008068:	4b97      	ldr	r3, [pc, #604]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800806a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800806e:	f023 020c 	bic.w	r2, r3, #12
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008076:	4994      	ldr	r1, [pc, #592]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008078:	4313      	orrs	r3, r2
 800807a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0304 	and.w	r3, r3, #4
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800808a:	4b8f      	ldr	r3, [pc, #572]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800808c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008090:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008098:	498b      	ldr	r1, [pc, #556]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800809a:	4313      	orrs	r3, r2
 800809c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0308 	and.w	r3, r3, #8
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00a      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80080ac:	4b86      	ldr	r3, [pc, #536]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80080ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ba:	4983      	ldr	r1, [pc, #524]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0310 	and.w	r3, r3, #16
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80080ce:	4b7e      	ldr	r3, [pc, #504]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80080d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080dc:	497a      	ldr	r1, [pc, #488]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0320 	and.w	r3, r3, #32
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00a      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80080f0:	4b75      	ldr	r3, [pc, #468]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80080f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080fe:	4972      	ldr	r1, [pc, #456]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008100:	4313      	orrs	r3, r2
 8008102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00a      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008112:	4b6d      	ldr	r3, [pc, #436]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008118:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008120:	4969      	ldr	r1, [pc, #420]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008122:	4313      	orrs	r3, r2
 8008124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00a      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008134:	4b64      	ldr	r3, [pc, #400]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800813a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008142:	4961      	ldr	r1, [pc, #388]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008144:	4313      	orrs	r3, r2
 8008146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00a      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008156:	4b5c      	ldr	r3, [pc, #368]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800815c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008164:	4958      	ldr	r1, [pc, #352]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008166:	4313      	orrs	r3, r2
 8008168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00a      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008178:	4b53      	ldr	r3, [pc, #332]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800817a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800817e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008186:	4950      	ldr	r1, [pc, #320]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008188:	4313      	orrs	r3, r2
 800818a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800819a:	4b4b      	ldr	r3, [pc, #300]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800819c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081a8:	4947      	ldr	r1, [pc, #284]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00a      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081bc:	4b42      	ldr	r3, [pc, #264]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80081be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081c2:	f023 0203 	bic.w	r2, r3, #3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ca:	493f      	ldr	r1, [pc, #252]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d028      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80081de:	4b3a      	ldr	r3, [pc, #232]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80081e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ec:	4936      	ldr	r1, [pc, #216]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081fc:	d106      	bne.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081fe:	4b32      	ldr	r3, [pc, #200]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	4a31      	ldr	r2, [pc, #196]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008208:	60d3      	str	r3, [r2, #12]
 800820a:	e011      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008214:	d10c      	bne.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	3304      	adds	r3, #4
 800821a:	2101      	movs	r1, #1
 800821c:	4618      	mov	r0, r3
 800821e:	f000 ff79 	bl	8009114 <RCCEx_PLLSAI1_Config>
 8008222:	4603      	mov	r3, r0
 8008224:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008226:	7cfb      	ldrb	r3, [r7, #19]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d001      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800822c:	7cfb      	ldrb	r3, [r7, #19]
 800822e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d028      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800823c:	4b22      	ldr	r3, [pc, #136]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800823e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008242:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800824a:	491f      	ldr	r1, [pc, #124]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800824c:	4313      	orrs	r3, r2
 800824e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008256:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800825a:	d106      	bne.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800825c:	4b1a      	ldr	r3, [pc, #104]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	4a19      	ldr	r2, [pc, #100]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008266:	60d3      	str	r3, [r2, #12]
 8008268:	e011      	b.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800826e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008272:	d10c      	bne.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	3304      	adds	r3, #4
 8008278:	2101      	movs	r1, #1
 800827a:	4618      	mov	r0, r3
 800827c:	f000 ff4a 	bl	8009114 <RCCEx_PLLSAI1_Config>
 8008280:	4603      	mov	r3, r0
 8008282:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008284:	7cfb      	ldrb	r3, [r7, #19]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800828a:	7cfb      	ldrb	r3, [r7, #19]
 800828c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d02a      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800829a:	4b0b      	ldr	r3, [pc, #44]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800829c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082a8:	4907      	ldr	r1, [pc, #28]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082b8:	d108      	bne.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082ba:	4b03      	ldr	r3, [pc, #12]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	4a02      	ldr	r2, [pc, #8]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80082c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082c4:	60d3      	str	r3, [r2, #12]
 80082c6:	e013      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80082c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082d4:	d10c      	bne.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	3304      	adds	r3, #4
 80082da:	2101      	movs	r1, #1
 80082dc:	4618      	mov	r0, r3
 80082de:	f000 ff19 	bl	8009114 <RCCEx_PLLSAI1_Config>
 80082e2:	4603      	mov	r3, r0
 80082e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80082e6:	7cfb      	ldrb	r3, [r7, #19]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80082ec:	7cfb      	ldrb	r3, [r7, #19]
 80082ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d02f      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80082fc:	4b2c      	ldr	r3, [pc, #176]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80082fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008302:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800830a:	4929      	ldr	r1, [pc, #164]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800830c:	4313      	orrs	r3, r2
 800830e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800831a:	d10d      	bne.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3304      	adds	r3, #4
 8008320:	2102      	movs	r1, #2
 8008322:	4618      	mov	r0, r3
 8008324:	f000 fef6 	bl	8009114 <RCCEx_PLLSAI1_Config>
 8008328:	4603      	mov	r3, r0
 800832a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800832c:	7cfb      	ldrb	r3, [r7, #19]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d014      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8008332:	7cfb      	ldrb	r3, [r7, #19]
 8008334:	74bb      	strb	r3, [r7, #18]
 8008336:	e011      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800833c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008340:	d10c      	bne.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	3320      	adds	r3, #32
 8008346:	2102      	movs	r1, #2
 8008348:	4618      	mov	r0, r3
 800834a:	f000 ffd5 	bl	80092f8 <RCCEx_PLLSAI2_Config>
 800834e:	4603      	mov	r3, r0
 8008350:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008352:	7cfb      	ldrb	r3, [r7, #19]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d001      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8008358:	7cfb      	ldrb	r3, [r7, #19]
 800835a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00b      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008368:	4b11      	ldr	r3, [pc, #68]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800836a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800836e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008378:	490d      	ldr	r1, [pc, #52]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800837a:	4313      	orrs	r3, r2
 800837c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00b      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800838c:	4b08      	ldr	r3, [pc, #32]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800838e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008392:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800839c:	4904      	ldr	r1, [pc, #16]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80083a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3718      	adds	r7, #24
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	40021000 	.word	0x40021000

080083b4 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         clocks(SAI1, SAI2, LPTIM1, LPTIM2, I2C1, I2C2, I2C3, I2C4, LPUART1,
  *         USART1, USART2, USART3, UART4, UART5, RTC, ADCx, DFSDMx, SWPMI1, USB, SDMMC1 and RNG).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
                                        RCC_PERIPHCLK_SDMMC1  | RCC_PERIPHCLK_RNG    | RCC_PERIPHCLK_ADC    | RCC_PERIPHCLK_SWPMI1 | RCC_PERIPHCLK_DFSDM1 | \
                                        RCC_PERIPHCLK_RTC ;

#elif defined(STM32L496xx) || defined(STM32L4A6xx)

  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a77      	ldr	r2, [pc, #476]	; (800859c <HAL_RCCEx_GetPeriphCLKConfig+0x1e8>)
 80083c0:	601a      	str	r2, [r3, #0]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Get the PLLSAI1 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 80083c2:	4b77      	ldr	r3, [pc, #476]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	f003 0203 	and.w	r2, r3, #3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	605a      	str	r2, [r3, #4]
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80083ce:	4b74      	ldr	r3, [pc, #464]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	091b      	lsrs	r3, r3, #4
 80083d4:	f003 0307 	and.w	r3, r3, #7
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	609a      	str	r2, [r3, #8]
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80083de:	4b70      	ldr	r3, [pc, #448]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	0a1b      	lsrs	r3, r3, #8
 80083e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 80083ec:	4b6c      	ldr	r3, [pc, #432]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	0c5b      	lsrs	r3, r3, #17
 80083f2:	011b      	lsls	r3, r3, #4
 80083f4:	f003 0310 	and.w	r3, r3, #16
 80083f8:	1dda      	adds	r2, r3, #7
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 80083fe:	4b68      	ldr	r3, [pc, #416]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	0d5b      	lsrs	r3, r3, #21
 8008404:	f003 0303 	and.w	r3, r3, #3
 8008408:	3301      	adds	r3, #1
 800840a:	005a      	lsls	r2, r3, #1
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 8008410:	4b63      	ldr	r3, [pc, #396]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	0e5b      	lsrs	r3, r3, #25
 8008416:	f003 0303 	and.w	r3, r3, #3
 800841a:	3301      	adds	r3, #1
 800841c:	005a      	lsls	r2, r3, #1
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	619a      	str	r2, [r3, #24]

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Get the PLLSAI2 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	621a      	str	r2, [r3, #32]
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2M = (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	689a      	ldr	r2, [r3, #8]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008432:	4b5b      	ldr	r3, [pc, #364]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	0a1b      	lsrs	r3, r3, #8
 8008438:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 8008440:	4b57      	ldr	r3, [pc, #348]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008442:	695b      	ldr	r3, [r3, #20]
 8008444:	0c5b      	lsrs	r3, r3, #17
 8008446:	011b      	lsls	r3, r3, #4
 8008448:	f003 0310 	and.w	r3, r3, #16
 800844c:	1dda      	adds	r2, r3, #7
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2Q = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2Q) >> RCC_PLLSAI2CFGR_PLLSAI2Q_Pos) + 1U) * 2U;
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 8008452:	4b53      	ldr	r3, [pc, #332]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	0e5b      	lsrs	r3, r3, #25
 8008458:	f003 0303 	and.w	r3, r3, #3
 800845c:	3301      	adds	r3, #1
 800845e:	005a      	lsls	r2, r3, #1
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	631a      	str	r2, [r3, #48]	; 0x30

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 8008464:	4b4e      	ldr	r3, [pc, #312]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800846a:	f003 0203 	and.w	r2, r3, #3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 8008472:	4b4b      	ldr	r3, [pc, #300]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008478:	f003 020c 	and.w	r2, r3, #12
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	63da      	str	r2, [r3, #60]	; 0x3c

#if defined(USART3)
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 8008480:	4b47      	ldr	r3, [pc, #284]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008486:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* USART3 */

#if defined(UART4)
  /* Get the UART4 clock source ----------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 800848e:	4b44      	ldr	r3, [pc, #272]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008494:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* UART4 */

#if defined(UART5)
  /* Get the UART5 clock source ----------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 800849c:	4b40      	ldr	r3, [pc, #256]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800849e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084a2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* UART5 */

  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 80084aa:	4b3d      	ldr	r3, [pc, #244]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80084ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b0:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 80084b8:	4b39      	ldr	r3, [pc, #228]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80084ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084be:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	651a      	str	r2, [r3, #80]	; 0x50

#if defined(I2C2)
   /* Get the I2C2 clock source ----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 80084c6:	4b36      	ldr	r3, [pc, #216]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80084c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084cc:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* I2C2 */

  /* Get the I2C3 clock source -----------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 80084d4:	4b32      	ldr	r3, [pc, #200]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80084d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(I2C4)
  /* Get the I2C4 clock source -----------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection    = __HAL_RCC_GET_I2C4_SOURCE();
 80084e2:	4b2f      	ldr	r3, [pc, #188]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80084e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084e8:	f003 0203 	and.w	r2, r3, #3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* I2C4 */

  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 80084f0:	4b2b      	ldr	r3, [pc, #172]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 80084f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f6:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 80084fe:	4b28      	ldr	r3, [pc, #160]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008504:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(SAI1)
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 800850c:	4b24      	ldr	r3, [pc, #144]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800850e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008512:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	669a      	str	r2, [r3, #104]	; 0x68
#endif /* SAI1 */

#if defined(SAI2)
  /* Get the SAI2 clock source -----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 800851a:	4b21      	ldr	r3, [pc, #132]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800851c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008520:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	66da      	str	r2, [r3, #108]	; 0x6c
#endif /* SAI2 */

  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 8008528:	4b1d      	ldr	r3, [pc, #116]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800852a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800852e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#if defined(USB_OTG_FS) || defined(USB)
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 8008538:	4b19      	ldr	r3, [pc, #100]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 800853a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800853e:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)
  /* Get the SDMMC1 clock source ---------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008546:	4b16      	ldr	r3, [pc, #88]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800854c:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* SDMMC1 */

  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 8008554:	4b12      	ldr	r3, [pc, #72]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800855a:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	679a      	str	r2, [r3, #120]	; 0x78

#if !defined(STM32L412xx) && !defined(STM32L422xx)
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 8008562:	4b0f      	ldr	r3, [pc, #60]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008568:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 8008570:	4b0b      	ldr	r3, [pc, #44]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008576:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 8008580:	4b07      	ldr	r3, [pc, #28]	; (80085a0 <HAL_RCCEx_GetPeriphCLKConfig+0x1ec>)
 8008582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008586:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OctoSPIclock source --------------------------------------------*/
  PeriphClkInit->OspiClockSelection = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	001fffff 	.word	0x001fffff
 80085a0:	40021000 	.word	0x40021000

080085a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b088      	sub	sp, #32
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80085ac:	2300      	movs	r3, #0
 80085ae:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085b6:	d13e      	bne.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80085b8:	4bb4      	ldr	r3, [pc, #720]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80085ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085c2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085ca:	d028      	beq.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085d2:	f200 858c 	bhi.w	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085dc:	d005      	beq.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085e4:	d00e      	beq.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80085e6:	f000 bd82 	b.w	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80085ea:	4ba8      	ldr	r3, [pc, #672]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80085ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	f040 857c 	bne.w	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 80085fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085fe:	61fb      	str	r3, [r7, #28]
      break;
 8008600:	f000 bd77 	b.w	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008604:	4ba1      	ldr	r3, [pc, #644]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800860a:	f003 0302 	and.w	r3, r3, #2
 800860e:	2b02      	cmp	r3, #2
 8008610:	f040 8571 	bne.w	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 8008614:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008618:	61fb      	str	r3, [r7, #28]
      break;
 800861a:	f000 bd6c 	b.w	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800861e:	4b9b      	ldr	r3, [pc, #620]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800862a:	f040 8566 	bne.w	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 800862e:	4b98      	ldr	r3, [pc, #608]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8008630:	61fb      	str	r3, [r7, #28]
      break;
 8008632:	f000 bd62 	b.w	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008636:	4b95      	ldr	r3, [pc, #596]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	f003 0303 	and.w	r3, r3, #3
 800863e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	2b03      	cmp	r3, #3
 8008644:	d036      	beq.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	2b03      	cmp	r3, #3
 800864a:	d840      	bhi.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d003      	beq.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	2b02      	cmp	r3, #2
 8008656:	d020      	beq.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8008658:	e039      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800865a:	4b8c      	ldr	r3, [pc, #560]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 0302 	and.w	r3, r3, #2
 8008662:	2b02      	cmp	r3, #2
 8008664:	d116      	bne.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008666:	4b89      	ldr	r3, [pc, #548]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0308 	and.w	r3, r3, #8
 800866e:	2b00      	cmp	r3, #0
 8008670:	d005      	beq.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8008672:	4b86      	ldr	r3, [pc, #536]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	091b      	lsrs	r3, r3, #4
 8008678:	f003 030f 	and.w	r3, r3, #15
 800867c:	e005      	b.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800867e:	4b83      	ldr	r3, [pc, #524]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008684:	0a1b      	lsrs	r3, r3, #8
 8008686:	f003 030f 	and.w	r3, r3, #15
 800868a:	4a82      	ldr	r2, [pc, #520]	; (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800868c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008690:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008692:	e01f      	b.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8008694:	2300      	movs	r3, #0
 8008696:	61bb      	str	r3, [r7, #24]
      break;
 8008698:	e01c      	b.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800869a:	4b7c      	ldr	r3, [pc, #496]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086a6:	d102      	bne.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80086a8:	4b7b      	ldr	r3, [pc, #492]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80086aa:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80086ac:	e012      	b.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	61bb      	str	r3, [r7, #24]
      break;
 80086b2:	e00f      	b.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086b4:	4b75      	ldr	r3, [pc, #468]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086c0:	d102      	bne.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80086c2:	4b76      	ldr	r3, [pc, #472]	; (800889c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80086c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80086c6:	e005      	b.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80086c8:	2300      	movs	r3, #0
 80086ca:	61bb      	str	r3, [r7, #24]
      break;
 80086cc:	e002      	b.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80086ce:	2300      	movs	r3, #0
 80086d0:	61bb      	str	r3, [r7, #24]
      break;
 80086d2:	bf00      	nop
    }

    switch(PeriphClk)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086da:	f000 842a 	beq.w	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086e4:	f200 850b 	bhi.w	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80086ee:	f000 80df 	beq.w	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80086f8:	f200 8501 	bhi.w	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008702:	f000 80d5 	beq.w	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800870c:	f200 84f7 	bhi.w	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008716:	f000 8377 	beq.w	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008720:	f200 84ed 	bhi.w	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800872a:	f000 84c3 	beq.w	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008734:	f200 84e3 	bhi.w	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800873e:	f000 82e6 	beq.w	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008748:	f200 84d9 	bhi.w	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008752:	f000 80ad 	beq.w	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800875c:	f200 84cf 	bhi.w	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008766:	f000 809b 	beq.w	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008770:	f200 84c5 	bhi.w	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800877a:	d07f      	beq.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008782:	f200 84bc 	bhi.w	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800878c:	f000 8448 	beq.w	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008796:	f200 84b2 	bhi.w	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087a0:	f000 83f0 	beq.w	8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087aa:	f200 84a8 	bhi.w	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087b4:	f000 8391 	beq.w	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087be:	f200 849e 	bhi.w	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2b80      	cmp	r3, #128	; 0x80
 80087c6:	f000 835c 	beq.w	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2b80      	cmp	r3, #128	; 0x80
 80087ce:	f200 8496 	bhi.w	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b20      	cmp	r3, #32
 80087d6:	d84b      	bhi.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 848f 	beq.w	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	3b01      	subs	r3, #1
 80087e4:	2b1f      	cmp	r3, #31
 80087e6:	f200 848a 	bhi.w	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80087ea:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 80087ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f0:	08008a07 	.word	0x08008a07
 80087f4:	08008a77 	.word	0x08008a77
 80087f8:	080090ff 	.word	0x080090ff
 80087fc:	08008b0b 	.word	0x08008b0b
 8008800:	080090ff 	.word	0x080090ff
 8008804:	080090ff 	.word	0x080090ff
 8008808:	080090ff 	.word	0x080090ff
 800880c:	08008b93 	.word	0x08008b93
 8008810:	080090ff 	.word	0x080090ff
 8008814:	080090ff 	.word	0x080090ff
 8008818:	080090ff 	.word	0x080090ff
 800881c:	080090ff 	.word	0x080090ff
 8008820:	080090ff 	.word	0x080090ff
 8008824:	080090ff 	.word	0x080090ff
 8008828:	080090ff 	.word	0x080090ff
 800882c:	08008c0b 	.word	0x08008c0b
 8008830:	080090ff 	.word	0x080090ff
 8008834:	080090ff 	.word	0x080090ff
 8008838:	080090ff 	.word	0x080090ff
 800883c:	080090ff 	.word	0x080090ff
 8008840:	080090ff 	.word	0x080090ff
 8008844:	080090ff 	.word	0x080090ff
 8008848:	080090ff 	.word	0x080090ff
 800884c:	080090ff 	.word	0x080090ff
 8008850:	080090ff 	.word	0x080090ff
 8008854:	080090ff 	.word	0x080090ff
 8008858:	080090ff 	.word	0x080090ff
 800885c:	080090ff 	.word	0x080090ff
 8008860:	080090ff 	.word	0x080090ff
 8008864:	080090ff 	.word	0x080090ff
 8008868:	080090ff 	.word	0x080090ff
 800886c:	08008c8d 	.word	0x08008c8d
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b40      	cmp	r3, #64	; 0x40
 8008874:	f000 82d9 	beq.w	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8008878:	f000 bc41 	b.w	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800887c:	69b9      	ldr	r1, [r7, #24]
 800887e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008882:	f000 fe15 	bl	80094b0 <RCCEx_GetSAIxPeriphCLKFreq>
 8008886:	61f8      	str	r0, [r7, #28]
      break;
 8008888:	f000 bc3a 	b.w	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 800888c:	40021000 	.word	0x40021000
 8008890:	0003d090 	.word	0x0003d090
 8008894:	08011f8c 	.word	0x08011f8c
 8008898:	00f42400 	.word	0x00f42400
 800889c:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80088a0:	69b9      	ldr	r1, [r7, #24]
 80088a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80088a6:	f000 fe03 	bl	80094b0 <RCCEx_GetSAIxPeriphCLKFreq>
 80088aa:	61f8      	str	r0, [r7, #28]
      break;
 80088ac:	f000 bc28 	b.w	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80088b0:	4ba6      	ldr	r3, [pc, #664]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80088b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088b6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80088ba:	613b      	str	r3, [r7, #16]
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80088c2:	d015      	beq.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80088ca:	f200 8092 	bhi.w	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088d4:	d029      	beq.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088dc:	f200 8089 	bhi.w	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d07b      	beq.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088ec:	d04a      	beq.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 80088ee:	e080      	b.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80088f0:	4b96      	ldr	r3, [pc, #600]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0302 	and.w	r3, r3, #2
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d17c      	bne.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80088fc:	4b93      	ldr	r3, [pc, #588]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0308 	and.w	r3, r3, #8
 8008904:	2b00      	cmp	r3, #0
 8008906:	d005      	beq.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8008908:	4b90      	ldr	r3, [pc, #576]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	091b      	lsrs	r3, r3, #4
 800890e:	f003 030f 	and.w	r3, r3, #15
 8008912:	e005      	b.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8008914:	4b8d      	ldr	r3, [pc, #564]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800891a:	0a1b      	lsrs	r3, r3, #8
 800891c:	f003 030f 	and.w	r3, r3, #15
 8008920:	4a8b      	ldr	r2, [pc, #556]	; (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8008922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008926:	61fb      	str	r3, [r7, #28]
          break;
 8008928:	e065      	b.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800892a:	4b88      	ldr	r3, [pc, #544]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008932:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008936:	d160      	bne.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8008938:	4b84      	ldr	r3, [pc, #528]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008944:	d159      	bne.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008946:	4b81      	ldr	r3, [pc, #516]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	0a1b      	lsrs	r3, r3, #8
 800894c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008950:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	fb03 f202 	mul.w	r2, r3, r2
 800895a:	4b7c      	ldr	r3, [pc, #496]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	091b      	lsrs	r3, r3, #4
 8008960:	f003 0307 	and.w	r3, r3, #7
 8008964:	3301      	adds	r3, #1
 8008966:	fbb2 f3f3 	udiv	r3, r2, r3
 800896a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800896c:	4b77      	ldr	r3, [pc, #476]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	0d5b      	lsrs	r3, r3, #21
 8008972:	f003 0303 	and.w	r3, r3, #3
 8008976:	3301      	adds	r3, #1
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	69ba      	ldr	r2, [r7, #24]
 800897c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008980:	61fb      	str	r3, [r7, #28]
          break;
 8008982:	e03a      	b.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8008984:	4b71      	ldr	r3, [pc, #452]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800898c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008990:	d135      	bne.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8008992:	4b6e      	ldr	r3, [pc, #440]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800899a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800899e:	d12e      	bne.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80089a0:	4b6a      	ldr	r3, [pc, #424]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	0a1b      	lsrs	r3, r3, #8
 80089a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089aa:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	fb03 f202 	mul.w	r2, r3, r2
 80089b4:	4b65      	ldr	r3, [pc, #404]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	091b      	lsrs	r3, r3, #4
 80089ba:	f003 0307 	and.w	r3, r3, #7
 80089be:	3301      	adds	r3, #1
 80089c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80089c6:	4b61      	ldr	r3, [pc, #388]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	0d5b      	lsrs	r3, r3, #21
 80089cc:	f003 0303 	and.w	r3, r3, #3
 80089d0:	3301      	adds	r3, #1
 80089d2:	005b      	lsls	r3, r3, #1
 80089d4:	69ba      	ldr	r2, [r7, #24]
 80089d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089da:	61fb      	str	r3, [r7, #28]
          break;
 80089dc:	e00f      	b.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80089de:	4b5b      	ldr	r3, [pc, #364]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80089e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089e4:	f003 0302 	and.w	r3, r3, #2
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d10a      	bne.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 80089ec:	4b59      	ldr	r3, [pc, #356]	; (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 80089ee:	61fb      	str	r3, [r7, #28]
          break;
 80089f0:	e007      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 80089f2:	bf00      	nop
 80089f4:	e384      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80089f6:	bf00      	nop
 80089f8:	e382      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80089fa:	bf00      	nop
 80089fc:	e380      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80089fe:	bf00      	nop
 8008a00:	e37e      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008a02:	bf00      	nop
        break;
 8008a04:	e37c      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008a06:	4b51      	ldr	r3, [pc, #324]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a0c:	f003 0303 	and.w	r3, r3, #3
 8008a10:	613b      	str	r3, [r7, #16]
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	2b03      	cmp	r3, #3
 8008a16:	d828      	bhi.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 8008a18:	a201      	add	r2, pc, #4	; (adr r2, 8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8008a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1e:	bf00      	nop
 8008a20:	08008a31 	.word	0x08008a31
 8008a24:	08008a39 	.word	0x08008a39
 8008a28:	08008a41 	.word	0x08008a41
 8008a2c:	08008a55 	.word	0x08008a55
          frequency = HAL_RCC_GetPCLK2Freq();
 8008a30:	f7ff f94e 	bl	8007cd0 <HAL_RCC_GetPCLK2Freq>
 8008a34:	61f8      	str	r0, [r7, #28]
          break;
 8008a36:	e01d      	b.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 8008a38:	f7ff f89c 	bl	8007b74 <HAL_RCC_GetSysClockFreq>
 8008a3c:	61f8      	str	r0, [r7, #28]
          break;
 8008a3e:	e019      	b.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a40:	4b42      	ldr	r3, [pc, #264]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a4c:	d10f      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 8008a4e:	4b42      	ldr	r3, [pc, #264]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8008a50:	61fb      	str	r3, [r7, #28]
          break;
 8008a52:	e00c      	b.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008a54:	4b3d      	ldr	r3, [pc, #244]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d107      	bne.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 8008a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a66:	61fb      	str	r3, [r7, #28]
          break;
 8008a68:	e003      	b.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 8008a6a:	bf00      	nop
 8008a6c:	e348      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008a6e:	bf00      	nop
 8008a70:	e346      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008a72:	bf00      	nop
        break;
 8008a74:	e344      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008a76:	4b35      	ldr	r3, [pc, #212]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a7c:	f003 030c 	and.w	r3, r3, #12
 8008a80:	613b      	str	r3, [r7, #16]
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	2b0c      	cmp	r3, #12
 8008a86:	d83a      	bhi.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 8008a88:	a201      	add	r2, pc, #4	; (adr r2, 8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8e:	bf00      	nop
 8008a90:	08008ac5 	.word	0x08008ac5
 8008a94:	08008aff 	.word	0x08008aff
 8008a98:	08008aff 	.word	0x08008aff
 8008a9c:	08008aff 	.word	0x08008aff
 8008aa0:	08008acd 	.word	0x08008acd
 8008aa4:	08008aff 	.word	0x08008aff
 8008aa8:	08008aff 	.word	0x08008aff
 8008aac:	08008aff 	.word	0x08008aff
 8008ab0:	08008ad5 	.word	0x08008ad5
 8008ab4:	08008aff 	.word	0x08008aff
 8008ab8:	08008aff 	.word	0x08008aff
 8008abc:	08008aff 	.word	0x08008aff
 8008ac0:	08008ae9 	.word	0x08008ae9
          frequency = HAL_RCC_GetPCLK1Freq();
 8008ac4:	f7ff f8ee 	bl	8007ca4 <HAL_RCC_GetPCLK1Freq>
 8008ac8:	61f8      	str	r0, [r7, #28]
          break;
 8008aca:	e01d      	b.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 8008acc:	f7ff f852 	bl	8007b74 <HAL_RCC_GetSysClockFreq>
 8008ad0:	61f8      	str	r0, [r7, #28]
          break;
 8008ad2:	e019      	b.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ad4:	4b1d      	ldr	r3, [pc, #116]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ae0:	d10f      	bne.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 8008ae2:	4b1d      	ldr	r3, [pc, #116]	; (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8008ae4:	61fb      	str	r3, [r7, #28]
          break;
 8008ae6:	e00c      	b.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008ae8:	4b18      	ldr	r3, [pc, #96]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aee:	f003 0302 	and.w	r3, r3, #2
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d107      	bne.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 8008af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008afa:	61fb      	str	r3, [r7, #28]
          break;
 8008afc:	e003      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 8008afe:	bf00      	nop
 8008b00:	e2fe      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008b02:	bf00      	nop
 8008b04:	e2fc      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008b06:	bf00      	nop
        break;
 8008b08:	e2fa      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008b0a:	4b10      	ldr	r3, [pc, #64]	; (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008b14:	613b      	str	r3, [r7, #16]
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	2b30      	cmp	r3, #48	; 0x30
 8008b1a:	d029      	beq.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	2b30      	cmp	r3, #48	; 0x30
 8008b20:	d831      	bhi.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	2b20      	cmp	r3, #32
 8008b26:	d019      	beq.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	2b20      	cmp	r3, #32
 8008b2c:	d82b      	bhi.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d003      	beq.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	2b10      	cmp	r3, #16
 8008b38:	d004      	beq.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 8008b3a:	e024      	b.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b3c:	f7ff f8b2 	bl	8007ca4 <HAL_RCC_GetPCLK1Freq>
 8008b40:	61f8      	str	r0, [r7, #28]
          break;
 8008b42:	e025      	b.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8008b44:	f7ff f816 	bl	8007b74 <HAL_RCC_GetSysClockFreq>
 8008b48:	61f8      	str	r0, [r7, #28]
          break;
 8008b4a:	e021      	b.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8008b4c:	40021000 	.word	0x40021000
 8008b50:	08011f8c 	.word	0x08011f8c
 8008b54:	02dc6c00 	.word	0x02dc6c00
 8008b58:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b5c:	4b8f      	ldr	r3, [pc, #572]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b68:	d10f      	bne.n	8008b8a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 8008b6a:	4b8d      	ldr	r3, [pc, #564]	; (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8008b6c:	61fb      	str	r3, [r7, #28]
          break;
 8008b6e:	e00c      	b.n	8008b8a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008b70:	4b8a      	ldr	r3, [pc, #552]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d107      	bne.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 8008b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b82:	61fb      	str	r3, [r7, #28]
          break;
 8008b84:	e003      	b.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 8008b86:	bf00      	nop
 8008b88:	e2ba      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008b8a:	bf00      	nop
 8008b8c:	e2b8      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008b8e:	bf00      	nop
        break;
 8008b90:	e2b6      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008b92:	4b82      	ldr	r3, [pc, #520]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008b9c:	613b      	str	r3, [r7, #16]
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	2bc0      	cmp	r3, #192	; 0xc0
 8008ba2:	d021      	beq.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	2bc0      	cmp	r3, #192	; 0xc0
 8008ba8:	d829      	bhi.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	2b80      	cmp	r3, #128	; 0x80
 8008bae:	d011      	beq.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	2b80      	cmp	r3, #128	; 0x80
 8008bb4:	d823      	bhi.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d003      	beq.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	2b40      	cmp	r3, #64	; 0x40
 8008bc0:	d004      	beq.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 8008bc2:	e01c      	b.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008bc4:	f7ff f86e 	bl	8007ca4 <HAL_RCC_GetPCLK1Freq>
 8008bc8:	61f8      	str	r0, [r7, #28]
          break;
 8008bca:	e01d      	b.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 8008bcc:	f7fe ffd2 	bl	8007b74 <HAL_RCC_GetSysClockFreq>
 8008bd0:	61f8      	str	r0, [r7, #28]
          break;
 8008bd2:	e019      	b.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bd4:	4b71      	ldr	r3, [pc, #452]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008be0:	d10f      	bne.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 8008be2:	4b6f      	ldr	r3, [pc, #444]	; (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8008be4:	61fb      	str	r3, [r7, #28]
          break;
 8008be6:	e00c      	b.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008be8:	4b6c      	ldr	r3, [pc, #432]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bee:	f003 0302 	and.w	r3, r3, #2
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d107      	bne.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 8008bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bfa:	61fb      	str	r3, [r7, #28]
          break;
 8008bfc:	e003      	b.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 8008bfe:	bf00      	nop
 8008c00:	e27e      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008c02:	bf00      	nop
 8008c04:	e27c      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008c06:	bf00      	nop
        break;
 8008c08:	e27a      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008c0a:	4b64      	ldr	r3, [pc, #400]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c14:	613b      	str	r3, [r7, #16]
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c1c:	d025      	beq.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c24:	d82c      	bhi.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c2c:	d013      	beq.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c34:	d824      	bhi.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d004      	beq.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c42:	d004      	beq.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 8008c44:	e01c      	b.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008c46:	f7ff f82d 	bl	8007ca4 <HAL_RCC_GetPCLK1Freq>
 8008c4a:	61f8      	str	r0, [r7, #28]
          break;
 8008c4c:	e01d      	b.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 8008c4e:	f7fe ff91 	bl	8007b74 <HAL_RCC_GetSysClockFreq>
 8008c52:	61f8      	str	r0, [r7, #28]
          break;
 8008c54:	e019      	b.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c56:	4b51      	ldr	r3, [pc, #324]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c62:	d10f      	bne.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 8008c64:	4b4e      	ldr	r3, [pc, #312]	; (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8008c66:	61fb      	str	r3, [r7, #28]
          break;
 8008c68:	e00c      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008c6a:	4b4c      	ldr	r3, [pc, #304]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c70:	f003 0302 	and.w	r3, r3, #2
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d107      	bne.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 8008c78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c7c:	61fb      	str	r3, [r7, #28]
          break;
 8008c7e:	e003      	b.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 8008c80:	bf00      	nop
 8008c82:	e23d      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008c84:	bf00      	nop
 8008c86:	e23b      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008c88:	bf00      	nop
        break;
 8008c8a:	e239      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008c8c:	4b43      	ldr	r3, [pc, #268]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c92:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c96:	613b      	str	r3, [r7, #16]
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c9e:	d025      	beq.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ca6:	d82c      	bhi.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cae:	d013      	beq.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cb6:	d824      	bhi.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d004      	beq.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cc4:	d004      	beq.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 8008cc6:	e01c      	b.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008cc8:	f7fe ffec 	bl	8007ca4 <HAL_RCC_GetPCLK1Freq>
 8008ccc:	61f8      	str	r0, [r7, #28]
          break;
 8008cce:	e01d      	b.n	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 8008cd0:	f7fe ff50 	bl	8007b74 <HAL_RCC_GetSysClockFreq>
 8008cd4:	61f8      	str	r0, [r7, #28]
          break;
 8008cd6:	e019      	b.n	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008cd8:	4b30      	ldr	r3, [pc, #192]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ce4:	d10f      	bne.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 8008ce6:	4b2e      	ldr	r3, [pc, #184]	; (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8008ce8:	61fb      	str	r3, [r7, #28]
          break;
 8008cea:	e00c      	b.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008cec:	4b2b      	ldr	r3, [pc, #172]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cf2:	f003 0302 	and.w	r3, r3, #2
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d107      	bne.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 8008cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cfe:	61fb      	str	r3, [r7, #28]
          break;
 8008d00:	e003      	b.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 8008d02:	bf00      	nop
 8008d04:	e1fc      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008d06:	bf00      	nop
 8008d08:	e1fa      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008d0a:	bf00      	nop
        break;
 8008d0c:	e1f8      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008d0e:	4b23      	ldr	r3, [pc, #140]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d18:	613b      	str	r3, [r7, #16]
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d20:	d00c      	beq.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d28:	d868      	bhi.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d30:	d008      	beq.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d38:	d034      	beq.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 8008d3a:	e05f      	b.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 8008d3c:	f7fe ff1a 	bl	8007b74 <HAL_RCC_GetSysClockFreq>
 8008d40:	61f8      	str	r0, [r7, #28]
          break;
 8008d42:	e060      	b.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8008d44:	4b15      	ldr	r3, [pc, #84]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d50:	d156      	bne.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8008d52:	4b12      	ldr	r3, [pc, #72]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d050      	beq.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008d5e:	4b0f      	ldr	r3, [pc, #60]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	0a1b      	lsrs	r3, r3, #8
 8008d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d68:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	fb03 f202 	mul.w	r2, r3, r2
 8008d72:	4b0a      	ldr	r3, [pc, #40]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	091b      	lsrs	r3, r3, #4
 8008d78:	f003 0307 	and.w	r3, r3, #7
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d82:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8008d84:	4b05      	ldr	r3, [pc, #20]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	0e5b      	lsrs	r3, r3, #25
 8008d8a:	f003 0303 	and.w	r3, r3, #3
 8008d8e:	3301      	adds	r3, #1
 8008d90:	005b      	lsls	r3, r3, #1
 8008d92:	69ba      	ldr	r2, [r7, #24]
 8008d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d98:	61fb      	str	r3, [r7, #28]
          break;
 8008d9a:	e031      	b.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8008d9c:	40021000 	.word	0x40021000
 8008da0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8008da4:	4b9c      	ldr	r3, [pc, #624]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008db0:	d128      	bne.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 8008db2:	4b99      	ldr	r3, [pc, #612]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008db4:	695b      	ldr	r3, [r3, #20]
 8008db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d022      	beq.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008dbe:	4b96      	ldr	r3, [pc, #600]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008dc0:	695b      	ldr	r3, [r3, #20]
 8008dc2:	0a1b      	lsrs	r3, r3, #8
 8008dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dc8:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	fb03 f202 	mul.w	r2, r3, r2
 8008dd2:	4b91      	ldr	r3, [pc, #580]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	091b      	lsrs	r3, r3, #4
 8008dd8:	f003 0307 	and.w	r3, r3, #7
 8008ddc:	3301      	adds	r3, #1
 8008dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8008de2:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8008de4:	4b8c      	ldr	r3, [pc, #560]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008de6:	695b      	ldr	r3, [r3, #20]
 8008de8:	0e5b      	lsrs	r3, r3, #25
 8008dea:	f003 0303 	and.w	r3, r3, #3
 8008dee:	3301      	adds	r3, #1
 8008df0:	005b      	lsls	r3, r3, #1
 8008df2:	69ba      	ldr	r2, [r7, #24]
 8008df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008df8:	61fb      	str	r3, [r7, #28]
          break;
 8008dfa:	e003      	b.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 8008dfc:	bf00      	nop
 8008dfe:	e17f      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008e00:	bf00      	nop
 8008e02:	e17d      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008e04:	bf00      	nop
        break;
 8008e06:	e17b      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8008e08:	4b83      	ldr	r3, [pc, #524]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e12:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d103      	bne.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 8008e1a:	f7fe ff59 	bl	8007cd0 <HAL_RCC_GetPCLK2Freq>
 8008e1e:	61f8      	str	r0, [r7, #28]
        break;
 8008e20:	e16e      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e22:	f7fe fea7 	bl	8007b74 <HAL_RCC_GetSysClockFreq>
 8008e26:	61f8      	str	r0, [r7, #28]
        break;
 8008e28:	e16a      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008e2a:	4b7b      	ldr	r3, [pc, #492]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e30:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008e34:	613b      	str	r3, [r7, #16]
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e3c:	d013      	beq.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e44:	d819      	bhi.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d004      	beq.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e52:	d004      	beq.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8008e54:	e011      	b.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e56:	f7fe ff25 	bl	8007ca4 <HAL_RCC_GetPCLK1Freq>
 8008e5a:	61f8      	str	r0, [r7, #28]
          break;
 8008e5c:	e010      	b.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e5e:	f7fe fe89 	bl	8007b74 <HAL_RCC_GetSysClockFreq>
 8008e62:	61f8      	str	r0, [r7, #28]
          break;
 8008e64:	e00c      	b.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e66:	4b6c      	ldr	r3, [pc, #432]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e72:	d104      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 8008e74:	4b69      	ldr	r3, [pc, #420]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8008e76:	61fb      	str	r3, [r7, #28]
          break;
 8008e78:	e001      	b.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 8008e7a:	bf00      	nop
 8008e7c:	e140      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008e7e:	bf00      	nop
        break;
 8008e80:	e13e      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008e82:	4b65      	ldr	r3, [pc, #404]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008e8c:	613b      	str	r3, [r7, #16]
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e94:	d013      	beq.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e9c:	d819      	bhi.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d004      	beq.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008eaa:	d004      	beq.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 8008eac:	e011      	b.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008eae:	f7fe fef9 	bl	8007ca4 <HAL_RCC_GetPCLK1Freq>
 8008eb2:	61f8      	str	r0, [r7, #28]
          break;
 8008eb4:	e010      	b.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 8008eb6:	f7fe fe5d 	bl	8007b74 <HAL_RCC_GetSysClockFreq>
 8008eba:	61f8      	str	r0, [r7, #28]
          break;
 8008ebc:	e00c      	b.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ebe:	4b56      	ldr	r3, [pc, #344]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eca:	d104      	bne.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 8008ecc:	4b53      	ldr	r3, [pc, #332]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8008ece:	61fb      	str	r3, [r7, #28]
          break;
 8008ed0:	e001      	b.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 8008ed2:	bf00      	nop
 8008ed4:	e114      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008ed6:	bf00      	nop
        break;
 8008ed8:	e112      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008eda:	4b4f      	ldr	r3, [pc, #316]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008ee4:	613b      	str	r3, [r7, #16]
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008eec:	d013      	beq.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ef4:	d819      	bhi.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d004      	beq.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f02:	d004      	beq.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 8008f04:	e011      	b.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f06:	f7fe fecd 	bl	8007ca4 <HAL_RCC_GetPCLK1Freq>
 8008f0a:	61f8      	str	r0, [r7, #28]
          break;
 8008f0c:	e010      	b.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f0e:	f7fe fe31 	bl	8007b74 <HAL_RCC_GetSysClockFreq>
 8008f12:	61f8      	str	r0, [r7, #28]
          break;
 8008f14:	e00c      	b.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f16:	4b40      	ldr	r3, [pc, #256]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f22:	d104      	bne.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 8008f24:	4b3d      	ldr	r3, [pc, #244]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8008f26:	61fb      	str	r3, [r7, #28]
          break;
 8008f28:	e001      	b.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 8008f2a:	bf00      	nop
 8008f2c:	e0e8      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008f2e:	bf00      	nop
        break;
 8008f30:	e0e6      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008f32:	4b39      	ldr	r3, [pc, #228]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008f34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f38:	f003 0303 	and.w	r3, r3, #3
 8008f3c:	613b      	str	r3, [r7, #16]
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d011      	beq.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d818      	bhi.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d003      	beq.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d004      	beq.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 8008f56:	e011      	b.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f58:	f7fe fea4 	bl	8007ca4 <HAL_RCC_GetPCLK1Freq>
 8008f5c:	61f8      	str	r0, [r7, #28]
          break;
 8008f5e:	e010      	b.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f60:	f7fe fe08 	bl	8007b74 <HAL_RCC_GetSysClockFreq>
 8008f64:	61f8      	str	r0, [r7, #28]
          break;
 8008f66:	e00c      	b.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f68:	4b2b      	ldr	r3, [pc, #172]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f74:	d104      	bne.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 8008f76:	4b29      	ldr	r3, [pc, #164]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8008f78:	61fb      	str	r3, [r7, #28]
          break;
 8008f7a:	e001      	b.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8008f7c:	bf00      	nop
 8008f7e:	e0bf      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8008f80:	bf00      	nop
        break;
 8008f82:	e0bd      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008f84:	4b24      	ldr	r3, [pc, #144]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f8a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008f8e:	613b      	str	r3, [r7, #16]
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008f96:	d02c      	beq.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008f9e:	d833      	bhi.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008fa6:	d01a      	beq.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008fae:	d82b      	bhi.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d004      	beq.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008fbc:	d004      	beq.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 8008fbe:	e023      	b.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008fc0:	f7fe fe70 	bl	8007ca4 <HAL_RCC_GetPCLK1Freq>
 8008fc4:	61f8      	str	r0, [r7, #28]
          break;
 8008fc6:	e026      	b.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008fc8:	4b13      	ldr	r3, [pc, #76]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fce:	f003 0302 	and.w	r3, r3, #2
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d11a      	bne.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 8008fd6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008fda:	61fb      	str	r3, [r7, #28]
          break;
 8008fdc:	e016      	b.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008fde:	4b0e      	ldr	r3, [pc, #56]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fea:	d111      	bne.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8008fec:	4b0b      	ldr	r3, [pc, #44]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8008fee:	61fb      	str	r3, [r7, #28]
          break;
 8008ff0:	e00e      	b.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008ff2:	4b09      	ldr	r3, [pc, #36]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8008ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ff8:	f003 0302 	and.w	r3, r3, #2
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d109      	bne.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8009000:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009004:	61fb      	str	r3, [r7, #28]
          break;
 8009006:	e005      	b.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8009008:	bf00      	nop
 800900a:	e079      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800900c:	bf00      	nop
 800900e:	e077      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8009010:	bf00      	nop
 8009012:	e075      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8009014:	bf00      	nop
        break;
 8009016:	e073      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8009018:	40021000 	.word	0x40021000
 800901c:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009020:	4b3a      	ldr	r3, [pc, #232]	; (800910c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8009022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009026:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800902a:	613b      	str	r3, [r7, #16]
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009032:	d02c      	beq.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800903a:	d833      	bhi.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009042:	d01a      	beq.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800904a:	d82b      	bhi.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d004      	beq.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009058:	d004      	beq.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800905a:	e023      	b.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 800905c:	f7fe fe22 	bl	8007ca4 <HAL_RCC_GetPCLK1Freq>
 8009060:	61f8      	str	r0, [r7, #28]
          break;
 8009062:	e026      	b.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009064:	4b29      	ldr	r3, [pc, #164]	; (800910c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8009066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800906a:	f003 0302 	and.w	r3, r3, #2
 800906e:	2b02      	cmp	r3, #2
 8009070:	d11a      	bne.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 8009072:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009076:	61fb      	str	r3, [r7, #28]
          break;
 8009078:	e016      	b.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800907a:	4b24      	ldr	r3, [pc, #144]	; (800910c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009086:	d111      	bne.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 8009088:	4b21      	ldr	r3, [pc, #132]	; (8009110 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 800908a:	61fb      	str	r3, [r7, #28]
          break;
 800908c:	e00e      	b.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800908e:	4b1f      	ldr	r3, [pc, #124]	; (800910c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8009090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009094:	f003 0302 	and.w	r3, r3, #2
 8009098:	2b02      	cmp	r3, #2
 800909a:	d109      	bne.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 800909c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090a0:	61fb      	str	r3, [r7, #28]
          break;
 80090a2:	e005      	b.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 80090a4:	bf00      	nop
 80090a6:	e02b      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80090a8:	bf00      	nop
 80090aa:	e029      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80090ac:	bf00      	nop
 80090ae:	e027      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80090b0:	bf00      	nop
        break;
 80090b2:	e025      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80090b4:	4b15      	ldr	r3, [pc, #84]	; (800910c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80090b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090be:	613b      	str	r3, [r7, #16]
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d004      	beq.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090cc:	d004      	beq.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 80090ce:	e00d      	b.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 80090d0:	f7fe fde8 	bl	8007ca4 <HAL_RCC_GetPCLK1Freq>
 80090d4:	61f8      	str	r0, [r7, #28]
          break;
 80090d6:	e009      	b.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090d8:	4b0c      	ldr	r3, [pc, #48]	; (800910c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090e4:	d101      	bne.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 80090e6:	4b0a      	ldr	r3, [pc, #40]	; (8009110 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 80090e8:	61fb      	str	r3, [r7, #28]
          break;
 80090ea:	bf00      	nop
        break;
 80090ec:	e008      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 80090ee:	bf00      	nop
 80090f0:	e006      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 80090f2:	bf00      	nop
 80090f4:	e004      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 80090f6:	bf00      	nop
 80090f8:	e002      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 80090fa:	bf00      	nop
 80090fc:	e000      	b.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 80090fe:	bf00      	nop
    }
  }

  return(frequency);
 8009100:	69fb      	ldr	r3, [r7, #28]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3720      	adds	r7, #32
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	40021000 	.word	0x40021000
 8009110:	00f42400 	.word	0x00f42400

08009114 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800911e:	2300      	movs	r3, #0
 8009120:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009122:	4b74      	ldr	r3, [pc, #464]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	f003 0303 	and.w	r3, r3, #3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d018      	beq.n	8009160 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800912e:	4b71      	ldr	r3, [pc, #452]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	f003 0203 	and.w	r2, r3, #3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	429a      	cmp	r2, r3
 800913c:	d10d      	bne.n	800915a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
       ||
 8009142:	2b00      	cmp	r3, #0
 8009144:	d009      	beq.n	800915a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009146:	4b6b      	ldr	r3, [pc, #428]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	091b      	lsrs	r3, r3, #4
 800914c:	f003 0307 	and.w	r3, r3, #7
 8009150:	1c5a      	adds	r2, r3, #1
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	685b      	ldr	r3, [r3, #4]
       ||
 8009156:	429a      	cmp	r2, r3
 8009158:	d047      	beq.n	80091ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	73fb      	strb	r3, [r7, #15]
 800915e:	e044      	b.n	80091ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b03      	cmp	r3, #3
 8009166:	d018      	beq.n	800919a <RCCEx_PLLSAI1_Config+0x86>
 8009168:	2b03      	cmp	r3, #3
 800916a:	d825      	bhi.n	80091b8 <RCCEx_PLLSAI1_Config+0xa4>
 800916c:	2b01      	cmp	r3, #1
 800916e:	d002      	beq.n	8009176 <RCCEx_PLLSAI1_Config+0x62>
 8009170:	2b02      	cmp	r3, #2
 8009172:	d009      	beq.n	8009188 <RCCEx_PLLSAI1_Config+0x74>
 8009174:	e020      	b.n	80091b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009176:	4b5f      	ldr	r3, [pc, #380]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 0302 	and.w	r3, r3, #2
 800917e:	2b00      	cmp	r3, #0
 8009180:	d11d      	bne.n	80091be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009186:	e01a      	b.n	80091be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009188:	4b5a      	ldr	r3, [pc, #360]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009190:	2b00      	cmp	r3, #0
 8009192:	d116      	bne.n	80091c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009198:	e013      	b.n	80091c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800919a:	4b56      	ldr	r3, [pc, #344]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d10f      	bne.n	80091c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80091a6:	4b53      	ldr	r3, [pc, #332]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d109      	bne.n	80091c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80091b6:	e006      	b.n	80091c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	73fb      	strb	r3, [r7, #15]
      break;
 80091bc:	e004      	b.n	80091c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80091be:	bf00      	nop
 80091c0:	e002      	b.n	80091c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80091c2:	bf00      	nop
 80091c4:	e000      	b.n	80091c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80091c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10d      	bne.n	80091ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80091ce:	4b49      	ldr	r3, [pc, #292]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6819      	ldr	r1, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	3b01      	subs	r3, #1
 80091e0:	011b      	lsls	r3, r3, #4
 80091e2:	430b      	orrs	r3, r1
 80091e4:	4943      	ldr	r1, [pc, #268]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80091e6:	4313      	orrs	r3, r2
 80091e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d17c      	bne.n	80092ea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80091f0:	4b40      	ldr	r3, [pc, #256]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a3f      	ldr	r2, [pc, #252]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80091f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80091fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091fc:	f7fb fcb2 	bl	8004b64 <HAL_GetTick>
 8009200:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009202:	e009      	b.n	8009218 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009204:	f7fb fcae 	bl	8004b64 <HAL_GetTick>
 8009208:	4602      	mov	r2, r0
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	1ad3      	subs	r3, r2, r3
 800920e:	2b02      	cmp	r3, #2
 8009210:	d902      	bls.n	8009218 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009212:	2303      	movs	r3, #3
 8009214:	73fb      	strb	r3, [r7, #15]
        break;
 8009216:	e005      	b.n	8009224 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009218:	4b36      	ldr	r3, [pc, #216]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1ef      	bne.n	8009204 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009224:	7bfb      	ldrb	r3, [r7, #15]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d15f      	bne.n	80092ea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d110      	bne.n	8009252 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009230:	4b30      	ldr	r3, [pc, #192]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009238:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	6892      	ldr	r2, [r2, #8]
 8009240:	0211      	lsls	r1, r2, #8
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	68d2      	ldr	r2, [r2, #12]
 8009246:	06d2      	lsls	r2, r2, #27
 8009248:	430a      	orrs	r2, r1
 800924a:	492a      	ldr	r1, [pc, #168]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800924c:	4313      	orrs	r3, r2
 800924e:	610b      	str	r3, [r1, #16]
 8009250:	e027      	b.n	80092a2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d112      	bne.n	800927e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009258:	4b26      	ldr	r3, [pc, #152]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009260:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	6892      	ldr	r2, [r2, #8]
 8009268:	0211      	lsls	r1, r2, #8
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	6912      	ldr	r2, [r2, #16]
 800926e:	0852      	lsrs	r2, r2, #1
 8009270:	3a01      	subs	r2, #1
 8009272:	0552      	lsls	r2, r2, #21
 8009274:	430a      	orrs	r2, r1
 8009276:	491f      	ldr	r1, [pc, #124]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009278:	4313      	orrs	r3, r2
 800927a:	610b      	str	r3, [r1, #16]
 800927c:	e011      	b.n	80092a2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800927e:	4b1d      	ldr	r3, [pc, #116]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009286:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	6892      	ldr	r2, [r2, #8]
 800928e:	0211      	lsls	r1, r2, #8
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	6952      	ldr	r2, [r2, #20]
 8009294:	0852      	lsrs	r2, r2, #1
 8009296:	3a01      	subs	r2, #1
 8009298:	0652      	lsls	r2, r2, #25
 800929a:	430a      	orrs	r2, r1
 800929c:	4915      	ldr	r1, [pc, #84]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800929e:	4313      	orrs	r3, r2
 80092a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80092a2:	4b14      	ldr	r3, [pc, #80]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a13      	ldr	r2, [pc, #76]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80092ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092ae:	f7fb fc59 	bl	8004b64 <HAL_GetTick>
 80092b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80092b4:	e009      	b.n	80092ca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80092b6:	f7fb fc55 	bl	8004b64 <HAL_GetTick>
 80092ba:	4602      	mov	r2, r0
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d902      	bls.n	80092ca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80092c4:	2303      	movs	r3, #3
 80092c6:	73fb      	strb	r3, [r7, #15]
          break;
 80092c8:	e005      	b.n	80092d6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80092ca:	4b0a      	ldr	r3, [pc, #40]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d0ef      	beq.n	80092b6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d106      	bne.n	80092ea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80092dc:	4b05      	ldr	r3, [pc, #20]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092de:	691a      	ldr	r2, [r3, #16]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	699b      	ldr	r3, [r3, #24]
 80092e4:	4903      	ldr	r1, [pc, #12]	; (80092f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092e6:	4313      	orrs	r3, r2
 80092e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80092ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	40021000 	.word	0x40021000

080092f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009306:	4b69      	ldr	r3, [pc, #420]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	f003 0303 	and.w	r3, r3, #3
 800930e:	2b00      	cmp	r3, #0
 8009310:	d018      	beq.n	8009344 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009312:	4b66      	ldr	r3, [pc, #408]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	f003 0203 	and.w	r2, r3, #3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	429a      	cmp	r2, r3
 8009320:	d10d      	bne.n	800933e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
       ||
 8009326:	2b00      	cmp	r3, #0
 8009328:	d009      	beq.n	800933e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800932a:	4b60      	ldr	r3, [pc, #384]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	091b      	lsrs	r3, r3, #4
 8009330:	f003 0307 	and.w	r3, r3, #7
 8009334:	1c5a      	adds	r2, r3, #1
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
       ||
 800933a:	429a      	cmp	r2, r3
 800933c:	d047      	beq.n	80093ce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	73fb      	strb	r3, [r7, #15]
 8009342:	e044      	b.n	80093ce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b03      	cmp	r3, #3
 800934a:	d018      	beq.n	800937e <RCCEx_PLLSAI2_Config+0x86>
 800934c:	2b03      	cmp	r3, #3
 800934e:	d825      	bhi.n	800939c <RCCEx_PLLSAI2_Config+0xa4>
 8009350:	2b01      	cmp	r3, #1
 8009352:	d002      	beq.n	800935a <RCCEx_PLLSAI2_Config+0x62>
 8009354:	2b02      	cmp	r3, #2
 8009356:	d009      	beq.n	800936c <RCCEx_PLLSAI2_Config+0x74>
 8009358:	e020      	b.n	800939c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800935a:	4b54      	ldr	r3, [pc, #336]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 0302 	and.w	r3, r3, #2
 8009362:	2b00      	cmp	r3, #0
 8009364:	d11d      	bne.n	80093a2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800936a:	e01a      	b.n	80093a2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800936c:	4b4f      	ldr	r3, [pc, #316]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009374:	2b00      	cmp	r3, #0
 8009376:	d116      	bne.n	80093a6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800937c:	e013      	b.n	80093a6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800937e:	4b4b      	ldr	r3, [pc, #300]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d10f      	bne.n	80093aa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800938a:	4b48      	ldr	r3, [pc, #288]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009392:	2b00      	cmp	r3, #0
 8009394:	d109      	bne.n	80093aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800939a:	e006      	b.n	80093aa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	73fb      	strb	r3, [r7, #15]
      break;
 80093a0:	e004      	b.n	80093ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80093a2:	bf00      	nop
 80093a4:	e002      	b.n	80093ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80093a6:	bf00      	nop
 80093a8:	e000      	b.n	80093ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80093aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10d      	bne.n	80093ce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80093b2:	4b3e      	ldr	r3, [pc, #248]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6819      	ldr	r1, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	3b01      	subs	r3, #1
 80093c4:	011b      	lsls	r3, r3, #4
 80093c6:	430b      	orrs	r3, r1
 80093c8:	4938      	ldr	r1, [pc, #224]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 80093ca:	4313      	orrs	r3, r2
 80093cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80093ce:	7bfb      	ldrb	r3, [r7, #15]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d166      	bne.n	80094a2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80093d4:	4b35      	ldr	r3, [pc, #212]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a34      	ldr	r2, [pc, #208]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 80093da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093e0:	f7fb fbc0 	bl	8004b64 <HAL_GetTick>
 80093e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80093e6:	e009      	b.n	80093fc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80093e8:	f7fb fbbc 	bl	8004b64 <HAL_GetTick>
 80093ec:	4602      	mov	r2, r0
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d902      	bls.n	80093fc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	73fb      	strb	r3, [r7, #15]
        break;
 80093fa:	e005      	b.n	8009408 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80093fc:	4b2b      	ldr	r3, [pc, #172]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1ef      	bne.n	80093e8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009408:	7bfb      	ldrb	r3, [r7, #15]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d149      	bne.n	80094a2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d110      	bne.n	8009436 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009414:	4b25      	ldr	r3, [pc, #148]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800941c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	6892      	ldr	r2, [r2, #8]
 8009424:	0211      	lsls	r1, r2, #8
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	68d2      	ldr	r2, [r2, #12]
 800942a:	06d2      	lsls	r2, r2, #27
 800942c:	430a      	orrs	r2, r1
 800942e:	491f      	ldr	r1, [pc, #124]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 8009430:	4313      	orrs	r3, r2
 8009432:	614b      	str	r3, [r1, #20]
 8009434:	e011      	b.n	800945a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009436:	4b1d      	ldr	r3, [pc, #116]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 8009438:	695b      	ldr	r3, [r3, #20]
 800943a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800943e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	6892      	ldr	r2, [r2, #8]
 8009446:	0211      	lsls	r1, r2, #8
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	6912      	ldr	r2, [r2, #16]
 800944c:	0852      	lsrs	r2, r2, #1
 800944e:	3a01      	subs	r2, #1
 8009450:	0652      	lsls	r2, r2, #25
 8009452:	430a      	orrs	r2, r1
 8009454:	4915      	ldr	r1, [pc, #84]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 8009456:	4313      	orrs	r3, r2
 8009458:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800945a:	4b14      	ldr	r3, [pc, #80]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a13      	ldr	r2, [pc, #76]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 8009460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009464:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009466:	f7fb fb7d 	bl	8004b64 <HAL_GetTick>
 800946a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800946c:	e009      	b.n	8009482 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800946e:	f7fb fb79 	bl	8004b64 <HAL_GetTick>
 8009472:	4602      	mov	r2, r0
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	2b02      	cmp	r3, #2
 800947a:	d902      	bls.n	8009482 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800947c:	2303      	movs	r3, #3
 800947e:	73fb      	strb	r3, [r7, #15]
          break;
 8009480:	e005      	b.n	800948e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009482:	4b0a      	ldr	r3, [pc, #40]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800948a:	2b00      	cmp	r3, #0
 800948c:	d0ef      	beq.n	800946e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800948e:	7bfb      	ldrb	r3, [r7, #15]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d106      	bne.n	80094a2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009494:	4b05      	ldr	r3, [pc, #20]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 8009496:	695a      	ldr	r2, [r3, #20]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	4903      	ldr	r1, [pc, #12]	; (80094ac <RCCEx_PLLSAI2_Config+0x1b4>)
 800949e:	4313      	orrs	r3, r2
 80094a0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80094a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	40021000 	.word	0x40021000

080094b0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b089      	sub	sp, #36	; 0x24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80094ba:	2300      	movs	r3, #0
 80094bc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80094be:	2300      	movs	r3, #0
 80094c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80094c2:	2300      	movs	r3, #0
 80094c4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094cc:	d10c      	bne.n	80094e8 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80094ce:	4b77      	ldr	r3, [pc, #476]	; (80096ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80094d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094d4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80094d8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80094e0:	d112      	bne.n	8009508 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80094e2:	4b73      	ldr	r3, [pc, #460]	; (80096b0 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 80094e4:	61fb      	str	r3, [r7, #28]
 80094e6:	e00f      	b.n	8009508 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ee:	d10b      	bne.n	8009508 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80094f0:	4b6e      	ldr	r3, [pc, #440]	; (80096ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80094f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094f6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80094fa:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009502:	d101      	bne.n	8009508 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8009504:	4b6a      	ldr	r3, [pc, #424]	; (80096b0 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8009506:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	2b00      	cmp	r3, #0
 800950c:	f040 80c6 	bne.w	800969c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800951a:	d003      	beq.n	8009524 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009522:	d13b      	bne.n	800959c <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009524:	4b61      	ldr	r3, [pc, #388]	; (80096ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800952c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009530:	f040 80b3 	bne.w	800969a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8009534:	4b5d      	ldr	r3, [pc, #372]	; (80096ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 80ac 	beq.w	800969a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009542:	4b5a      	ldr	r3, [pc, #360]	; (80096ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	091b      	lsrs	r3, r3, #4
 8009548:	f003 0307 	and.w	r3, r3, #7
 800954c:	3301      	adds	r3, #1
 800954e:	693a      	ldr	r2, [r7, #16]
 8009550:	fbb2 f3f3 	udiv	r3, r2, r3
 8009554:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009556:	4b55      	ldr	r3, [pc, #340]	; (80096ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	0a1b      	lsrs	r3, r3, #8
 800955c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009560:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8009562:	4b52      	ldr	r3, [pc, #328]	; (80096ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	0edb      	lsrs	r3, r3, #27
 8009568:	f003 031f 	and.w	r3, r3, #31
 800956c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10a      	bne.n	800958a <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8009574:	4b4d      	ldr	r3, [pc, #308]	; (80096ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800957c:	2b00      	cmp	r3, #0
 800957e:	d002      	beq.n	8009586 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 8009580:	2311      	movs	r3, #17
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	e001      	b.n	800958a <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 8009586:	2307      	movs	r3, #7
 8009588:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	fb03 f202 	mul.w	r2, r3, r2
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	fbb2 f3f3 	udiv	r3, r2, r3
 8009598:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800959a:	e07e      	b.n	800969a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d139      	bne.n	8009616 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80095a2:	4b42      	ldr	r3, [pc, #264]	; (80096ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095ae:	d175      	bne.n	800969c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 80095b0:	4b3e      	ldr	r3, [pc, #248]	; (80096ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d06f      	beq.n	800969c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80095bc:	4b3b      	ldr	r3, [pc, #236]	; (80096ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	091b      	lsrs	r3, r3, #4
 80095c2:	f003 0307 	and.w	r3, r3, #7
 80095c6:	3301      	adds	r3, #1
 80095c8:	693a      	ldr	r2, [r7, #16]
 80095ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ce:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80095d0:	4b36      	ldr	r3, [pc, #216]	; (80096ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	0a1b      	lsrs	r3, r3, #8
 80095d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095da:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80095dc:	4b33      	ldr	r3, [pc, #204]	; (80096ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	0edb      	lsrs	r3, r3, #27
 80095e2:	f003 031f 	and.w	r3, r3, #31
 80095e6:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10a      	bne.n	8009604 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80095ee:	4b2f      	ldr	r3, [pc, #188]	; (80096ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d002      	beq.n	8009600 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 80095fa:	2311      	movs	r3, #17
 80095fc:	617b      	str	r3, [r7, #20]
 80095fe:	e001      	b.n	8009604 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 8009600:	2307      	movs	r3, #7
 8009602:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	fb03 f202 	mul.w	r2, r3, r2
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009612:	61fb      	str	r3, [r7, #28]
 8009614:	e042      	b.n	800969c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800961c:	d003      	beq.n	8009626 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009624:	d13a      	bne.n	800969c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8009626:	4b21      	ldr	r3, [pc, #132]	; (80096ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800962e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009632:	d133      	bne.n	800969c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8009634:	4b1d      	ldr	r3, [pc, #116]	; (80096ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009636:	695b      	ldr	r3, [r3, #20]
 8009638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800963c:	2b00      	cmp	r3, #0
 800963e:	d02d      	beq.n	800969c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009640:	4b1a      	ldr	r3, [pc, #104]	; (80096ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	091b      	lsrs	r3, r3, #4
 8009646:	f003 0307 	and.w	r3, r3, #7
 800964a:	3301      	adds	r3, #1
 800964c:	693a      	ldr	r2, [r7, #16]
 800964e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009652:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8009654:	4b15      	ldr	r3, [pc, #84]	; (80096ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009656:	695b      	ldr	r3, [r3, #20]
 8009658:	0a1b      	lsrs	r3, r3, #8
 800965a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800965e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8009660:	4b12      	ldr	r3, [pc, #72]	; (80096ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009662:	695b      	ldr	r3, [r3, #20]
 8009664:	0edb      	lsrs	r3, r3, #27
 8009666:	f003 031f 	and.w	r3, r3, #31
 800966a:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10a      	bne.n	8009688 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8009672:	4b0e      	ldr	r3, [pc, #56]	; (80096ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800967a:	2b00      	cmp	r3, #0
 800967c:	d002      	beq.n	8009684 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 800967e:	2311      	movs	r3, #17
 8009680:	617b      	str	r3, [r7, #20]
 8009682:	e001      	b.n	8009688 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8009684:	2307      	movs	r3, #7
 8009686:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	fb03 f202 	mul.w	r2, r3, r2
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	fbb2 f3f3 	udiv	r3, r2, r3
 8009696:	61fb      	str	r3, [r7, #28]
 8009698:	e000      	b.n	800969c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800969a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800969c:	69fb      	ldr	r3, [r7, #28]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3724      	adds	r7, #36	; 0x24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	40021000 	.word	0x40021000
 80096b0:	001fff68 	.word	0x001fff68

080096b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d101      	bne.n	80096c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e022      	b.n	800970c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d105      	bne.n	80096de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f7fa fee1 	bl	80044a0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2203      	movs	r2, #3
 80096e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f814 	bl	8009714 <HAL_SD_InitCard>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d001      	beq.n	80096f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e00a      	b.n	800970c <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009714:	b5b0      	push	{r4, r5, r7, lr}
 8009716:	b08e      	sub	sp, #56	; 0x38
 8009718:	af04      	add	r7, sp, #16
 800971a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800971c:	2300      	movs	r3, #0
 800971e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009720:	2300      	movs	r3, #0
 8009722:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009724:	2300      	movs	r3, #0
 8009726:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009728:	2300      	movs	r3, #0
 800972a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800972c:	2300      	movs	r3, #0
 800972e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8009730:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009734:	f7fe ff36 	bl	80085a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009738:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800973a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973c:	2b00      	cmp	r3, #0
 800973e:	d109      	bne.n	8009754 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800974e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e07b      	b.n	800984c <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	09db      	lsrs	r3, r3, #7
 8009758:	4a3e      	ldr	r2, [pc, #248]	; (8009854 <HAL_SD_InitCard+0x140>)
 800975a:	fba2 2303 	umull	r2, r3, r2, r3
 800975e:	091b      	lsrs	r3, r3, #4
 8009760:	3b02      	subs	r3, #2
 8009762:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681d      	ldr	r5, [r3, #0]
 8009768:	466c      	mov	r4, sp
 800976a:	f107 0314 	add.w	r3, r7, #20
 800976e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009772:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009776:	f107 0308 	add.w	r3, r7, #8
 800977a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800977c:	4628      	mov	r0, r5
 800977e:	f002 fe4f 	bl	800c420 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	685a      	ldr	r2, [r3, #4]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009790:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4618      	mov	r0, r3
 8009798:	f002 fe8d 	bl	800c4b6 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	685a      	ldr	r2, [r3, #4]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097aa:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	3302      	adds	r3, #2
 80097b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b6:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80097b8:	4a27      	ldr	r2, [pc, #156]	; (8009858 <HAL_SD_InitCard+0x144>)
 80097ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80097c0:	3301      	adds	r3, #1
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7fb f9da 	bl	8004b7c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f001 f915 	bl	800a9f8 <SD_PowerON>
 80097ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097d0:	6a3b      	ldr	r3, [r7, #32]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00b      	beq.n	80097ee <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097e2:	6a3b      	ldr	r3, [r7, #32]
 80097e4:	431a      	orrs	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e02e      	b.n	800984c <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f001 f834 	bl	800a85c <SD_InitCard>
 80097f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097f6:	6a3b      	ldr	r3, [r7, #32]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00b      	beq.n	8009814 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009808:	6a3b      	ldr	r3, [r7, #32]
 800980a:	431a      	orrs	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	e01b      	b.n	800984c <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f44f 7100 	mov.w	r1, #512	; 0x200
 800981c:	4618      	mov	r0, r3
 800981e:	f002 fedd 	bl	800c5dc <SDMMC_CmdBlockLength>
 8009822:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009824:	6a3b      	ldr	r3, [r7, #32]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00f      	beq.n	800984a <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a0b      	ldr	r2, [pc, #44]	; (800985c <HAL_SD_InitCard+0x148>)
 8009830:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009836:	6a3b      	ldr	r3, [r7, #32]
 8009838:	431a      	orrs	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e000      	b.n	800984c <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	3728      	adds	r7, #40	; 0x28
 8009850:	46bd      	mov	sp, r7
 8009852:	bdb0      	pop	{r4, r5, r7, pc}
 8009854:	014f8b59 	.word	0x014f8b59
 8009858:	00012110 	.word	0x00012110
 800985c:	004005ff 	.word	0x004005ff

08009860 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b092      	sub	sp, #72	; 0x48
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
 800986c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800986e:	f7fb f979 	bl	8004b64 <HAL_GetTick>
 8009872:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d107      	bne.n	8009892 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009886:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	e1bd      	b.n	8009c0e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b01      	cmp	r3, #1
 800989c:	f040 81b0 	bne.w	8009c00 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80098a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	441a      	add	r2, r3
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d907      	bls.n	80098c4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	e1a4      	b.n	8009c0e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2203      	movs	r2, #3
 80098c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2200      	movs	r2, #0
 80098d2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d002      	beq.n	80098e2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80098dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098de:	025b      	lsls	r3, r3, #9
 80098e0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80098e2:	f04f 33ff 	mov.w	r3, #4294967295
 80098e6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	025b      	lsls	r3, r3, #9
 80098ec:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80098ee:	2390      	movs	r3, #144	; 0x90
 80098f0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80098f2:	2302      	movs	r3, #2
 80098f4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80098fa:	2301      	movs	r3, #1
 80098fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f107 0214 	add.w	r2, r7, #20
 8009906:	4611      	mov	r1, r2
 8009908:	4618      	mov	r0, r3
 800990a:	f002 fe3b 	bl	800c584 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d90a      	bls.n	800992a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2202      	movs	r2, #2
 8009918:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009920:	4618      	mov	r0, r3
 8009922:	f002 fe9f 	bl	800c664 <SDMMC_CmdReadMultiBlock>
 8009926:	6478      	str	r0, [r7, #68]	; 0x44
 8009928:	e009      	b.n	800993e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2201      	movs	r2, #1
 800992e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009936:	4618      	mov	r0, r3
 8009938:	f002 fe72 	bl	800c620 <SDMMC_CmdReadSingleBlock>
 800993c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800993e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009940:	2b00      	cmp	r3, #0
 8009942:	d012      	beq.n	800996a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a7a      	ldr	r2, [pc, #488]	; (8009b34 <HAL_SD_ReadBlocks+0x2d4>)
 800994a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009952:	431a      	orrs	r2, r3
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e151      	b.n	8009c0e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800996e:	e061      	b.n	8009a34 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d03c      	beq.n	80099f8 <HAL_SD_ReadBlocks+0x198>
 800997e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009980:	2b00      	cmp	r3, #0
 8009982:	d039      	beq.n	80099f8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009984:	2300      	movs	r3, #0
 8009986:	643b      	str	r3, [r7, #64]	; 0x40
 8009988:	e033      	b.n	80099f2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4618      	mov	r0, r3
 8009990:	f002 fd73 	bl	800c47a <SDMMC_ReadFIFO>
 8009994:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009998:	b2da      	uxtb	r2, r3
 800999a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800999c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800999e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a0:	3301      	adds	r3, #1
 80099a2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80099a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099a6:	3b01      	subs	r3, #1
 80099a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80099aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ac:	0a1b      	lsrs	r3, r3, #8
 80099ae:	b2da      	uxtb	r2, r3
 80099b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80099b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b6:	3301      	adds	r3, #1
 80099b8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80099ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099bc:	3b01      	subs	r3, #1
 80099be:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80099c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c2:	0c1b      	lsrs	r3, r3, #16
 80099c4:	b2da      	uxtb	r2, r3
 80099c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80099ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099cc:	3301      	adds	r3, #1
 80099ce:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80099d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099d2:	3b01      	subs	r3, #1
 80099d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80099d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d8:	0e1b      	lsrs	r3, r3, #24
 80099da:	b2da      	uxtb	r2, r3
 80099dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099de:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80099e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e2:	3301      	adds	r3, #1
 80099e4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80099e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099e8:	3b01      	subs	r3, #1
 80099ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80099ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099ee:	3301      	adds	r3, #1
 80099f0:	643b      	str	r3, [r7, #64]	; 0x40
 80099f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099f4:	2b07      	cmp	r3, #7
 80099f6:	d9c8      	bls.n	800998a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80099f8:	f7fb f8b4 	bl	8004b64 <HAL_GetTick>
 80099fc:	4602      	mov	r2, r0
 80099fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d902      	bls.n	8009a0e <HAL_SD_ReadBlocks+0x1ae>
 8009a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d112      	bne.n	8009a34 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a48      	ldr	r2, [pc, #288]	; (8009b34 <HAL_SD_ReadBlocks+0x2d4>)
 8009a14:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a1a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2201      	movs	r2, #1
 8009a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009a30:	2303      	movs	r3, #3
 8009a32:	e0ec      	b.n	8009c0e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a3a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d096      	beq.n	8009970 <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d022      	beq.n	8009a96 <HAL_SD_ReadBlocks+0x236>
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d91f      	bls.n	8009a96 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	d01b      	beq.n	8009a96 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f002 fe64 	bl	800c730 <SDMMC_CmdStopTransfer>
 8009a68:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d012      	beq.n	8009a96 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a2f      	ldr	r2, [pc, #188]	; (8009b34 <HAL_SD_ReadBlocks+0x2d4>)
 8009a76:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a7e:	431a      	orrs	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e0bb      	b.n	8009c0e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a9c:	f003 0308 	and.w	r3, r3, #8
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d012      	beq.n	8009aca <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a22      	ldr	r2, [pc, #136]	; (8009b34 <HAL_SD_ReadBlocks+0x2d4>)
 8009aaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab0:	f043 0208 	orr.w	r2, r3, #8
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e0a1      	b.n	8009c0e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ad0:	f003 0302 	and.w	r3, r3, #2
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d012      	beq.n	8009afe <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a15      	ldr	r2, [pc, #84]	; (8009b34 <HAL_SD_ReadBlocks+0x2d4>)
 8009ade:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae4:	f043 0202 	orr.w	r2, r3, #2
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2200      	movs	r2, #0
 8009af8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e087      	b.n	8009c0e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b04:	f003 0320 	and.w	r3, r3, #32
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d064      	beq.n	8009bd6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a08      	ldr	r2, [pc, #32]	; (8009b34 <HAL_SD_ReadBlocks+0x2d4>)
 8009b12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b18:	f043 0220 	orr.w	r2, r3, #32
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e06d      	b.n	8009c0e <HAL_SD_ReadBlocks+0x3ae>
 8009b32:	bf00      	nop
 8009b34:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f002 fc9c 	bl	800c47a <SDMMC_ReadFIFO>
 8009b42:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8009b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4e:	3301      	adds	r3, #1
 8009b50:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b54:	3b01      	subs	r3, #1
 8009b56:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5a:	0a1b      	lsrs	r3, r3, #8
 8009b5c:	b2da      	uxtb	r2, r3
 8009b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b60:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b64:	3301      	adds	r3, #1
 8009b66:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b70:	0c1b      	lsrs	r3, r3, #16
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b76:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b80:	3b01      	subs	r3, #1
 8009b82:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b86:	0e1b      	lsrs	r3, r3, #24
 8009b88:	b2da      	uxtb	r2, r3
 8009b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b8c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b90:	3301      	adds	r3, #1
 8009b92:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b96:	3b01      	subs	r3, #1
 8009b98:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009b9a:	f7fa ffe3 	bl	8004b64 <HAL_GetTick>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d902      	bls.n	8009bb0 <HAL_SD_ReadBlocks+0x350>
 8009baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d112      	bne.n	8009bd6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a18      	ldr	r2, [pc, #96]	; (8009c18 <HAL_SD_ReadBlocks+0x3b8>)
 8009bb6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e01b      	b.n	8009c0e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d002      	beq.n	8009bea <HAL_SD_ReadBlocks+0x38a>
 8009be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d1a6      	bne.n	8009b38 <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f240 523a 	movw	r2, #1338	; 0x53a
 8009bf2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	e006      	b.n	8009c0e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c04:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
  }
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3748      	adds	r7, #72	; 0x48
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	004005ff 	.word	0x004005ff

08009c1c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b092      	sub	sp, #72	; 0x48
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	607a      	str	r2, [r7, #4]
 8009c28:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009c2a:	f7fa ff9b 	bl	8004b64 <HAL_GetTick>
 8009c2e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d107      	bne.n	8009c4e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e165      	b.n	8009f1a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	f040 8158 	bne.w	8009f0c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	441a      	add	r2, r3
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d907      	bls.n	8009c80 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c74:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e14c      	b.n	8009f1a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2203      	movs	r2, #3
 8009c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d002      	beq.n	8009c9e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9a:	025b      	lsls	r3, r3, #9
 8009c9c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009ca2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	025b      	lsls	r3, r3, #9
 8009ca8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009caa:	2390      	movs	r3, #144	; 0x90
 8009cac:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f107 0218 	add.w	r2, r7, #24
 8009cc2:	4611      	mov	r1, r2
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f002 fc5d 	bl	800c584 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d90a      	bls.n	8009ce6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2220      	movs	r2, #32
 8009cd4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f002 fd05 	bl	800c6ec <SDMMC_CmdWriteMultiBlock>
 8009ce2:	6478      	str	r0, [r7, #68]	; 0x44
 8009ce4:	e009      	b.n	8009cfa <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2210      	movs	r2, #16
 8009cea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f002 fcd8 	bl	800c6a8 <SDMMC_CmdWriteSingleBlock>
 8009cf8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d012      	beq.n	8009d26 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a87      	ldr	r2, [pc, #540]	; (8009f24 <HAL_SD_WriteBlocks+0x308>)
 8009d06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d0e:	431a      	orrs	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e0f9      	b.n	8009f1a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009d2a:	e065      	b.n	8009df8 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d040      	beq.n	8009dbc <HAL_SD_WriteBlocks+0x1a0>
 8009d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d03d      	beq.n	8009dbc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009d40:	2300      	movs	r3, #0
 8009d42:	643b      	str	r3, [r7, #64]	; 0x40
 8009d44:	e037      	b.n	8009db6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8009d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d4e:	3301      	adds	r3, #1
 8009d50:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d54:	3b01      	subs	r3, #1
 8009d56:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	021a      	lsls	r2, r3, #8
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d66:	3301      	adds	r3, #1
 8009d68:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	041a      	lsls	r2, r3, #16
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d7e:	3301      	adds	r3, #1
 8009d80:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d84:	3b01      	subs	r3, #1
 8009d86:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	061a      	lsls	r2, r3, #24
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	4313      	orrs	r3, r2
 8009d92:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d96:	3301      	adds	r3, #1
 8009d98:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f107 0214 	add.w	r2, r7, #20
 8009da8:	4611      	mov	r1, r2
 8009daa:	4618      	mov	r0, r3
 8009dac:	f002 fb72 	bl	800c494 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009db2:	3301      	adds	r3, #1
 8009db4:	643b      	str	r3, [r7, #64]	; 0x40
 8009db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009db8:	2b07      	cmp	r3, #7
 8009dba:	d9c4      	bls.n	8009d46 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009dbc:	f7fa fed2 	bl	8004b64 <HAL_GetTick>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc4:	1ad3      	subs	r3, r2, r3
 8009dc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d902      	bls.n	8009dd2 <HAL_SD_WriteBlocks+0x1b6>
 8009dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d112      	bne.n	8009df8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a53      	ldr	r2, [pc, #332]	; (8009f24 <HAL_SD_WriteBlocks+0x308>)
 8009dd8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009de0:	431a      	orrs	r2, r3
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009df4:	2303      	movs	r3, #3
 8009df6:	e090      	b.n	8009f1a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dfe:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d092      	beq.n	8009d2c <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d022      	beq.n	8009e5a <HAL_SD_WriteBlocks+0x23e>
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d91f      	bls.n	8009e5a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e1e:	2b03      	cmp	r3, #3
 8009e20:	d01b      	beq.n	8009e5a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4618      	mov	r0, r3
 8009e28:	f002 fc82 	bl	800c730 <SDMMC_CmdStopTransfer>
 8009e2c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d012      	beq.n	8009e5a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a3a      	ldr	r2, [pc, #232]	; (8009f24 <HAL_SD_WriteBlocks+0x308>)
 8009e3a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e42:	431a      	orrs	r2, r3
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e05f      	b.n	8009f1a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e60:	f003 0308 	and.w	r3, r3, #8
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d012      	beq.n	8009e8e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a2d      	ldr	r2, [pc, #180]	; (8009f24 <HAL_SD_WriteBlocks+0x308>)
 8009e6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e74:	f043 0208 	orr.w	r2, r3, #8
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e045      	b.n	8009f1a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e94:	f003 0302 	and.w	r3, r3, #2
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d012      	beq.n	8009ec2 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a20      	ldr	r2, [pc, #128]	; (8009f24 <HAL_SD_WriteBlocks+0x308>)
 8009ea2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea8:	f043 0202 	orr.w	r2, r3, #2
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e02b      	b.n	8009f1a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ec8:	f003 0310 	and.w	r3, r3, #16
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d012      	beq.n	8009ef6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a13      	ldr	r2, [pc, #76]	; (8009f24 <HAL_SD_WriteBlocks+0x308>)
 8009ed6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009edc:	f043 0210 	orr.w	r2, r3, #16
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e011      	b.n	8009f1a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f240 523a 	movw	r2, #1338	; 0x53a
 8009efe:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	e006      	b.n	8009f1a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f10:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
  }
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3748      	adds	r7, #72	; 0x48
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	004005ff 	.word	0x004005ff

08009f28 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f34:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d008      	beq.n	8009f56 <HAL_SD_IRQHandler+0x2e>
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f003 0308 	and.w	r3, r3, #8
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d003      	beq.n	8009f56 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 ff68 	bl	800ae24 <SD_Read_IT>
 8009f54:	e155      	b.n	800a202 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 808f 	beq.w	800a084 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f6e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	6812      	ldr	r2, [r2, #0]
 8009f7a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8009f7e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8009f82:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f022 0201 	bic.w	r2, r2, #1
 8009f92:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f003 0308 	and.w	r3, r3, #8
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d039      	beq.n	800a012 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f003 0302 	and.w	r3, r3, #2
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d104      	bne.n	8009fb2 <HAL_SD_IRQHandler+0x8a>
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f003 0320 	and.w	r3, r3, #32
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d011      	beq.n	8009fd6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f002 fbba 	bl	800c730 <SDMMC_CmdStopTransfer>
 8009fbc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d008      	beq.n	8009fd6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	431a      	orrs	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 f91f 	bl	800a214 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f240 523a 	movw	r2, #1338	; 0x53a
 8009fde:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f003 0301 	and.w	r3, r3, #1
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d104      	bne.n	800a002 <HAL_SD_IRQHandler+0xda>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f003 0302 	and.w	r3, r3, #2
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d003      	beq.n	800a00a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f002 ff9e 	bl	800cf44 <HAL_SD_RxCpltCallback>
 800a008:	e0fb      	b.n	800a202 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f002 ff90 	bl	800cf30 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800a010:	e0f7      	b.n	800a202 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f000 80f2 	beq.w	800a202 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f003 0320 	and.w	r3, r3, #32
 800a024:	2b00      	cmp	r3, #0
 800a026:	d011      	beq.n	800a04c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f002 fb7f 	bl	800c730 <SDMMC_CmdStopTransfer>
 800a032:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d008      	beq.n	800a04c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	431a      	orrs	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f8e4 	bl	800a214 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f003 0301 	and.w	r3, r3, #1
 800a052:	2b00      	cmp	r3, #0
 800a054:	f040 80d5 	bne.w	800a202 <HAL_SD_IRQHandler+0x2da>
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f003 0302 	and.w	r3, r3, #2
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f040 80cf 	bne.w	800a202 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f022 0208 	bic.w	r2, r2, #8
 800a072:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f002 ff57 	bl	800cf30 <HAL_SD_TxCpltCallback>
}
 800a082:	e0be      	b.n	800a202 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a08a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d008      	beq.n	800a0a4 <HAL_SD_IRQHandler+0x17c>
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f003 0308 	and.w	r3, r3, #8
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d003      	beq.n	800a0a4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 ff12 	bl	800aec6 <SD_Write_IT>
 800a0a2:	e0ae      	b.n	800a202 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0aa:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f000 80a7 	beq.w	800a202 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ba:	f003 0302 	and.w	r3, r3, #2
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d005      	beq.n	800a0ce <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c6:	f043 0202 	orr.w	r2, r3, #2
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d4:	f003 0308 	and.w	r3, r3, #8
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d005      	beq.n	800a0e8 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e0:	f043 0208 	orr.w	r2, r3, #8
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ee:	f003 0320 	and.w	r3, r3, #32
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d005      	beq.n	800a102 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0fa:	f043 0220 	orr.w	r2, r3, #32
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a108:	f003 0310 	and.w	r3, r3, #16
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d005      	beq.n	800a11c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a114:	f043 0210 	orr.w	r2, r3, #16
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f240 523a 	movw	r2, #1338	; 0x53a
 800a124:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a134:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4618      	mov	r0, r3
 800a13c:	f002 faf8 	bl	800c730 <SDMMC_CmdStopTransfer>
 800a140:	4602      	mov	r2, r0
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a146:	431a      	orrs	r2, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f003 0308 	and.w	r3, r3, #8
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00a      	beq.n	800a16c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2201      	movs	r2, #1
 800a15a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 f855 	bl	800a214 <HAL_SD_ErrorCallback>
}
 800a16a:	e04a      	b.n	800a202 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a172:	2b00      	cmp	r3, #0
 800a174:	d045      	beq.n	800a202 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f003 0310 	and.w	r3, r3, #16
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d104      	bne.n	800a18a <HAL_SD_IRQHandler+0x262>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f003 0320 	and.w	r3, r3, #32
 800a186:	2b00      	cmp	r3, #0
 800a188:	d011      	beq.n	800a1ae <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a18e:	4a1f      	ldr	r2, [pc, #124]	; (800a20c <HAL_SD_IRQHandler+0x2e4>)
 800a190:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a196:	4618      	mov	r0, r3
 800a198:	f7fb fb8a 	bl	80058b0 <HAL_DMA_Abort_IT>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d02f      	beq.n	800a202 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f000 faea 	bl	800a780 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a1ac:	e029      	b.n	800a202 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f003 0301 	and.w	r3, r3, #1
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d104      	bne.n	800a1c2 <HAL_SD_IRQHandler+0x29a>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f003 0302 	and.w	r3, r3, #2
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d011      	beq.n	800a1e6 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c6:	4a12      	ldr	r2, [pc, #72]	; (800a210 <HAL_SD_IRQHandler+0x2e8>)
 800a1c8:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fb fb6e 	bl	80058b0 <HAL_DMA_Abort_IT>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d013      	beq.n	800a202 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 fb05 	bl	800a7ee <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a1e4:	e00d      	b.n	800a202 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f002 fe8e 	bl	800cf1c <HAL_SD_AbortCallback>
}
 800a200:	e7ff      	b.n	800a202 <HAL_SD_IRQHandler+0x2da>
 800a202:	bf00      	nop
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	0800a781 	.word	0x0800a781
 800a210:	0800a7ef 	.word	0x0800a7ef

0800a214 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a21c:	bf00      	nop
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a236:	0f9b      	lsrs	r3, r3, #30
 800a238:	b2da      	uxtb	r2, r3
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a242:	0e9b      	lsrs	r3, r3, #26
 800a244:	b2db      	uxtb	r3, r3
 800a246:	f003 030f 	and.w	r3, r3, #15
 800a24a:	b2da      	uxtb	r2, r3
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a254:	0e1b      	lsrs	r3, r3, #24
 800a256:	b2db      	uxtb	r3, r3
 800a258:	f003 0303 	and.w	r3, r3, #3
 800a25c:	b2da      	uxtb	r2, r3
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a266:	0c1b      	lsrs	r3, r3, #16
 800a268:	b2da      	uxtb	r2, r3
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a272:	0a1b      	lsrs	r3, r3, #8
 800a274:	b2da      	uxtb	r2, r3
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a27e:	b2da      	uxtb	r2, r3
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a288:	0d1b      	lsrs	r3, r3, #20
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a294:	0c1b      	lsrs	r3, r3, #16
 800a296:	b2db      	uxtb	r3, r3
 800a298:	f003 030f 	and.w	r3, r3, #15
 800a29c:	b2da      	uxtb	r2, r3
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2a6:	0bdb      	lsrs	r3, r3, #15
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	f003 0301 	and.w	r3, r3, #1
 800a2ae:	b2da      	uxtb	r2, r3
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2b8:	0b9b      	lsrs	r3, r3, #14
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	f003 0301 	and.w	r3, r3, #1
 800a2c0:	b2da      	uxtb	r2, r3
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2ca:	0b5b      	lsrs	r3, r3, #13
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	f003 0301 	and.w	r3, r3, #1
 800a2d2:	b2da      	uxtb	r2, r3
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2dc:	0b1b      	lsrs	r3, r3, #12
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	f003 0301 	and.w	r3, r3, #1
 800a2e4:	b2da      	uxtb	r2, r3
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d163      	bne.n	800a3c0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2fc:	009a      	lsls	r2, r3, #2
 800a2fe:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a302:	4013      	ands	r3, r2
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a308:	0f92      	lsrs	r2, r2, #30
 800a30a:	431a      	orrs	r2, r3
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a314:	0edb      	lsrs	r3, r3, #27
 800a316:	b2db      	uxtb	r3, r3
 800a318:	f003 0307 	and.w	r3, r3, #7
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a326:	0e1b      	lsrs	r3, r3, #24
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	f003 0307 	and.w	r3, r3, #7
 800a32e:	b2da      	uxtb	r2, r3
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a338:	0d5b      	lsrs	r3, r3, #21
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	f003 0307 	and.w	r3, r3, #7
 800a340:	b2da      	uxtb	r2, r3
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a34a:	0c9b      	lsrs	r3, r3, #18
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	f003 0307 	and.w	r3, r3, #7
 800a352:	b2da      	uxtb	r2, r3
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a35c:	0bdb      	lsrs	r3, r3, #15
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	f003 0307 	and.w	r3, r3, #7
 800a364:	b2da      	uxtb	r2, r3
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	1c5a      	adds	r2, r3, #1
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	7e1b      	ldrb	r3, [r3, #24]
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	f003 0307 	and.w	r3, r3, #7
 800a37e:	3302      	adds	r3, #2
 800a380:	2201      	movs	r2, #1
 800a382:	fa02 f303 	lsl.w	r3, r2, r3
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a38a:	fb03 f202 	mul.w	r2, r3, r2
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	7a1b      	ldrb	r3, [r3, #8]
 800a396:	b2db      	uxtb	r3, r3
 800a398:	f003 030f 	and.w	r3, r3, #15
 800a39c:	2201      	movs	r2, #1
 800a39e:	409a      	lsls	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a3ac:	0a52      	lsrs	r2, r2, #9
 800a3ae:	fb03 f202 	mul.w	r2, r3, r2
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3bc:	661a      	str	r2, [r3, #96]	; 0x60
 800a3be:	e031      	b.n	800a424 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d11d      	bne.n	800a404 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3cc:	041b      	lsls	r3, r3, #16
 800a3ce:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3d6:	0c1b      	lsrs	r3, r3, #16
 800a3d8:	431a      	orrs	r2, r3
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	029a      	lsls	r2, r3, #10
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3f8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	661a      	str	r2, [r3, #96]	; 0x60
 800a402:	e00f      	b.n	800a424 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a58      	ldr	r2, [pc, #352]	; (800a56c <HAL_SD_GetCardCSD+0x344>)
 800a40a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a410:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e09d      	b.n	800a560 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a428:	0b9b      	lsrs	r3, r3, #14
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	f003 0301 	and.w	r3, r3, #1
 800a430:	b2da      	uxtb	r2, r3
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a43a:	09db      	lsrs	r3, r3, #7
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a442:	b2da      	uxtb	r2, r3
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a452:	b2da      	uxtb	r2, r3
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a45c:	0fdb      	lsrs	r3, r3, #31
 800a45e:	b2da      	uxtb	r2, r3
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a468:	0f5b      	lsrs	r3, r3, #29
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	f003 0303 	and.w	r3, r3, #3
 800a470:	b2da      	uxtb	r2, r3
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a47a:	0e9b      	lsrs	r3, r3, #26
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	f003 0307 	and.w	r3, r3, #7
 800a482:	b2da      	uxtb	r2, r3
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a48c:	0d9b      	lsrs	r3, r3, #22
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	f003 030f 	and.w	r3, r3, #15
 800a494:	b2da      	uxtb	r2, r3
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a49e:	0d5b      	lsrs	r3, r3, #21
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	f003 0301 	and.w	r3, r3, #1
 800a4a6:	b2da      	uxtb	r2, r3
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ba:	0c1b      	lsrs	r3, r3, #16
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	f003 0301 	and.w	r3, r3, #1
 800a4c2:	b2da      	uxtb	r2, r3
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ce:	0bdb      	lsrs	r3, r3, #15
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	f003 0301 	and.w	r3, r3, #1
 800a4d6:	b2da      	uxtb	r2, r3
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4e2:	0b9b      	lsrs	r3, r3, #14
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	f003 0301 	and.w	r3, r3, #1
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f6:	0b5b      	lsrs	r3, r3, #13
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	f003 0301 	and.w	r3, r3, #1
 800a4fe:	b2da      	uxtb	r2, r3
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a50a:	0b1b      	lsrs	r3, r3, #12
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	f003 0301 	and.w	r3, r3, #1
 800a512:	b2da      	uxtb	r2, r3
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a51e:	0a9b      	lsrs	r3, r3, #10
 800a520:	b2db      	uxtb	r3, r3
 800a522:	f003 0303 	and.w	r3, r3, #3
 800a526:	b2da      	uxtb	r2, r3
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a532:	0a1b      	lsrs	r3, r3, #8
 800a534:	b2db      	uxtb	r3, r3
 800a536:	f003 0303 	and.w	r3, r3, #3
 800a53a:	b2da      	uxtb	r2, r3
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a546:	085b      	lsrs	r3, r3, #1
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a54e:	b2da      	uxtb	r2, r3
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	2201      	movs	r2, #1
 800a55a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr
 800a56c:	004005ff 	.word	0x004005ff

0800a570 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a5c8:	b5b0      	push	{r4, r5, r7, lr}
 800a5ca:	b090      	sub	sp, #64	; 0x40
 800a5cc:	af04      	add	r7, sp, #16
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2203      	movs	r2, #3
 800a5dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5e4:	2b03      	cmp	r3, #3
 800a5e6:	d02e      	beq.n	800a646 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ee:	d106      	bne.n	800a5fe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	639a      	str	r2, [r3, #56]	; 0x38
 800a5fc:	e029      	b.n	800a652 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a604:	d10a      	bne.n	800a61c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 faac 	bl	800ab64 <SD_WideBus_Enable>
 800a60c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a614:	431a      	orrs	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	639a      	str	r2, [r3, #56]	; 0x38
 800a61a:	e01a      	b.n	800a652 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10a      	bne.n	800a638 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 fae9 	bl	800abfa <SD_WideBus_Disable>
 800a628:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a630:	431a      	orrs	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	639a      	str	r2, [r3, #56]	; 0x38
 800a636:	e00c      	b.n	800a652 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a63c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	639a      	str	r2, [r3, #56]	; 0x38
 800a644:	e005      	b.n	800a652 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a656:	2b00      	cmp	r3, #0
 800a658:	d007      	beq.n	800a66a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4a35      	ldr	r2, [pc, #212]	; (800a734 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800a660:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a668:	e042      	b.n	800a6f0 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800a66a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a66e:	f7fd ff99 	bl	80085a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a672:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800a674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a676:	2b00      	cmp	r3, #0
 800a678:	d031      	beq.n	800a6de <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	695b      	ldr	r3, [r3, #20]
 800a694:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	699b      	ldr	r3, [r3, #24]
 800a69a:	3302      	adds	r3, #2
 800a69c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a69e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6a2:	4a25      	ldr	r2, [pc, #148]	; (800a738 <HAL_SD_ConfigWideBusOperation+0x170>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d907      	bls.n	800a6b8 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6aa:	4a24      	ldr	r2, [pc, #144]	; (800a73c <HAL_SD_ConfigWideBusOperation+0x174>)
 800a6ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b0:	0ddb      	lsrs	r3, r3, #23
 800a6b2:	3b02      	subs	r3, #2
 800a6b4:	623b      	str	r3, [r7, #32]
 800a6b6:	e002      	b.n	800a6be <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	699b      	ldr	r3, [r3, #24]
 800a6bc:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681d      	ldr	r5, [r3, #0]
 800a6c2:	466c      	mov	r4, sp
 800a6c4:	f107 0318 	add.w	r3, r7, #24
 800a6c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a6cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a6d0:	f107 030c 	add.w	r3, r7, #12
 800a6d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	f001 fea2 	bl	800c420 <SDMMC_Init>
 800a6dc:	e008      	b.n	800a6f0 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f001 ff6f 	bl	800c5dc <SDMMC_CmdBlockLength>
 800a6fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00c      	beq.n	800a720 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a0a      	ldr	r2, [pc, #40]	; (800a734 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800a70c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a714:	431a      	orrs	r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3730      	adds	r7, #48	; 0x30
 800a730:	46bd      	mov	sp, r7
 800a732:	bdb0      	pop	{r4, r5, r7, pc}
 800a734:	004005ff 	.word	0x004005ff
 800a738:	017d7840 	.word	0x017d7840
 800a73c:	55e63b89 	.word	0x55e63b89

0800a740 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a74c:	f107 030c 	add.w	r3, r7, #12
 800a750:	4619      	mov	r1, r3
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f9de 	bl	800ab14 <SD_SendStatus>
 800a758:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d005      	beq.n	800a76c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	431a      	orrs	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	0a5b      	lsrs	r3, r3, #9
 800a770:	f003 030f 	and.w	r3, r3, #15
 800a774:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a776:	693b      	ldr	r3, [r7, #16]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3718      	adds	r7, #24
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a78c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f240 523a 	movw	r2, #1338	; 0x53a
 800a796:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f7ff ffd1 	bl	800a740 <HAL_SD_GetCardState>
 800a79e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	2b06      	cmp	r3, #6
 800a7b2:	d002      	beq.n	800a7ba <SD_DMATxAbort+0x3a>
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	2b05      	cmp	r3, #5
 800a7b8:	d10a      	bne.n	800a7d0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f001 ffb6 	bl	800c730 <SDMMC_CmdStopTransfer>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ca:	431a      	orrs	r2, r3
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d103      	bne.n	800a7e0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f002 fb9f 	bl	800cf1c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a7de:	e002      	b.n	800a7e6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f7ff fd17 	bl	800a214 <HAL_SD_ErrorCallback>
}
 800a7e6:	bf00      	nop
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b084      	sub	sp, #16
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7fa:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f240 523a 	movw	r2, #1338	; 0x53a
 800a804:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f7ff ff9a 	bl	800a740 <HAL_SD_GetCardState>
 800a80c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2201      	movs	r2, #1
 800a812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	2b06      	cmp	r3, #6
 800a820:	d002      	beq.n	800a828 <SD_DMARxAbort+0x3a>
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2b05      	cmp	r3, #5
 800a826:	d10a      	bne.n	800a83e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4618      	mov	r0, r3
 800a82e:	f001 ff7f 	bl	800c730 <SDMMC_CmdStopTransfer>
 800a832:	4602      	mov	r2, r0
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a838:	431a      	orrs	r2, r3
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a842:	2b00      	cmp	r3, #0
 800a844:	d103      	bne.n	800a84e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f002 fb68 	bl	800cf1c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a84c:	e002      	b.n	800a854 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f7ff fce0 	bl	800a214 <HAL_SD_ErrorCallback>
}
 800a854:	bf00      	nop
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a85c:	b5b0      	push	{r4, r5, r7, lr}
 800a85e:	b094      	sub	sp, #80	; 0x50
 800a860:	af04      	add	r7, sp, #16
 800a862:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a864:	2301      	movs	r3, #1
 800a866:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4618      	mov	r0, r3
 800a86e:	f001 fe31 	bl	800c4d4 <SDMMC_GetPowerState>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d102      	bne.n	800a87e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a878:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a87c:	e0b8      	b.n	800a9f0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a882:	2b03      	cmp	r3, #3
 800a884:	d02f      	beq.n	800a8e6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4618      	mov	r0, r3
 800a88c:	f002 f85a 	bl	800c944 <SDMMC_CmdSendCID>
 800a890:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a894:	2b00      	cmp	r3, #0
 800a896:	d001      	beq.n	800a89c <SD_InitCard+0x40>
    {
      return errorstate;
 800a898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a89a:	e0a9      	b.n	800a9f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f001 fe5b 	bl	800c55e <SDMMC_GetResponse>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2104      	movs	r1, #4
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f001 fe52 	bl	800c55e <SDMMC_GetResponse>
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2108      	movs	r1, #8
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f001 fe49 	bl	800c55e <SDMMC_GetResponse>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	210c      	movs	r1, #12
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f001 fe40 	bl	800c55e <SDMMC_GetResponse>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ea:	2b03      	cmp	r3, #3
 800a8ec:	d00d      	beq.n	800a90a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f107 020e 	add.w	r2, r7, #14
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f002 f860 	bl	800c9be <SDMMC_CmdSetRelAdd>
 800a8fe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a902:	2b00      	cmp	r3, #0
 800a904:	d001      	beq.n	800a90a <SD_InitCard+0xae>
    {
      return errorstate;
 800a906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a908:	e072      	b.n	800a9f0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a90e:	2b03      	cmp	r3, #3
 800a910:	d036      	beq.n	800a980 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a912:	89fb      	ldrh	r3, [r7, #14]
 800a914:	461a      	mov	r2, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a922:	041b      	lsls	r3, r3, #16
 800a924:	4619      	mov	r1, r3
 800a926:	4610      	mov	r0, r2
 800a928:	f002 f82a 	bl	800c980 <SDMMC_CmdSendCSD>
 800a92c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a92e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a936:	e05b      	b.n	800a9f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2100      	movs	r1, #0
 800a93e:	4618      	mov	r0, r3
 800a940:	f001 fe0d 	bl	800c55e <SDMMC_GetResponse>
 800a944:	4602      	mov	r2, r0
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2104      	movs	r1, #4
 800a950:	4618      	mov	r0, r3
 800a952:	f001 fe04 	bl	800c55e <SDMMC_GetResponse>
 800a956:	4602      	mov	r2, r0
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2108      	movs	r1, #8
 800a962:	4618      	mov	r0, r3
 800a964:	f001 fdfb 	bl	800c55e <SDMMC_GetResponse>
 800a968:	4602      	mov	r2, r0
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	210c      	movs	r1, #12
 800a974:	4618      	mov	r0, r3
 800a976:	f001 fdf2 	bl	800c55e <SDMMC_GetResponse>
 800a97a:	4602      	mov	r2, r0
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2104      	movs	r1, #4
 800a986:	4618      	mov	r0, r3
 800a988:	f001 fde9 	bl	800c55e <SDMMC_GetResponse>
 800a98c:	4603      	mov	r3, r0
 800a98e:	0d1a      	lsrs	r2, r3, #20
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a994:	f107 0310 	add.w	r3, r7, #16
 800a998:	4619      	mov	r1, r3
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f7ff fc44 	bl	800a228 <HAL_SD_GetCardCSD>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d002      	beq.n	800a9ac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a9a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a9aa:	e021      	b.n	800a9f0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6819      	ldr	r1, [r3, #0]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9b4:	041b      	lsls	r3, r3, #16
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	461c      	mov	r4, r3
 800a9ba:	4615      	mov	r5, r2
 800a9bc:	4622      	mov	r2, r4
 800a9be:	462b      	mov	r3, r5
 800a9c0:	4608      	mov	r0, r1
 800a9c2:	f001 fed7 	bl	800c774 <SDMMC_CmdSelDesel>
 800a9c6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d001      	beq.n	800a9d2 <SD_InitCard+0x176>
  {
    return errorstate;
 800a9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9d0:	e00e      	b.n	800a9f0 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681d      	ldr	r5, [r3, #0]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	466c      	mov	r4, sp
 800a9da:	f103 0210 	add.w	r2, r3, #16
 800a9de:	ca07      	ldmia	r2, {r0, r1, r2}
 800a9e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a9e4:	3304      	adds	r3, #4
 800a9e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	f001 fd19 	bl	800c420 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3740      	adds	r7, #64	; 0x40
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bdb0      	pop	{r4, r5, r7, pc}

0800a9f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b086      	sub	sp, #24
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa00:	2300      	movs	r3, #0
 800aa02:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800aa04:	2300      	movs	r3, #0
 800aa06:	617b      	str	r3, [r7, #20]
 800aa08:	2300      	movs	r3, #0
 800aa0a:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f001 fed2 	bl	800c7ba <SDMMC_CmdGoIdleState>
 800aa16:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <SD_PowerON+0x2a>
  {
    return errorstate;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	e072      	b.n	800ab08 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4618      	mov	r0, r3
 800aa28:	f001 fee5 	bl	800c7f6 <SDMMC_CmdOperCond>
 800aa2c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00d      	beq.n	800aa50 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f001 febb 	bl	800c7ba <SDMMC_CmdGoIdleState>
 800aa44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d004      	beq.n	800aa56 <SD_PowerON+0x5e>
    {
      return errorstate;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	e05b      	b.n	800ab08 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d137      	bne.n	800aace <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2100      	movs	r1, #0
 800aa64:	4618      	mov	r0, r3
 800aa66:	f001 fee5 	bl	800c834 <SDMMC_CmdAppCommand>
 800aa6a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d02d      	beq.n	800aace <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aa76:	e047      	b.n	800ab08 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f001 fed8 	bl	800c834 <SDMMC_CmdAppCommand>
 800aa84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d001      	beq.n	800aa90 <SD_PowerON+0x98>
    {
      return errorstate;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	e03b      	b.n	800ab08 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	491e      	ldr	r1, [pc, #120]	; (800ab10 <SD_PowerON+0x118>)
 800aa96:	4618      	mov	r0, r3
 800aa98:	f001 feee 	bl	800c878 <SDMMC_CmdAppOperCommand>
 800aa9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d002      	beq.n	800aaaa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aaa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aaa8:	e02e      	b.n	800ab08 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2100      	movs	r1, #0
 800aab0:	4618      	mov	r0, r3
 800aab2:	f001 fd54 	bl	800c55e <SDMMC_GetResponse>
 800aab6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	0fdb      	lsrs	r3, r3, #31
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d101      	bne.n	800aac4 <SD_PowerON+0xcc>
 800aac0:	2301      	movs	r3, #1
 800aac2:	e000      	b.n	800aac6 <SD_PowerON+0xce>
 800aac4:	2300      	movs	r3, #0
 800aac6:	613b      	str	r3, [r7, #16]

    count++;
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	3301      	adds	r3, #1
 800aacc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d802      	bhi.n	800aade <SD_PowerON+0xe6>
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d0cc      	beq.n	800aa78 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d902      	bls.n	800aaee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800aae8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aaec:	e00c      	b.n	800ab08 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d003      	beq.n	800ab00 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	645a      	str	r2, [r3, #68]	; 0x44
 800aafe:	e002      	b.n	800ab06 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3718      	adds	r7, #24
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	c1100000 	.word	0xc1100000

0800ab14 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d102      	bne.n	800ab2a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ab24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab28:	e018      	b.n	800ab5c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab32:	041b      	lsls	r3, r3, #16
 800ab34:	4619      	mov	r1, r3
 800ab36:	4610      	mov	r0, r2
 800ab38:	f001 ff62 	bl	800ca00 <SDMMC_CmdSendStatus>
 800ab3c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d001      	beq.n	800ab48 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	e009      	b.n	800ab5c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f001 fd05 	bl	800c55e <SDMMC_GetResponse>
 800ab54:	4602      	mov	r2, r0
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b086      	sub	sp, #24
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	60fb      	str	r3, [r7, #12]
 800ab70:	2300      	movs	r3, #0
 800ab72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2100      	movs	r1, #0
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f001 fcef 	bl	800c55e <SDMMC_GetResponse>
 800ab80:	4603      	mov	r3, r0
 800ab82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab8a:	d102      	bne.n	800ab92 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ab8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab90:	e02f      	b.n	800abf2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ab92:	f107 030c 	add.w	r3, r7, #12
 800ab96:	4619      	mov	r1, r3
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 f879 	bl	800ac90 <SD_FindSCR>
 800ab9e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	e023      	b.n	800abf2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d01c      	beq.n	800abee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abbc:	041b      	lsls	r3, r3, #16
 800abbe:	4619      	mov	r1, r3
 800abc0:	4610      	mov	r0, r2
 800abc2:	f001 fe37 	bl	800c834 <SDMMC_CmdAppCommand>
 800abc6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d001      	beq.n	800abd2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	e00f      	b.n	800abf2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2102      	movs	r1, #2
 800abd8:	4618      	mov	r0, r3
 800abda:	f001 fe70 	bl	800c8be <SDMMC_CmdBusWidth>
 800abde:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d001      	beq.n	800abea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	e003      	b.n	800abf2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800abea:	2300      	movs	r3, #0
 800abec:	e001      	b.n	800abf2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800abee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3718      	adds	r7, #24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b086      	sub	sp, #24
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ac02:	2300      	movs	r3, #0
 800ac04:	60fb      	str	r3, [r7, #12]
 800ac06:	2300      	movs	r3, #0
 800ac08:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2100      	movs	r1, #0
 800ac10:	4618      	mov	r0, r3
 800ac12:	f001 fca4 	bl	800c55e <SDMMC_GetResponse>
 800ac16:	4603      	mov	r3, r0
 800ac18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac20:	d102      	bne.n	800ac28 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ac22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac26:	e02f      	b.n	800ac88 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ac28:	f107 030c 	add.w	r3, r7, #12
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 f82e 	bl	800ac90 <SD_FindSCR>
 800ac34:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d001      	beq.n	800ac40 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	e023      	b.n	800ac88 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d01c      	beq.n	800ac84 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac52:	041b      	lsls	r3, r3, #16
 800ac54:	4619      	mov	r1, r3
 800ac56:	4610      	mov	r0, r2
 800ac58:	f001 fdec 	bl	800c834 <SDMMC_CmdAppCommand>
 800ac5c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d001      	beq.n	800ac68 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	e00f      	b.n	800ac88 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f001 fe25 	bl	800c8be <SDMMC_CmdBusWidth>
 800ac74:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d001      	beq.n	800ac80 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	e003      	b.n	800ac88 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ac80:	2300      	movs	r3, #0
 800ac82:	e001      	b.n	800ac88 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ac84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3718      	adds	r7, #24
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ac90:	b590      	push	{r4, r7, lr}
 800ac92:	b08f      	sub	sp, #60	; 0x3c
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ac9a:	f7f9 ff63 	bl	8004b64 <HAL_GetTick>
 800ac9e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800aca0:	2300      	movs	r3, #0
 800aca2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800aca4:	2300      	movs	r3, #0
 800aca6:	60bb      	str	r3, [r7, #8]
 800aca8:	2300      	movs	r3, #0
 800acaa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2108      	movs	r1, #8
 800acb6:	4618      	mov	r0, r3
 800acb8:	f001 fc90 	bl	800c5dc <SDMMC_CmdBlockLength>
 800acbc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800acbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800acc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc6:	e0a9      	b.n	800ae1c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acd0:	041b      	lsls	r3, r3, #16
 800acd2:	4619      	mov	r1, r3
 800acd4:	4610      	mov	r0, r2
 800acd6:	f001 fdad 	bl	800c834 <SDMMC_CmdAppCommand>
 800acda:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800acdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d001      	beq.n	800ace6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ace2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace4:	e09a      	b.n	800ae1c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ace6:	f04f 33ff 	mov.w	r3, #4294967295
 800acea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800acec:	2308      	movs	r3, #8
 800acee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800acf0:	2330      	movs	r3, #48	; 0x30
 800acf2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800acf4:	2302      	movs	r3, #2
 800acf6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800acf8:	2300      	movs	r3, #0
 800acfa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800acfc:	2301      	movs	r3, #1
 800acfe:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f107 0210 	add.w	r2, r7, #16
 800ad08:	4611      	mov	r1, r2
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f001 fc3a 	bl	800c584 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f001 fdf4 	bl	800c902 <SDMMC_CmdSendSCR>
 800ad1a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d022      	beq.n	800ad68 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800ad22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad24:	e07a      	b.n	800ae1c <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d00e      	beq.n	800ad52 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6819      	ldr	r1, [r3, #0]
 800ad38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	f107 0208 	add.w	r2, r7, #8
 800ad40:	18d4      	adds	r4, r2, r3
 800ad42:	4608      	mov	r0, r1
 800ad44:	f001 fb99 	bl	800c47a <SDMMC_ReadFIFO>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	6023      	str	r3, [r4, #0]
      index++;
 800ad4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad4e:	3301      	adds	r3, #1
 800ad50:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ad52:	f7f9 ff07 	bl	8004b64 <HAL_GetTick>
 800ad56:	4602      	mov	r2, r0
 800ad58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5a:	1ad3      	subs	r3, r2, r3
 800ad5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad60:	d102      	bne.n	800ad68 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ad62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad66:	e059      	b.n	800ae1c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad6e:	f240 432a 	movw	r3, #1066	; 0x42a
 800ad72:	4013      	ands	r3, r2
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d0d6      	beq.n	800ad26 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad7e:	f003 0308 	and.w	r3, r3, #8
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d005      	beq.n	800ad92 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2208      	movs	r2, #8
 800ad8c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ad8e:	2308      	movs	r3, #8
 800ad90:	e044      	b.n	800ae1c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad98:	f003 0302 	and.w	r3, r3, #2
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d005      	beq.n	800adac <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2202      	movs	r2, #2
 800ada6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ada8:	2302      	movs	r3, #2
 800adaa:	e037      	b.n	800ae1c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb2:	f003 0320 	and.w	r3, r3, #32
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d005      	beq.n	800adc6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2220      	movs	r2, #32
 800adc0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800adc2:	2320      	movs	r3, #32
 800adc4:	e02a      	b.n	800ae1c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f240 523a 	movw	r2, #1338	; 0x53a
 800adce:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	061a      	lsls	r2, r3, #24
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	021b      	lsls	r3, r3, #8
 800add8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800addc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	0a1b      	lsrs	r3, r3, #8
 800ade2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ade6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	0e1b      	lsrs	r3, r3, #24
 800adec:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800adee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf0:	601a      	str	r2, [r3, #0]
    scr++;
 800adf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf4:	3304      	adds	r3, #4
 800adf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	061a      	lsls	r2, r3, #24
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	021b      	lsls	r3, r3, #8
 800ae00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae04:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	0a1b      	lsrs	r3, r3, #8
 800ae0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ae0e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	0e1b      	lsrs	r3, r3, #24
 800ae14:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ae16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae18:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	373c      	adds	r7, #60	; 0x3c
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd90      	pop	{r4, r7, pc}

0800ae24 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b086      	sub	sp, #24
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae30:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae36:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d03f      	beq.n	800aebe <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800ae3e:	2300      	movs	r3, #0
 800ae40:	617b      	str	r3, [r7, #20]
 800ae42:	e033      	b.n	800aeac <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f001 fb16 	bl	800c47a <SDMMC_ReadFIFO>
 800ae4e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	b2da      	uxtb	r2, r3
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	3b01      	subs	r3, #1
 800ae62:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	0a1b      	lsrs	r3, r3, #8
 800ae68:	b2da      	uxtb	r2, r3
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	3301      	adds	r3, #1
 800ae72:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	3b01      	subs	r3, #1
 800ae78:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	0c1b      	lsrs	r3, r3, #16
 800ae7e:	b2da      	uxtb	r2, r3
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	3301      	adds	r3, #1
 800ae88:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	3b01      	subs	r3, #1
 800ae8e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	0e1b      	lsrs	r3, r3, #24
 800ae94:	b2da      	uxtb	r2, r3
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	3b01      	subs	r3, #1
 800aea4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	617b      	str	r3, [r7, #20]
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	2b07      	cmp	r3, #7
 800aeb0:	d9c8      	bls.n	800ae44 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	693a      	ldr	r2, [r7, #16]
 800aebc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800aebe:	bf00      	nop
 800aec0:	3718      	adds	r7, #24
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b086      	sub	sp, #24
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a1b      	ldr	r3, [r3, #32]
 800aed2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d043      	beq.n	800af68 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800aee0:	2300      	movs	r3, #0
 800aee2:	617b      	str	r3, [r7, #20]
 800aee4:	e037      	b.n	800af56 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	60bb      	str	r3, [r7, #8]
      tmp++;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	3301      	adds	r3, #1
 800aef0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	3b01      	subs	r3, #1
 800aef6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	021a      	lsls	r2, r3, #8
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	4313      	orrs	r3, r2
 800af02:	60bb      	str	r3, [r7, #8]
      tmp++;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	3301      	adds	r3, #1
 800af08:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	3b01      	subs	r3, #1
 800af0e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	041a      	lsls	r2, r3, #16
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	4313      	orrs	r3, r2
 800af1a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	3301      	adds	r3, #1
 800af20:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	3b01      	subs	r3, #1
 800af26:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	061a      	lsls	r2, r3, #24
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	4313      	orrs	r3, r2
 800af32:	60bb      	str	r3, [r7, #8]
      tmp++;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	3301      	adds	r3, #1
 800af38:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	3b01      	subs	r3, #1
 800af3e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f107 0208 	add.w	r2, r7, #8
 800af48:	4611      	mov	r1, r2
 800af4a:	4618      	mov	r0, r3
 800af4c:	f001 faa2 	bl	800c494 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	3301      	adds	r3, #1
 800af54:	617b      	str	r3, [r7, #20]
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	2b07      	cmp	r3, #7
 800af5a:	d9c4      	bls.n	800aee6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800af68:	bf00      	nop
 800af6a:	3718      	adds	r7, #24
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	e038      	b.n	800aff8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d106      	bne.n	800afa0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2200      	movs	r2, #0
 800af96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f7f9 fc0a 	bl	80047b4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3308      	adds	r3, #8
 800afa8:	4619      	mov	r1, r3
 800afaa:	4610      	mov	r0, r2
 800afac:	f001 f920 	bl	800c1f0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6818      	ldr	r0, [r3, #0]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	461a      	mov	r2, r3
 800afba:	68b9      	ldr	r1, [r7, #8]
 800afbc:	f001 f9a8 	bl	800c310 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	6858      	ldr	r0, [r3, #4]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	689a      	ldr	r2, [r3, #8]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afcc:	6879      	ldr	r1, [r7, #4]
 800afce:	f001 f9ef 	bl	800c3b0 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	6892      	ldr	r2, [r2, #8]
 800afda:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	6892      	ldr	r2, [r2, #8]
 800afe6:	f041 0101 	orr.w	r1, r1, #1
 800afea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2201      	movs	r2, #1
 800aff2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800aff6:	2300      	movs	r3, #0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d101      	bne.n	800b012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b00e:	2301      	movs	r3, #1
 800b010:	e040      	b.n	800b094 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b016:	2b00      	cmp	r3, #0
 800b018:	d106      	bne.n	800b028 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f7f9 fad8 	bl	80045d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2224      	movs	r2, #36	; 0x24
 800b02c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f022 0201 	bic.w	r2, r2, #1
 800b03c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 fbc2 	bl	800b7c8 <UART_SetConfig>
 800b044:	4603      	mov	r3, r0
 800b046:	2b01      	cmp	r3, #1
 800b048:	d101      	bne.n	800b04e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b04a:	2301      	movs	r3, #1
 800b04c:	e022      	b.n	800b094 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b052:	2b00      	cmp	r3, #0
 800b054:	d002      	beq.n	800b05c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fe6e 	bl	800bd38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	685a      	ldr	r2, [r3, #4]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b06a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	689a      	ldr	r2, [r3, #8]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b07a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f042 0201 	orr.w	r2, r2, #1
 800b08a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fef5 	bl	800be7c <UART_CheckIdleState>
 800b092:	4603      	mov	r3, r0
}
 800b094:	4618      	mov	r0, r3
 800b096:	3708      	adds	r7, #8
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b08a      	sub	sp, #40	; 0x28
 800b0a0:	af02      	add	r7, sp, #8
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	603b      	str	r3, [r7, #0]
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0b0:	2b20      	cmp	r3, #32
 800b0b2:	f040 8082 	bne.w	800b1ba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d002      	beq.n	800b0c2 <HAL_UART_Transmit+0x26>
 800b0bc:	88fb      	ldrh	r3, [r7, #6]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d101      	bne.n	800b0c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e07a      	b.n	800b1bc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d101      	bne.n	800b0d4 <HAL_UART_Transmit+0x38>
 800b0d0:	2302      	movs	r3, #2
 800b0d2:	e073      	b.n	800b1bc <HAL_UART_Transmit+0x120>
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2221      	movs	r2, #33	; 0x21
 800b0e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b0ea:	f7f9 fd3b 	bl	8004b64 <HAL_GetTick>
 800b0ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	88fa      	ldrh	r2, [r7, #6]
 800b0f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	88fa      	ldrh	r2, [r7, #6]
 800b0fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b108:	d108      	bne.n	800b11c <HAL_UART_Transmit+0x80>
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d104      	bne.n	800b11c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b112:	2300      	movs	r3, #0
 800b114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	61bb      	str	r3, [r7, #24]
 800b11a:	e003      	b.n	800b124 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b120:	2300      	movs	r3, #0
 800b122:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2200      	movs	r2, #0
 800b128:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b12c:	e02d      	b.n	800b18a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	2200      	movs	r2, #0
 800b136:	2180      	movs	r1, #128	; 0x80
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	f000 fee8 	bl	800bf0e <UART_WaitOnFlagUntilTimeout>
 800b13e:	4603      	mov	r3, r0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d001      	beq.n	800b148 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b144:	2303      	movs	r3, #3
 800b146:	e039      	b.n	800b1bc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10b      	bne.n	800b166 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	881a      	ldrh	r2, [r3, #0]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b15a:	b292      	uxth	r2, r2
 800b15c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	3302      	adds	r3, #2
 800b162:	61bb      	str	r3, [r7, #24]
 800b164:	e008      	b.n	800b178 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	781a      	ldrb	r2, [r3, #0]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	b292      	uxth	r2, r2
 800b170:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	3301      	adds	r3, #1
 800b176:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b17e:	b29b      	uxth	r3, r3
 800b180:	3b01      	subs	r3, #1
 800b182:	b29a      	uxth	r2, r3
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b190:	b29b      	uxth	r3, r3
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1cb      	bne.n	800b12e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	9300      	str	r3, [sp, #0]
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	2200      	movs	r2, #0
 800b19e:	2140      	movs	r1, #64	; 0x40
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f000 feb4 	bl	800bf0e <UART_WaitOnFlagUntilTimeout>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d001      	beq.n	800b1b0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800b1ac:	2303      	movs	r3, #3
 800b1ae:	e005      	b.n	800b1bc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2220      	movs	r2, #32
 800b1b4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	e000      	b.n	800b1bc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800b1ba:	2302      	movs	r3, #2
  }
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3720      	adds	r7, #32
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b0ba      	sub	sp, #232	; 0xe8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	69db      	ldr	r3, [r3, #28]
 800b1d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b1ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b1ee:	f640 030f 	movw	r3, #2063	; 0x80f
 800b1f2:	4013      	ands	r3, r2
 800b1f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b1f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d115      	bne.n	800b22c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b204:	f003 0320 	and.w	r3, r3, #32
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00f      	beq.n	800b22c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b20c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b210:	f003 0320 	and.w	r3, r3, #32
 800b214:	2b00      	cmp	r3, #0
 800b216:	d009      	beq.n	800b22c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f000 82a6 	beq.w	800b76e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	4798      	blx	r3
      }
      return;
 800b22a:	e2a0      	b.n	800b76e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800b22c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b230:	2b00      	cmp	r3, #0
 800b232:	f000 8117 	beq.w	800b464 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b23a:	f003 0301 	and.w	r3, r3, #1
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d106      	bne.n	800b250 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b242:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b246:	4b85      	ldr	r3, [pc, #532]	; (800b45c <HAL_UART_IRQHandler+0x298>)
 800b248:	4013      	ands	r3, r2
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f000 810a 	beq.w	800b464 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b254:	f003 0301 	and.w	r3, r3, #1
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d011      	beq.n	800b280 <HAL_UART_IRQHandler+0xbc>
 800b25c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b264:	2b00      	cmp	r3, #0
 800b266:	d00b      	beq.n	800b280 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2201      	movs	r2, #1
 800b26e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b276:	f043 0201 	orr.w	r2, r3, #1
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b284:	f003 0302 	and.w	r3, r3, #2
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d011      	beq.n	800b2b0 <HAL_UART_IRQHandler+0xec>
 800b28c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b290:	f003 0301 	and.w	r3, r3, #1
 800b294:	2b00      	cmp	r3, #0
 800b296:	d00b      	beq.n	800b2b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2202      	movs	r2, #2
 800b29e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2a6:	f043 0204 	orr.w	r2, r3, #4
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2b4:	f003 0304 	and.w	r3, r3, #4
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d011      	beq.n	800b2e0 <HAL_UART_IRQHandler+0x11c>
 800b2bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2c0:	f003 0301 	and.w	r3, r3, #1
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d00b      	beq.n	800b2e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2204      	movs	r2, #4
 800b2ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2d6:	f043 0202 	orr.w	r2, r3, #2
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b2e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2e4:	f003 0308 	and.w	r3, r3, #8
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d017      	beq.n	800b31c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b2ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2f0:	f003 0320 	and.w	r3, r3, #32
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d105      	bne.n	800b304 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b2f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00b      	beq.n	800b31c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2208      	movs	r2, #8
 800b30a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b312:	f043 0208 	orr.w	r2, r3, #8
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b31c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b324:	2b00      	cmp	r3, #0
 800b326:	d012      	beq.n	800b34e <HAL_UART_IRQHandler+0x18a>
 800b328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b32c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b330:	2b00      	cmp	r3, #0
 800b332:	d00c      	beq.n	800b34e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b33c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b344:	f043 0220 	orr.w	r2, r3, #32
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b354:	2b00      	cmp	r3, #0
 800b356:	f000 820c 	beq.w	800b772 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b35a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b35e:	f003 0320 	and.w	r3, r3, #32
 800b362:	2b00      	cmp	r3, #0
 800b364:	d00d      	beq.n	800b382 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b36a:	f003 0320 	and.w	r3, r3, #32
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d007      	beq.n	800b382 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b376:	2b00      	cmp	r3, #0
 800b378:	d003      	beq.n	800b382 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b388:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b396:	2b40      	cmp	r3, #64	; 0x40
 800b398:	d005      	beq.n	800b3a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b39a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b39e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d04f      	beq.n	800b446 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fe75 	bl	800c096 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b6:	2b40      	cmp	r3, #64	; 0x40
 800b3b8:	d141      	bne.n	800b43e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	3308      	adds	r3, #8
 800b3c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3c8:	e853 3f00 	ldrex	r3, [r3]
 800b3cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b3d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	3308      	adds	r3, #8
 800b3e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b3e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b3ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b3f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b3f6:	e841 2300 	strex	r3, r2, [r1]
 800b3fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b3fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1d9      	bne.n	800b3ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d013      	beq.n	800b436 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b412:	4a13      	ldr	r2, [pc, #76]	; (800b460 <HAL_UART_IRQHandler+0x29c>)
 800b414:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7fa fa48 	bl	80058b0 <HAL_DMA_Abort_IT>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d017      	beq.n	800b456 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b430:	4610      	mov	r0, r2
 800b432:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b434:	e00f      	b.n	800b456 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 f9b0 	bl	800b79c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b43c:	e00b      	b.n	800b456 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 f9ac 	bl	800b79c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b444:	e007      	b.n	800b456 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 f9a8 	bl	800b79c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800b454:	e18d      	b.n	800b772 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b456:	bf00      	nop
    return;
 800b458:	e18b      	b.n	800b772 <HAL_UART_IRQHandler+0x5ae>
 800b45a:	bf00      	nop
 800b45c:	04000120 	.word	0x04000120
 800b460:	0800c15d 	.word	0x0800c15d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b468:	2b01      	cmp	r3, #1
 800b46a:	f040 8146 	bne.w	800b6fa <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b472:	f003 0310 	and.w	r3, r3, #16
 800b476:	2b00      	cmp	r3, #0
 800b478:	f000 813f 	beq.w	800b6fa <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b47c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b480:	f003 0310 	and.w	r3, r3, #16
 800b484:	2b00      	cmp	r3, #0
 800b486:	f000 8138 	beq.w	800b6fa <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2210      	movs	r2, #16
 800b490:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b49c:	2b40      	cmp	r3, #64	; 0x40
 800b49e:	f040 80b4 	bne.w	800b60a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b4ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f000 815f 	beq.w	800b776 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b4be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	f080 8157 	bcs.w	800b776 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b4ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f003 0320 	and.w	r3, r3, #32
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f040 8085 	bne.w	800b5ee <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b4f0:	e853 3f00 	ldrex	r3, [r3]
 800b4f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b4f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b500:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	461a      	mov	r2, r3
 800b50a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b50e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b512:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b516:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b51a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b51e:	e841 2300 	strex	r3, r2, [r1]
 800b522:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1da      	bne.n	800b4e4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	3308      	adds	r3, #8
 800b534:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b538:	e853 3f00 	ldrex	r3, [r3]
 800b53c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b53e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b540:	f023 0301 	bic.w	r3, r3, #1
 800b544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	3308      	adds	r3, #8
 800b54e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b552:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b556:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b558:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b55a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b55e:	e841 2300 	strex	r3, r2, [r1]
 800b562:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1e1      	bne.n	800b52e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	3308      	adds	r3, #8
 800b570:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b574:	e853 3f00 	ldrex	r3, [r3]
 800b578:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b57a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b57c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	3308      	adds	r3, #8
 800b58a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b58e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b590:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b592:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b594:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b596:	e841 2300 	strex	r3, r2, [r1]
 800b59a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b59c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1e3      	bne.n	800b56a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2220      	movs	r2, #32
 800b5a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5b6:	e853 3f00 	ldrex	r3, [r3]
 800b5ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b5bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5be:	f023 0310 	bic.w	r3, r3, #16
 800b5c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b5d0:	65bb      	str	r3, [r7, #88]	; 0x58
 800b5d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b5d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5d8:	e841 2300 	strex	r3, r2, [r1]
 800b5dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b5de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d1e4      	bne.n	800b5ae <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7fa f923 	bl	8005834 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	1ad3      	subs	r3, r2, r3
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	4619      	mov	r1, r3
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 f8d4 	bl	800b7b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b608:	e0b5      	b.n	800b776 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b616:	b29b      	uxth	r3, r3
 800b618:	1ad3      	subs	r3, r2, r3
 800b61a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b624:	b29b      	uxth	r3, r3
 800b626:	2b00      	cmp	r3, #0
 800b628:	f000 80a7 	beq.w	800b77a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800b62c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b630:	2b00      	cmp	r3, #0
 800b632:	f000 80a2 	beq.w	800b77a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63e:	e853 3f00 	ldrex	r3, [r3]
 800b642:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b646:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b64a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	461a      	mov	r2, r3
 800b654:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b658:	647b      	str	r3, [r7, #68]	; 0x44
 800b65a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b65c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b65e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b660:	e841 2300 	strex	r3, r2, [r1]
 800b664:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d1e4      	bne.n	800b636 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	3308      	adds	r3, #8
 800b672:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b676:	e853 3f00 	ldrex	r3, [r3]
 800b67a:	623b      	str	r3, [r7, #32]
   return(result);
 800b67c:	6a3b      	ldr	r3, [r7, #32]
 800b67e:	f023 0301 	bic.w	r3, r3, #1
 800b682:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	3308      	adds	r3, #8
 800b68c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b690:	633a      	str	r2, [r7, #48]	; 0x30
 800b692:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b694:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b698:	e841 2300 	strex	r3, r2, [r1]
 800b69c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1e3      	bne.n	800b66c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2220      	movs	r2, #32
 800b6a8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	e853 3f00 	ldrex	r3, [r3]
 800b6c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f023 0310 	bic.w	r3, r3, #16
 800b6ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b6d8:	61fb      	str	r3, [r7, #28]
 800b6da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6dc:	69b9      	ldr	r1, [r7, #24]
 800b6de:	69fa      	ldr	r2, [r7, #28]
 800b6e0:	e841 2300 	strex	r3, r2, [r1]
 800b6e4:	617b      	str	r3, [r7, #20]
   return(result);
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d1e4      	bne.n	800b6b6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b6ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 f85c 	bl	800b7b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b6f8:	e03f      	b.n	800b77a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b6fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00e      	beq.n	800b724 <HAL_UART_IRQHandler+0x560>
 800b706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b70a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d008      	beq.n	800b724 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b71a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 fd5d 	bl	800c1dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b722:	e02d      	b.n	800b780 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d00e      	beq.n	800b74e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d008      	beq.n	800b74e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b740:	2b00      	cmp	r3, #0
 800b742:	d01c      	beq.n	800b77e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	4798      	blx	r3
    }
    return;
 800b74c:	e017      	b.n	800b77e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b74e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b756:	2b00      	cmp	r3, #0
 800b758:	d012      	beq.n	800b780 <HAL_UART_IRQHandler+0x5bc>
 800b75a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b75e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00c      	beq.n	800b780 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 fd0e 	bl	800c188 <UART_EndTransmit_IT>
    return;
 800b76c:	e008      	b.n	800b780 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b76e:	bf00      	nop
 800b770:	e006      	b.n	800b780 <HAL_UART_IRQHandler+0x5bc>
    return;
 800b772:	bf00      	nop
 800b774:	e004      	b.n	800b780 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b776:	bf00      	nop
 800b778:	e002      	b.n	800b780 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b77a:	bf00      	nop
 800b77c:	e000      	b.n	800b780 <HAL_UART_IRQHandler+0x5bc>
    return;
 800b77e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b780:	37e8      	adds	r7, #232	; 0xe8
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop

0800b788 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b7a4:	bf00      	nop
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b7bc:	bf00      	nop
 800b7be:	370c      	adds	r7, #12
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7cc:	b08a      	sub	sp, #40	; 0x28
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	689a      	ldr	r2, [r3, #8]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	691b      	ldr	r3, [r3, #16]
 800b7e0:	431a      	orrs	r2, r3
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	695b      	ldr	r3, [r3, #20]
 800b7e6:	431a      	orrs	r2, r3
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	69db      	ldr	r3, [r3, #28]
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	4ba4      	ldr	r3, [pc, #656]	; (800ba88 <UART_SetConfig+0x2c0>)
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	68fa      	ldr	r2, [r7, #12]
 800b7fc:	6812      	ldr	r2, [r2, #0]
 800b7fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b800:	430b      	orrs	r3, r1
 800b802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	68da      	ldr	r2, [r3, #12]
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	430a      	orrs	r2, r1
 800b818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	699b      	ldr	r3, [r3, #24]
 800b81e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a99      	ldr	r2, [pc, #612]	; (800ba8c <UART_SetConfig+0x2c4>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d004      	beq.n	800b834 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	6a1b      	ldr	r3, [r3, #32]
 800b82e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b830:	4313      	orrs	r3, r2
 800b832:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b844:	430a      	orrs	r2, r1
 800b846:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a90      	ldr	r2, [pc, #576]	; (800ba90 <UART_SetConfig+0x2c8>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d126      	bne.n	800b8a0 <UART_SetConfig+0xd8>
 800b852:	4b90      	ldr	r3, [pc, #576]	; (800ba94 <UART_SetConfig+0x2cc>)
 800b854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b858:	f003 0303 	and.w	r3, r3, #3
 800b85c:	2b03      	cmp	r3, #3
 800b85e:	d81b      	bhi.n	800b898 <UART_SetConfig+0xd0>
 800b860:	a201      	add	r2, pc, #4	; (adr r2, 800b868 <UART_SetConfig+0xa0>)
 800b862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b866:	bf00      	nop
 800b868:	0800b879 	.word	0x0800b879
 800b86c:	0800b889 	.word	0x0800b889
 800b870:	0800b881 	.word	0x0800b881
 800b874:	0800b891 	.word	0x0800b891
 800b878:	2301      	movs	r3, #1
 800b87a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b87e:	e116      	b.n	800baae <UART_SetConfig+0x2e6>
 800b880:	2302      	movs	r3, #2
 800b882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b886:	e112      	b.n	800baae <UART_SetConfig+0x2e6>
 800b888:	2304      	movs	r3, #4
 800b88a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b88e:	e10e      	b.n	800baae <UART_SetConfig+0x2e6>
 800b890:	2308      	movs	r3, #8
 800b892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b896:	e10a      	b.n	800baae <UART_SetConfig+0x2e6>
 800b898:	2310      	movs	r3, #16
 800b89a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b89e:	e106      	b.n	800baae <UART_SetConfig+0x2e6>
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a7c      	ldr	r2, [pc, #496]	; (800ba98 <UART_SetConfig+0x2d0>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d138      	bne.n	800b91c <UART_SetConfig+0x154>
 800b8aa:	4b7a      	ldr	r3, [pc, #488]	; (800ba94 <UART_SetConfig+0x2cc>)
 800b8ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8b0:	f003 030c 	and.w	r3, r3, #12
 800b8b4:	2b0c      	cmp	r3, #12
 800b8b6:	d82d      	bhi.n	800b914 <UART_SetConfig+0x14c>
 800b8b8:	a201      	add	r2, pc, #4	; (adr r2, 800b8c0 <UART_SetConfig+0xf8>)
 800b8ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8be:	bf00      	nop
 800b8c0:	0800b8f5 	.word	0x0800b8f5
 800b8c4:	0800b915 	.word	0x0800b915
 800b8c8:	0800b915 	.word	0x0800b915
 800b8cc:	0800b915 	.word	0x0800b915
 800b8d0:	0800b905 	.word	0x0800b905
 800b8d4:	0800b915 	.word	0x0800b915
 800b8d8:	0800b915 	.word	0x0800b915
 800b8dc:	0800b915 	.word	0x0800b915
 800b8e0:	0800b8fd 	.word	0x0800b8fd
 800b8e4:	0800b915 	.word	0x0800b915
 800b8e8:	0800b915 	.word	0x0800b915
 800b8ec:	0800b915 	.word	0x0800b915
 800b8f0:	0800b90d 	.word	0x0800b90d
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b8fa:	e0d8      	b.n	800baae <UART_SetConfig+0x2e6>
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b902:	e0d4      	b.n	800baae <UART_SetConfig+0x2e6>
 800b904:	2304      	movs	r3, #4
 800b906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b90a:	e0d0      	b.n	800baae <UART_SetConfig+0x2e6>
 800b90c:	2308      	movs	r3, #8
 800b90e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b912:	e0cc      	b.n	800baae <UART_SetConfig+0x2e6>
 800b914:	2310      	movs	r3, #16
 800b916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b91a:	e0c8      	b.n	800baae <UART_SetConfig+0x2e6>
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a5e      	ldr	r2, [pc, #376]	; (800ba9c <UART_SetConfig+0x2d4>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d125      	bne.n	800b972 <UART_SetConfig+0x1aa>
 800b926:	4b5b      	ldr	r3, [pc, #364]	; (800ba94 <UART_SetConfig+0x2cc>)
 800b928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b92c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b930:	2b30      	cmp	r3, #48	; 0x30
 800b932:	d016      	beq.n	800b962 <UART_SetConfig+0x19a>
 800b934:	2b30      	cmp	r3, #48	; 0x30
 800b936:	d818      	bhi.n	800b96a <UART_SetConfig+0x1a2>
 800b938:	2b20      	cmp	r3, #32
 800b93a:	d00a      	beq.n	800b952 <UART_SetConfig+0x18a>
 800b93c:	2b20      	cmp	r3, #32
 800b93e:	d814      	bhi.n	800b96a <UART_SetConfig+0x1a2>
 800b940:	2b00      	cmp	r3, #0
 800b942:	d002      	beq.n	800b94a <UART_SetConfig+0x182>
 800b944:	2b10      	cmp	r3, #16
 800b946:	d008      	beq.n	800b95a <UART_SetConfig+0x192>
 800b948:	e00f      	b.n	800b96a <UART_SetConfig+0x1a2>
 800b94a:	2300      	movs	r3, #0
 800b94c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b950:	e0ad      	b.n	800baae <UART_SetConfig+0x2e6>
 800b952:	2302      	movs	r3, #2
 800b954:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b958:	e0a9      	b.n	800baae <UART_SetConfig+0x2e6>
 800b95a:	2304      	movs	r3, #4
 800b95c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b960:	e0a5      	b.n	800baae <UART_SetConfig+0x2e6>
 800b962:	2308      	movs	r3, #8
 800b964:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b968:	e0a1      	b.n	800baae <UART_SetConfig+0x2e6>
 800b96a:	2310      	movs	r3, #16
 800b96c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b970:	e09d      	b.n	800baae <UART_SetConfig+0x2e6>
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a4a      	ldr	r2, [pc, #296]	; (800baa0 <UART_SetConfig+0x2d8>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d125      	bne.n	800b9c8 <UART_SetConfig+0x200>
 800b97c:	4b45      	ldr	r3, [pc, #276]	; (800ba94 <UART_SetConfig+0x2cc>)
 800b97e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b982:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b986:	2bc0      	cmp	r3, #192	; 0xc0
 800b988:	d016      	beq.n	800b9b8 <UART_SetConfig+0x1f0>
 800b98a:	2bc0      	cmp	r3, #192	; 0xc0
 800b98c:	d818      	bhi.n	800b9c0 <UART_SetConfig+0x1f8>
 800b98e:	2b80      	cmp	r3, #128	; 0x80
 800b990:	d00a      	beq.n	800b9a8 <UART_SetConfig+0x1e0>
 800b992:	2b80      	cmp	r3, #128	; 0x80
 800b994:	d814      	bhi.n	800b9c0 <UART_SetConfig+0x1f8>
 800b996:	2b00      	cmp	r3, #0
 800b998:	d002      	beq.n	800b9a0 <UART_SetConfig+0x1d8>
 800b99a:	2b40      	cmp	r3, #64	; 0x40
 800b99c:	d008      	beq.n	800b9b0 <UART_SetConfig+0x1e8>
 800b99e:	e00f      	b.n	800b9c0 <UART_SetConfig+0x1f8>
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b9a6:	e082      	b.n	800baae <UART_SetConfig+0x2e6>
 800b9a8:	2302      	movs	r3, #2
 800b9aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b9ae:	e07e      	b.n	800baae <UART_SetConfig+0x2e6>
 800b9b0:	2304      	movs	r3, #4
 800b9b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b9b6:	e07a      	b.n	800baae <UART_SetConfig+0x2e6>
 800b9b8:	2308      	movs	r3, #8
 800b9ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b9be:	e076      	b.n	800baae <UART_SetConfig+0x2e6>
 800b9c0:	2310      	movs	r3, #16
 800b9c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b9c6:	e072      	b.n	800baae <UART_SetConfig+0x2e6>
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a35      	ldr	r2, [pc, #212]	; (800baa4 <UART_SetConfig+0x2dc>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d12a      	bne.n	800ba28 <UART_SetConfig+0x260>
 800b9d2:	4b30      	ldr	r3, [pc, #192]	; (800ba94 <UART_SetConfig+0x2cc>)
 800b9d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9e0:	d01a      	beq.n	800ba18 <UART_SetConfig+0x250>
 800b9e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9e6:	d81b      	bhi.n	800ba20 <UART_SetConfig+0x258>
 800b9e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9ec:	d00c      	beq.n	800ba08 <UART_SetConfig+0x240>
 800b9ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9f2:	d815      	bhi.n	800ba20 <UART_SetConfig+0x258>
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d003      	beq.n	800ba00 <UART_SetConfig+0x238>
 800b9f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9fc:	d008      	beq.n	800ba10 <UART_SetConfig+0x248>
 800b9fe:	e00f      	b.n	800ba20 <UART_SetConfig+0x258>
 800ba00:	2300      	movs	r3, #0
 800ba02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba06:	e052      	b.n	800baae <UART_SetConfig+0x2e6>
 800ba08:	2302      	movs	r3, #2
 800ba0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba0e:	e04e      	b.n	800baae <UART_SetConfig+0x2e6>
 800ba10:	2304      	movs	r3, #4
 800ba12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba16:	e04a      	b.n	800baae <UART_SetConfig+0x2e6>
 800ba18:	2308      	movs	r3, #8
 800ba1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba1e:	e046      	b.n	800baae <UART_SetConfig+0x2e6>
 800ba20:	2310      	movs	r3, #16
 800ba22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba26:	e042      	b.n	800baae <UART_SetConfig+0x2e6>
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a17      	ldr	r2, [pc, #92]	; (800ba8c <UART_SetConfig+0x2c4>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d13a      	bne.n	800baa8 <UART_SetConfig+0x2e0>
 800ba32:	4b18      	ldr	r3, [pc, #96]	; (800ba94 <UART_SetConfig+0x2cc>)
 800ba34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ba3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ba40:	d01a      	beq.n	800ba78 <UART_SetConfig+0x2b0>
 800ba42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ba46:	d81b      	bhi.n	800ba80 <UART_SetConfig+0x2b8>
 800ba48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba4c:	d00c      	beq.n	800ba68 <UART_SetConfig+0x2a0>
 800ba4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba52:	d815      	bhi.n	800ba80 <UART_SetConfig+0x2b8>
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d003      	beq.n	800ba60 <UART_SetConfig+0x298>
 800ba58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba5c:	d008      	beq.n	800ba70 <UART_SetConfig+0x2a8>
 800ba5e:	e00f      	b.n	800ba80 <UART_SetConfig+0x2b8>
 800ba60:	2300      	movs	r3, #0
 800ba62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba66:	e022      	b.n	800baae <UART_SetConfig+0x2e6>
 800ba68:	2302      	movs	r3, #2
 800ba6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba6e:	e01e      	b.n	800baae <UART_SetConfig+0x2e6>
 800ba70:	2304      	movs	r3, #4
 800ba72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba76:	e01a      	b.n	800baae <UART_SetConfig+0x2e6>
 800ba78:	2308      	movs	r3, #8
 800ba7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba7e:	e016      	b.n	800baae <UART_SetConfig+0x2e6>
 800ba80:	2310      	movs	r3, #16
 800ba82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba86:	e012      	b.n	800baae <UART_SetConfig+0x2e6>
 800ba88:	efff69f3 	.word	0xefff69f3
 800ba8c:	40008000 	.word	0x40008000
 800ba90:	40013800 	.word	0x40013800
 800ba94:	40021000 	.word	0x40021000
 800ba98:	40004400 	.word	0x40004400
 800ba9c:	40004800 	.word	0x40004800
 800baa0:	40004c00 	.word	0x40004c00
 800baa4:	40005000 	.word	0x40005000
 800baa8:	2310      	movs	r3, #16
 800baaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a9f      	ldr	r2, [pc, #636]	; (800bd30 <UART_SetConfig+0x568>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d17a      	bne.n	800bbae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bab8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800babc:	2b08      	cmp	r3, #8
 800babe:	d824      	bhi.n	800bb0a <UART_SetConfig+0x342>
 800bac0:	a201      	add	r2, pc, #4	; (adr r2, 800bac8 <UART_SetConfig+0x300>)
 800bac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac6:	bf00      	nop
 800bac8:	0800baed 	.word	0x0800baed
 800bacc:	0800bb0b 	.word	0x0800bb0b
 800bad0:	0800baf5 	.word	0x0800baf5
 800bad4:	0800bb0b 	.word	0x0800bb0b
 800bad8:	0800bafb 	.word	0x0800bafb
 800badc:	0800bb0b 	.word	0x0800bb0b
 800bae0:	0800bb0b 	.word	0x0800bb0b
 800bae4:	0800bb0b 	.word	0x0800bb0b
 800bae8:	0800bb03 	.word	0x0800bb03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800baec:	f7fc f8da 	bl	8007ca4 <HAL_RCC_GetPCLK1Freq>
 800baf0:	61f8      	str	r0, [r7, #28]
        break;
 800baf2:	e010      	b.n	800bb16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800baf4:	4b8f      	ldr	r3, [pc, #572]	; (800bd34 <UART_SetConfig+0x56c>)
 800baf6:	61fb      	str	r3, [r7, #28]
        break;
 800baf8:	e00d      	b.n	800bb16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bafa:	f7fc f83b 	bl	8007b74 <HAL_RCC_GetSysClockFreq>
 800bafe:	61f8      	str	r0, [r7, #28]
        break;
 800bb00:	e009      	b.n	800bb16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb06:	61fb      	str	r3, [r7, #28]
        break;
 800bb08:	e005      	b.n	800bb16 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bb14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	f000 80fb 	beq.w	800bd14 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	685a      	ldr	r2, [r3, #4]
 800bb22:	4613      	mov	r3, r2
 800bb24:	005b      	lsls	r3, r3, #1
 800bb26:	4413      	add	r3, r2
 800bb28:	69fa      	ldr	r2, [r7, #28]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d305      	bcc.n	800bb3a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bb34:	69fa      	ldr	r2, [r7, #28]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d903      	bls.n	800bb42 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800bb40:	e0e8      	b.n	800bd14 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800bb42:	69fb      	ldr	r3, [r7, #28]
 800bb44:	2200      	movs	r2, #0
 800bb46:	461c      	mov	r4, r3
 800bb48:	4615      	mov	r5, r2
 800bb4a:	f04f 0200 	mov.w	r2, #0
 800bb4e:	f04f 0300 	mov.w	r3, #0
 800bb52:	022b      	lsls	r3, r5, #8
 800bb54:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800bb58:	0222      	lsls	r2, r4, #8
 800bb5a:	68f9      	ldr	r1, [r7, #12]
 800bb5c:	6849      	ldr	r1, [r1, #4]
 800bb5e:	0849      	lsrs	r1, r1, #1
 800bb60:	2000      	movs	r0, #0
 800bb62:	4688      	mov	r8, r1
 800bb64:	4681      	mov	r9, r0
 800bb66:	eb12 0a08 	adds.w	sl, r2, r8
 800bb6a:	eb43 0b09 	adc.w	fp, r3, r9
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	603b      	str	r3, [r7, #0]
 800bb76:	607a      	str	r2, [r7, #4]
 800bb78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb7c:	4650      	mov	r0, sl
 800bb7e:	4659      	mov	r1, fp
 800bb80:	f7f4 fb86 	bl	8000290 <__aeabi_uldivmod>
 800bb84:	4602      	mov	r2, r0
 800bb86:	460b      	mov	r3, r1
 800bb88:	4613      	mov	r3, r2
 800bb8a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bb8c:	69bb      	ldr	r3, [r7, #24]
 800bb8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb92:	d308      	bcc.n	800bba6 <UART_SetConfig+0x3de>
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb9a:	d204      	bcs.n	800bba6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	69ba      	ldr	r2, [r7, #24]
 800bba2:	60da      	str	r2, [r3, #12]
 800bba4:	e0b6      	b.n	800bd14 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800bbac:	e0b2      	b.n	800bd14 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	69db      	ldr	r3, [r3, #28]
 800bbb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbb6:	d15e      	bne.n	800bc76 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800bbb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bbbc:	2b08      	cmp	r3, #8
 800bbbe:	d828      	bhi.n	800bc12 <UART_SetConfig+0x44a>
 800bbc0:	a201      	add	r2, pc, #4	; (adr r2, 800bbc8 <UART_SetConfig+0x400>)
 800bbc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc6:	bf00      	nop
 800bbc8:	0800bbed 	.word	0x0800bbed
 800bbcc:	0800bbf5 	.word	0x0800bbf5
 800bbd0:	0800bbfd 	.word	0x0800bbfd
 800bbd4:	0800bc13 	.word	0x0800bc13
 800bbd8:	0800bc03 	.word	0x0800bc03
 800bbdc:	0800bc13 	.word	0x0800bc13
 800bbe0:	0800bc13 	.word	0x0800bc13
 800bbe4:	0800bc13 	.word	0x0800bc13
 800bbe8:	0800bc0b 	.word	0x0800bc0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbec:	f7fc f85a 	bl	8007ca4 <HAL_RCC_GetPCLK1Freq>
 800bbf0:	61f8      	str	r0, [r7, #28]
        break;
 800bbf2:	e014      	b.n	800bc1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bbf4:	f7fc f86c 	bl	8007cd0 <HAL_RCC_GetPCLK2Freq>
 800bbf8:	61f8      	str	r0, [r7, #28]
        break;
 800bbfa:	e010      	b.n	800bc1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bbfc:	4b4d      	ldr	r3, [pc, #308]	; (800bd34 <UART_SetConfig+0x56c>)
 800bbfe:	61fb      	str	r3, [r7, #28]
        break;
 800bc00:	e00d      	b.n	800bc1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc02:	f7fb ffb7 	bl	8007b74 <HAL_RCC_GetSysClockFreq>
 800bc06:	61f8      	str	r0, [r7, #28]
        break;
 800bc08:	e009      	b.n	800bc1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc0e:	61fb      	str	r3, [r7, #28]
        break;
 800bc10:	e005      	b.n	800bc1e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800bc12:	2300      	movs	r3, #0
 800bc14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bc1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc1e:	69fb      	ldr	r3, [r7, #28]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d077      	beq.n	800bd14 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	005a      	lsls	r2, r3, #1
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	085b      	lsrs	r3, r3, #1
 800bc2e:	441a      	add	r2, r3
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc3a:	69bb      	ldr	r3, [r7, #24]
 800bc3c:	2b0f      	cmp	r3, #15
 800bc3e:	d916      	bls.n	800bc6e <UART_SetConfig+0x4a6>
 800bc40:	69bb      	ldr	r3, [r7, #24]
 800bc42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc46:	d212      	bcs.n	800bc6e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	f023 030f 	bic.w	r3, r3, #15
 800bc50:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	085b      	lsrs	r3, r3, #1
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	f003 0307 	and.w	r3, r3, #7
 800bc5c:	b29a      	uxth	r2, r3
 800bc5e:	8afb      	ldrh	r3, [r7, #22]
 800bc60:	4313      	orrs	r3, r2
 800bc62:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	8afa      	ldrh	r2, [r7, #22]
 800bc6a:	60da      	str	r2, [r3, #12]
 800bc6c:	e052      	b.n	800bd14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800bc74:	e04e      	b.n	800bd14 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bc76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc7a:	2b08      	cmp	r3, #8
 800bc7c:	d827      	bhi.n	800bcce <UART_SetConfig+0x506>
 800bc7e:	a201      	add	r2, pc, #4	; (adr r2, 800bc84 <UART_SetConfig+0x4bc>)
 800bc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc84:	0800bca9 	.word	0x0800bca9
 800bc88:	0800bcb1 	.word	0x0800bcb1
 800bc8c:	0800bcb9 	.word	0x0800bcb9
 800bc90:	0800bccf 	.word	0x0800bccf
 800bc94:	0800bcbf 	.word	0x0800bcbf
 800bc98:	0800bccf 	.word	0x0800bccf
 800bc9c:	0800bccf 	.word	0x0800bccf
 800bca0:	0800bccf 	.word	0x0800bccf
 800bca4:	0800bcc7 	.word	0x0800bcc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bca8:	f7fb fffc 	bl	8007ca4 <HAL_RCC_GetPCLK1Freq>
 800bcac:	61f8      	str	r0, [r7, #28]
        break;
 800bcae:	e014      	b.n	800bcda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bcb0:	f7fc f80e 	bl	8007cd0 <HAL_RCC_GetPCLK2Freq>
 800bcb4:	61f8      	str	r0, [r7, #28]
        break;
 800bcb6:	e010      	b.n	800bcda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bcb8:	4b1e      	ldr	r3, [pc, #120]	; (800bd34 <UART_SetConfig+0x56c>)
 800bcba:	61fb      	str	r3, [r7, #28]
        break;
 800bcbc:	e00d      	b.n	800bcda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bcbe:	f7fb ff59 	bl	8007b74 <HAL_RCC_GetSysClockFreq>
 800bcc2:	61f8      	str	r0, [r7, #28]
        break;
 800bcc4:	e009      	b.n	800bcda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcca:	61fb      	str	r3, [r7, #28]
        break;
 800bccc:	e005      	b.n	800bcda <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bcd8:	bf00      	nop
    }

    if (pclk != 0U)
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d019      	beq.n	800bd14 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	085a      	lsrs	r2, r3, #1
 800bce6:	69fb      	ldr	r3, [r7, #28]
 800bce8:	441a      	add	r2, r3
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcf2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcf4:	69bb      	ldr	r3, [r7, #24]
 800bcf6:	2b0f      	cmp	r3, #15
 800bcf8:	d909      	bls.n	800bd0e <UART_SetConfig+0x546>
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd00:	d205      	bcs.n	800bd0e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	b29a      	uxth	r2, r3
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	60da      	str	r2, [r3, #12]
 800bd0c:	e002      	b.n	800bd14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2200      	movs	r2, #0
 800bd18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800bd20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3728      	adds	r7, #40	; 0x28
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd2e:	bf00      	nop
 800bd30:	40008000 	.word	0x40008000
 800bd34:	00f42400 	.word	0x00f42400

0800bd38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd44:	f003 0301 	and.w	r3, r3, #1
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d00a      	beq.n	800bd62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	430a      	orrs	r2, r1
 800bd60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd66:	f003 0302 	and.w	r3, r3, #2
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00a      	beq.n	800bd84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	430a      	orrs	r2, r1
 800bd82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd88:	f003 0304 	and.w	r3, r3, #4
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d00a      	beq.n	800bda6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	430a      	orrs	r2, r1
 800bda4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdaa:	f003 0308 	and.w	r3, r3, #8
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d00a      	beq.n	800bdc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	430a      	orrs	r2, r1
 800bdc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdcc:	f003 0310 	and.w	r3, r3, #16
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d00a      	beq.n	800bdea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	430a      	orrs	r2, r1
 800bde8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdee:	f003 0320 	and.w	r3, r3, #32
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d00a      	beq.n	800be0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	430a      	orrs	r2, r1
 800be0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be14:	2b00      	cmp	r3, #0
 800be16:	d01a      	beq.n	800be4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	430a      	orrs	r2, r1
 800be2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be36:	d10a      	bne.n	800be4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	430a      	orrs	r2, r1
 800be4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00a      	beq.n	800be70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	430a      	orrs	r2, r1
 800be6e:	605a      	str	r2, [r3, #4]
  }
}
 800be70:	bf00      	nop
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b086      	sub	sp, #24
 800be80:	af02      	add	r7, sp, #8
 800be82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be8c:	f7f8 fe6a 	bl	8004b64 <HAL_GetTick>
 800be90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f003 0308 	and.w	r3, r3, #8
 800be9c:	2b08      	cmp	r3, #8
 800be9e:	d10e      	bne.n	800bebe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bea4:	9300      	str	r3, [sp, #0]
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2200      	movs	r2, #0
 800beaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 f82d 	bl	800bf0e <UART_WaitOnFlagUntilTimeout>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d001      	beq.n	800bebe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800beba:	2303      	movs	r3, #3
 800bebc:	e023      	b.n	800bf06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f003 0304 	and.w	r3, r3, #4
 800bec8:	2b04      	cmp	r3, #4
 800beca:	d10e      	bne.n	800beea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800becc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bed0:	9300      	str	r3, [sp, #0]
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2200      	movs	r2, #0
 800bed6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 f817 	bl	800bf0e <UART_WaitOnFlagUntilTimeout>
 800bee0:	4603      	mov	r3, r0
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d001      	beq.n	800beea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bee6:	2303      	movs	r3, #3
 800bee8:	e00d      	b.n	800bf06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2220      	movs	r2, #32
 800beee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2220      	movs	r2, #32
 800bef4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2200      	movs	r2, #0
 800befa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b09c      	sub	sp, #112	; 0x70
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	60f8      	str	r0, [r7, #12]
 800bf16:	60b9      	str	r1, [r7, #8]
 800bf18:	603b      	str	r3, [r7, #0]
 800bf1a:	4613      	mov	r3, r2
 800bf1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf1e:	e0a5      	b.n	800c06c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf26:	f000 80a1 	beq.w	800c06c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf2a:	f7f8 fe1b 	bl	8004b64 <HAL_GetTick>
 800bf2e:	4602      	mov	r2, r0
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	1ad3      	subs	r3, r2, r3
 800bf34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d302      	bcc.n	800bf40 <UART_WaitOnFlagUntilTimeout+0x32>
 800bf3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d13e      	bne.n	800bfbe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf48:	e853 3f00 	ldrex	r3, [r3]
 800bf4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bf4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bf54:	667b      	str	r3, [r7, #100]	; 0x64
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf60:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf66:	e841 2300 	strex	r3, r2, [r1]
 800bf6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bf6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1e6      	bne.n	800bf40 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	3308      	adds	r3, #8
 800bf78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf7c:	e853 3f00 	ldrex	r3, [r3]
 800bf80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf84:	f023 0301 	bic.w	r3, r3, #1
 800bf88:	663b      	str	r3, [r7, #96]	; 0x60
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	3308      	adds	r3, #8
 800bf90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bf92:	64ba      	str	r2, [r7, #72]	; 0x48
 800bf94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf9a:	e841 2300 	strex	r3, r2, [r1]
 800bf9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bfa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d1e5      	bne.n	800bf72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2220      	movs	r2, #32
 800bfaa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2220      	movs	r2, #32
 800bfb0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800bfba:	2303      	movs	r3, #3
 800bfbc:	e067      	b.n	800c08e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f003 0304 	and.w	r3, r3, #4
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d04f      	beq.n	800c06c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	69db      	ldr	r3, [r3, #28]
 800bfd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bfd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfda:	d147      	bne.n	800c06c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bfe4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfee:	e853 3f00 	ldrex	r3, [r3]
 800bff2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bffa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	461a      	mov	r2, r3
 800c002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c004:	637b      	str	r3, [r7, #52]	; 0x34
 800c006:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c008:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c00a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c00c:	e841 2300 	strex	r3, r2, [r1]
 800c010:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1e6      	bne.n	800bfe6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	3308      	adds	r3, #8
 800c01e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	e853 3f00 	ldrex	r3, [r3]
 800c026:	613b      	str	r3, [r7, #16]
   return(result);
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	f023 0301 	bic.w	r3, r3, #1
 800c02e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	3308      	adds	r3, #8
 800c036:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c038:	623a      	str	r2, [r7, #32]
 800c03a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03c:	69f9      	ldr	r1, [r7, #28]
 800c03e:	6a3a      	ldr	r2, [r7, #32]
 800c040:	e841 2300 	strex	r3, r2, [r1]
 800c044:	61bb      	str	r3, [r7, #24]
   return(result);
 800c046:	69bb      	ldr	r3, [r7, #24]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d1e5      	bne.n	800c018 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2220      	movs	r2, #32
 800c050:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2220      	movs	r2, #32
 800c056:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2220      	movs	r2, #32
 800c05c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2200      	movs	r2, #0
 800c064:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c068:	2303      	movs	r3, #3
 800c06a:	e010      	b.n	800c08e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	69da      	ldr	r2, [r3, #28]
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	4013      	ands	r3, r2
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	429a      	cmp	r2, r3
 800c07a:	bf0c      	ite	eq
 800c07c:	2301      	moveq	r3, #1
 800c07e:	2300      	movne	r3, #0
 800c080:	b2db      	uxtb	r3, r3
 800c082:	461a      	mov	r2, r3
 800c084:	79fb      	ldrb	r3, [r7, #7]
 800c086:	429a      	cmp	r2, r3
 800c088:	f43f af4a 	beq.w	800bf20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3770      	adds	r7, #112	; 0x70
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}

0800c096 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c096:	b480      	push	{r7}
 800c098:	b095      	sub	sp, #84	; 0x54
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0a6:	e853 3f00 	ldrex	r3, [r3]
 800c0aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0bc:	643b      	str	r3, [r7, #64]	; 0x40
 800c0be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c0c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0c4:	e841 2300 	strex	r3, r2, [r1]
 800c0c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d1e6      	bne.n	800c09e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	3308      	adds	r3, #8
 800c0d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d8:	6a3b      	ldr	r3, [r7, #32]
 800c0da:	e853 3f00 	ldrex	r3, [r3]
 800c0de:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	f023 0301 	bic.w	r3, r3, #1
 800c0e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	3308      	adds	r3, #8
 800c0ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0f8:	e841 2300 	strex	r3, r2, [r1]
 800c0fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c100:	2b00      	cmp	r3, #0
 800c102:	d1e5      	bne.n	800c0d0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d118      	bne.n	800c13e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	e853 3f00 	ldrex	r3, [r3]
 800c118:	60bb      	str	r3, [r7, #8]
   return(result);
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	f023 0310 	bic.w	r3, r3, #16
 800c120:	647b      	str	r3, [r7, #68]	; 0x44
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	461a      	mov	r2, r3
 800c128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c12a:	61bb      	str	r3, [r7, #24]
 800c12c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12e:	6979      	ldr	r1, [r7, #20]
 800c130:	69ba      	ldr	r2, [r7, #24]
 800c132:	e841 2300 	strex	r3, r2, [r1]
 800c136:	613b      	str	r3, [r7, #16]
   return(result);
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d1e6      	bne.n	800c10c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2220      	movs	r2, #32
 800c142:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2200      	movs	r2, #0
 800c14e:	665a      	str	r2, [r3, #100]	; 0x64
}
 800c150:	bf00      	nop
 800c152:	3754      	adds	r7, #84	; 0x54
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr

0800c15c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c168:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2200      	movs	r2, #0
 800c16e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2200      	movs	r2, #0
 800c176:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	f7ff fb0e 	bl	800b79c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c180:	bf00      	nop
 800c182:	3710      	adds	r7, #16
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b088      	sub	sp, #32
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	e853 3f00 	ldrex	r3, [r3]
 800c19c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1a4:	61fb      	str	r3, [r7, #28]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	61bb      	str	r3, [r7, #24]
 800c1b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1b2:	6979      	ldr	r1, [r7, #20]
 800c1b4:	69ba      	ldr	r2, [r7, #24]
 800c1b6:	e841 2300 	strex	r3, r2, [r1]
 800c1ba:	613b      	str	r3, [r7, #16]
   return(result);
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d1e6      	bne.n	800c190 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2220      	movs	r2, #32
 800c1c6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f7ff fada 	bl	800b788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1d4:	bf00      	nop
 800c1d6:	3720      	adds	r7, #32
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c1e4:	bf00      	nop
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b087      	sub	sp, #28
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c204:	683a      	ldr	r2, [r7, #0]
 800c206:	6812      	ldr	r2, [r2, #0]
 800c208:	f023 0101 	bic.w	r1, r3, #1
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	689b      	ldr	r3, [r3, #8]
 800c216:	2b08      	cmp	r3, #8
 800c218:	d102      	bne.n	800c220 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800c21a:	2340      	movs	r3, #64	; 0x40
 800c21c:	617b      	str	r3, [r7, #20]
 800c21e:	e001      	b.n	800c224 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800c220:	2300      	movs	r3, #0
 800c222:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800c230:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800c236:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800c23c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800c242:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800c248:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800c24e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800c254:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800c25a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800c260:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800c266:	4313      	orrs	r3, r2
 800c268:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c26e:	693a      	ldr	r2, [r7, #16]
 800c270:	4313      	orrs	r3, r2
 800c272:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c278:	693a      	ldr	r2, [r7, #16]
 800c27a:	4313      	orrs	r3, r2
 800c27c:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c282:	693a      	ldr	r2, [r7, #16]
 800c284:	4313      	orrs	r3, r2
 800c286:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800c288:	4b20      	ldr	r3, [pc, #128]	; (800c30c <FMC_NORSRAM_Init+0x11c>)
 800c28a:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c292:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c29a:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800c2a2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	43db      	mvns	r3, r3
 800c2b2:	ea02 0103 	and.w	r1, r2, r3
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	4319      	orrs	r1, r3
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2cc:	d10c      	bne.n	800c2e8 <FMC_NORSRAM_Init+0xf8>
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d008      	beq.n	800c2e8 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2e2:	431a      	orrs	r2, r3
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d006      	beq.n	800c2fe <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2f8:	431a      	orrs	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800c2fe:	2300      	movs	r3, #0
}
 800c300:	4618      	mov	r0, r3
 800c302:	371c      	adds	r7, #28
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr
 800c30c:	0008fb7f 	.word	0x0008fb7f

0800c310 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c310:	b480      	push	{r7}
 800c312:	b087      	sub	sp, #28
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	1c5a      	adds	r2, r3, #1
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c326:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	011b      	lsls	r3, r3, #4
 800c334:	431a      	orrs	r2, r3
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	021b      	lsls	r3, r3, #8
 800c33c:	431a      	orrs	r2, r3
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	691b      	ldr	r3, [r3, #16]
 800c342:	041b      	lsls	r3, r3, #16
 800c344:	431a      	orrs	r2, r3
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	695b      	ldr	r3, [r3, #20]
 800c34a:	3b01      	subs	r3, #1
 800c34c:	051b      	lsls	r3, r3, #20
 800c34e:	431a      	orrs	r2, r3
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	699b      	ldr	r3, [r3, #24]
 800c354:	3b02      	subs	r3, #2
 800c356:	061b      	lsls	r3, r3, #24
 800c358:	431a      	orrs	r2, r3
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	69db      	ldr	r3, [r3, #28]
 800c35e:	4313      	orrs	r3, r2
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	3201      	adds	r2, #1
 800c364:	4319      	orrs	r1, r3
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c378:	d113      	bne.n	800c3a2 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c382:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	695b      	ldr	r3, [r3, #20]
 800c388:	3b01      	subs	r3, #1
 800c38a:	051b      	lsls	r3, r3, #20
 800c38c:	697a      	ldr	r2, [r7, #20]
 800c38e:	4313      	orrs	r3, r2
 800c390:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	431a      	orrs	r2, r3
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c3a2:	2300      	movs	r3, #0
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	371c      	adds	r7, #28
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr

0800c3b0 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b085      	sub	sp, #20
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	607a      	str	r2, [r7, #4]
 800c3bc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3c4:	d11d      	bne.n	800c402 <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c3ce:	4b13      	ldr	r3, [pc, #76]	; (800c41c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800c3d0:	4013      	ands	r3, r2
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	6811      	ldr	r1, [r2, #0]
 800c3d6:	68ba      	ldr	r2, [r7, #8]
 800c3d8:	6852      	ldr	r2, [r2, #4]
 800c3da:	0112      	lsls	r2, r2, #4
 800c3dc:	4311      	orrs	r1, r2
 800c3de:	68ba      	ldr	r2, [r7, #8]
 800c3e0:	6892      	ldr	r2, [r2, #8]
 800c3e2:	0212      	lsls	r2, r2, #8
 800c3e4:	4311      	orrs	r1, r2
 800c3e6:	68ba      	ldr	r2, [r7, #8]
 800c3e8:	69d2      	ldr	r2, [r2, #28]
 800c3ea:	4311      	orrs	r1, r2
 800c3ec:	68ba      	ldr	r2, [r7, #8]
 800c3ee:	6912      	ldr	r2, [r2, #16]
 800c3f0:	0412      	lsls	r2, r2, #16
 800c3f2:	430a      	orrs	r2, r1
 800c3f4:	ea43 0102 	orr.w	r1, r3, r2
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c400:	e005      	b.n	800c40e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c40a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800c40e:	2300      	movs	r3, #0
}
 800c410:	4618      	mov	r0, r3
 800c412:	3714      	adds	r7, #20
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr
 800c41c:	cff00000 	.word	0xcff00000

0800c420 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c420:	b084      	sub	sp, #16
 800c422:	b480      	push	{r7}
 800c424:	b085      	sub	sp, #20
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
 800c42a:	f107 001c 	add.w	r0, r7, #28
 800c42e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c432:	2300      	movs	r3, #0
 800c434:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800c436:	6a3b      	ldr	r3, [r7, #32]
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	4313      	orrs	r3, r2
 800c43c:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800c43e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800c440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800c442:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c444:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c446:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c44a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c44e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c450:	68fa      	ldr	r2, [r7, #12]
 800c452:	4313      	orrs	r3, r2
 800c454:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c45e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	431a      	orrs	r2, r3
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c46a:	2300      	movs	r3, #0
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3714      	adds	r7, #20
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	b004      	add	sp, #16
 800c478:	4770      	bx	lr

0800c47a <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c47a:	b480      	push	{r7}
 800c47c:	b083      	sub	sp, #12
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c488:	4618      	mov	r0, r3
 800c48a:	370c      	adds	r7, #12
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	681a      	ldr	r2, [r3, #0]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c4a8:	2300      	movs	r3, #0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	370c      	adds	r7, #12
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr

0800c4b6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b082      	sub	sp, #8
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2203      	movs	r2, #3
 800c4c2:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c4c4:	2002      	movs	r0, #2
 800c4c6:	f7f8 fb59 	bl	8004b7c <HAL_Delay>

  return HAL_OK;
 800c4ca:	2300      	movs	r3, #0
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3708      	adds	r7, #8
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f003 0303 	and.w	r3, r3, #3
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b085      	sub	sp, #20
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c50e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c514:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c51a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c51c:	68fa      	ldr	r2, [r7, #12]
 800c51e:	4313      	orrs	r3, r2
 800c520:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	68db      	ldr	r3, [r3, #12]
 800c526:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c52a:	f023 030f 	bic.w	r3, r3, #15
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	431a      	orrs	r2, r3
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c536:	2300      	movs	r3, #0
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3714      	adds	r7, #20
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	691b      	ldr	r3, [r3, #16]
 800c550:	b2db      	uxtb	r3, r3
}
 800c552:	4618      	mov	r0, r3
 800c554:	370c      	adds	r7, #12
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr

0800c55e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c55e:	b480      	push	{r7}
 800c560:	b085      	sub	sp, #20
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
 800c566:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	3314      	adds	r3, #20
 800c56c:	461a      	mov	r2, r3
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	4413      	add	r3, r2
 800c572:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3714      	adds	r7, #20
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c58e:	2300      	movs	r3, #0
 800c590:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	685a      	ldr	r2, [r3, #4]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c5aa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c5b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c5b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	431a      	orrs	r2, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c5ce:	2300      	movs	r3, #0

}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3714      	adds	r7, #20
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr

0800c5dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b088      	sub	sp, #32
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c5ea:	2310      	movs	r3, #16
 800c5ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5ee:	2340      	movs	r3, #64	; 0x40
 800c5f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5fc:	f107 0308 	add.w	r3, r7, #8
 800c600:	4619      	mov	r1, r3
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7ff ff74 	bl	800c4f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c608:	f241 3288 	movw	r2, #5000	; 0x1388
 800c60c:	2110      	movs	r1, #16
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 fa18 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c616:	69fb      	ldr	r3, [r7, #28]
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3720      	adds	r7, #32
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b088      	sub	sp, #32
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c62e:	2311      	movs	r3, #17
 800c630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c632:	2340      	movs	r3, #64	; 0x40
 800c634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c636:	2300      	movs	r3, #0
 800c638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c63a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c63e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c640:	f107 0308 	add.w	r3, r7, #8
 800c644:	4619      	mov	r1, r3
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7ff ff52 	bl	800c4f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c64c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c650:	2111      	movs	r1, #17
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 f9f6 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c658:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c65a:	69fb      	ldr	r3, [r7, #28]
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3720      	adds	r7, #32
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b088      	sub	sp, #32
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c672:	2312      	movs	r3, #18
 800c674:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c676:	2340      	movs	r3, #64	; 0x40
 800c678:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c67a:	2300      	movs	r3, #0
 800c67c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c67e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c682:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c684:	f107 0308 	add.w	r3, r7, #8
 800c688:	4619      	mov	r1, r3
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f7ff ff30 	bl	800c4f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c690:	f241 3288 	movw	r2, #5000	; 0x1388
 800c694:	2112      	movs	r1, #18
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 f9d4 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c69c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c69e:	69fb      	ldr	r3, [r7, #28]
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3720      	adds	r7, #32
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b088      	sub	sp, #32
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c6b6:	2318      	movs	r3, #24
 800c6b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6ba:	2340      	movs	r3, #64	; 0x40
 800c6bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6c8:	f107 0308 	add.w	r3, r7, #8
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f7ff ff0e 	bl	800c4f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c6d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6d8:	2118      	movs	r1, #24
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 f9b2 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c6e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6e2:	69fb      	ldr	r3, [r7, #28]
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3720      	adds	r7, #32
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b088      	sub	sp, #32
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c6fa:	2319      	movs	r3, #25
 800c6fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6fe:	2340      	movs	r3, #64	; 0x40
 800c700:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c702:	2300      	movs	r3, #0
 800c704:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c70a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c70c:	f107 0308 	add.w	r3, r7, #8
 800c710:	4619      	mov	r1, r3
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f7ff feec 	bl	800c4f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c718:	f241 3288 	movw	r2, #5000	; 0x1388
 800c71c:	2119      	movs	r1, #25
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f990 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c724:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c726:	69fb      	ldr	r3, [r7, #28]
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3720      	adds	r7, #32
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b088      	sub	sp, #32
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c738:	2300      	movs	r3, #0
 800c73a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c73c:	230c      	movs	r3, #12
 800c73e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c740:	2340      	movs	r3, #64	; 0x40
 800c742:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c744:	2300      	movs	r3, #0
 800c746:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c74c:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c74e:	f107 0308 	add.w	r3, r7, #8
 800c752:	4619      	mov	r1, r3
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f7ff fecb 	bl	800c4f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c75a:	4a05      	ldr	r2, [pc, #20]	; (800c770 <SDMMC_CmdStopTransfer+0x40>)
 800c75c:	210c      	movs	r1, #12
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 f970 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c764:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800c766:	69fb      	ldr	r3, [r7, #28]
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3720      	adds	r7, #32
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	05f5e100 	.word	0x05f5e100

0800c774 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b08a      	sub	sp, #40	; 0x28
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c784:	2307      	movs	r3, #7
 800c786:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c788:	2340      	movs	r3, #64	; 0x40
 800c78a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c78c:	2300      	movs	r3, #0
 800c78e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c794:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c796:	f107 0310 	add.w	r3, r7, #16
 800c79a:	4619      	mov	r1, r3
 800c79c:	68f8      	ldr	r0, [r7, #12]
 800c79e:	f7ff fea7 	bl	800c4f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c7a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7a6:	2107      	movs	r1, #7
 800c7a8:	68f8      	ldr	r0, [r7, #12]
 800c7aa:	f000 f94b 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c7ae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3728      	adds	r7, #40	; 0x28
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}

0800c7ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b088      	sub	sp, #32
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7d8:	f107 0308 	add.w	r3, r7, #8
 800c7dc:	4619      	mov	r1, r3
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f7ff fe86 	bl	800c4f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 fb65 	bl	800ceb4 <SDMMC_GetCmdError>
 800c7ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7ec:	69fb      	ldr	r3, [r7, #28]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3720      	adds	r7, #32
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b088      	sub	sp, #32
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c7fe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c802:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c804:	2308      	movs	r3, #8
 800c806:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c808:	2340      	movs	r3, #64	; 0x40
 800c80a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c80c:	2300      	movs	r3, #0
 800c80e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c814:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c816:	f107 0308 	add.w	r3, r7, #8
 800c81a:	4619      	mov	r1, r3
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f7ff fe67 	bl	800c4f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 faf8 	bl	800ce18 <SDMMC_GetCmdResp7>
 800c828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c82a:	69fb      	ldr	r3, [r7, #28]
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3720      	adds	r7, #32
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b088      	sub	sp, #32
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c842:	2337      	movs	r3, #55	; 0x37
 800c844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c846:	2340      	movs	r3, #64	; 0x40
 800c848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c84a:	2300      	movs	r3, #0
 800c84c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c84e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c852:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c854:	f107 0308 	add.w	r3, r7, #8
 800c858:	4619      	mov	r1, r3
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f7ff fe48 	bl	800c4f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c860:	f241 3288 	movw	r2, #5000	; 0x1388
 800c864:	2137      	movs	r1, #55	; 0x37
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 f8ec 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c86c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c86e:	69fb      	ldr	r3, [r7, #28]
}
 800c870:	4618      	mov	r0, r3
 800c872:	3720      	adds	r7, #32
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b088      	sub	sp, #32
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c88c:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c88e:	2329      	movs	r3, #41	; 0x29
 800c890:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c892:	2340      	movs	r3, #64	; 0x40
 800c894:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c896:	2300      	movs	r3, #0
 800c898:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c89a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c89e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8a0:	f107 0308 	add.w	r3, r7, #8
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f7ff fe22 	bl	800c4f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 f9ff 	bl	800ccb0 <SDMMC_GetCmdResp3>
 800c8b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8b4:	69fb      	ldr	r3, [r7, #28]
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3720      	adds	r7, #32
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b088      	sub	sp, #32
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
 800c8c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c8cc:	2306      	movs	r3, #6
 800c8ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8d0:	2340      	movs	r3, #64	; 0x40
 800c8d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8de:	f107 0308 	add.w	r3, r7, #8
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f7ff fe03 	bl	800c4f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c8ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8ee:	2106      	movs	r1, #6
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 f8a7 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c8f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8f8:	69fb      	ldr	r3, [r7, #28]
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3720      	adds	r7, #32
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c902:	b580      	push	{r7, lr}
 800c904:	b088      	sub	sp, #32
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c90a:	2300      	movs	r3, #0
 800c90c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c90e:	2333      	movs	r3, #51	; 0x33
 800c910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c912:	2340      	movs	r3, #64	; 0x40
 800c914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c916:	2300      	movs	r3, #0
 800c918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c91a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c91e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c920:	f107 0308 	add.w	r3, r7, #8
 800c924:	4619      	mov	r1, r3
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f7ff fde2 	bl	800c4f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c92c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c930:	2133      	movs	r1, #51	; 0x33
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f886 	bl	800ca44 <SDMMC_GetCmdResp1>
 800c938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c93a:	69fb      	ldr	r3, [r7, #28]
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3720      	adds	r7, #32
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b088      	sub	sp, #32
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c94c:	2300      	movs	r3, #0
 800c94e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c950:	2302      	movs	r3, #2
 800c952:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c954:	23c0      	movs	r3, #192	; 0xc0
 800c956:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c958:	2300      	movs	r3, #0
 800c95a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c95c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c960:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c962:	f107 0308 	add.w	r3, r7, #8
 800c966:	4619      	mov	r1, r3
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f7ff fdc1 	bl	800c4f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 f956 	bl	800cc20 <SDMMC_GetCmdResp2>
 800c974:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c976:	69fb      	ldr	r3, [r7, #28]
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3720      	adds	r7, #32
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b088      	sub	sp, #32
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c98e:	2309      	movs	r3, #9
 800c990:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c992:	23c0      	movs	r3, #192	; 0xc0
 800c994:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c996:	2300      	movs	r3, #0
 800c998:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c99a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c99e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9a0:	f107 0308 	add.w	r3, r7, #8
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f7ff fda2 	bl	800c4f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 f937 	bl	800cc20 <SDMMC_GetCmdResp2>
 800c9b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9b4:	69fb      	ldr	r3, [r7, #28]
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3720      	adds	r7, #32
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c9be:	b580      	push	{r7, lr}
 800c9c0:	b088      	sub	sp, #32
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	6078      	str	r0, [r7, #4]
 800c9c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c9cc:	2303      	movs	r3, #3
 800c9ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9d0:	2340      	movs	r3, #64	; 0x40
 800c9d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9de:	f107 0308 	add.w	r3, r7, #8
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f7ff fd83 	bl	800c4f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c9ea:	683a      	ldr	r2, [r7, #0]
 800c9ec:	2103      	movs	r1, #3
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f000 f99c 	bl	800cd2c <SDMMC_GetCmdResp6>
 800c9f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9f6:	69fb      	ldr	r3, [r7, #28]
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3720      	adds	r7, #32
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b088      	sub	sp, #32
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ca0e:	230d      	movs	r3, #13
 800ca10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca12:	2340      	movs	r3, #64	; 0x40
 800ca14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca16:	2300      	movs	r3, #0
 800ca18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca20:	f107 0308 	add.w	r3, r7, #8
 800ca24:	4619      	mov	r1, r3
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f7ff fd62 	bl	800c4f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ca2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca30:	210d      	movs	r1, #13
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 f806 	bl	800ca44 <SDMMC_GetCmdResp1>
 800ca38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca3a:	69fb      	ldr	r3, [r7, #28]
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3720      	adds	r7, #32
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b088      	sub	sp, #32
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	607a      	str	r2, [r7, #4]
 800ca50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ca52:	4b70      	ldr	r3, [pc, #448]	; (800cc14 <SDMMC_GetCmdResp1+0x1d0>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4a70      	ldr	r2, [pc, #448]	; (800cc18 <SDMMC_GetCmdResp1+0x1d4>)
 800ca58:	fba2 2303 	umull	r2, r3, r2, r3
 800ca5c:	0a5a      	lsrs	r2, r3, #9
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	fb02 f303 	mul.w	r3, r2, r3
 800ca64:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ca66:	69fb      	ldr	r3, [r7, #28]
 800ca68:	1e5a      	subs	r2, r3, #1
 800ca6a:	61fa      	str	r2, [r7, #28]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d102      	bne.n	800ca76 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca74:	e0c9      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca7a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d0ef      	beq.n	800ca66 <SDMMC_GetCmdResp1+0x22>
 800ca86:	69bb      	ldr	r3, [r7, #24]
 800ca88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d1ea      	bne.n	800ca66 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca94:	f003 0304 	and.w	r3, r3, #4
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d004      	beq.n	800caa6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2204      	movs	r2, #4
 800caa0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800caa2:	2304      	movs	r3, #4
 800caa4:	e0b1      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caaa:	f003 0301 	and.w	r3, r3, #1
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d004      	beq.n	800cabc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2201      	movs	r2, #1
 800cab6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cab8:	2301      	movs	r3, #1
 800caba:	e0a6      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	22c5      	movs	r2, #197	; 0xc5
 800cac0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cac2:	68f8      	ldr	r0, [r7, #12]
 800cac4:	f7ff fd3e 	bl	800c544 <SDMMC_GetCommandResponse>
 800cac8:	4603      	mov	r3, r0
 800caca:	461a      	mov	r2, r3
 800cacc:	7afb      	ldrb	r3, [r7, #11]
 800cace:	4293      	cmp	r3, r2
 800cad0:	d001      	beq.n	800cad6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cad2:	2301      	movs	r3, #1
 800cad4:	e099      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cad6:	2100      	movs	r1, #0
 800cad8:	68f8      	ldr	r0, [r7, #12]
 800cada:	f7ff fd40 	bl	800c55e <SDMMC_GetResponse>
 800cade:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cae0:	697a      	ldr	r2, [r7, #20]
 800cae2:	4b4e      	ldr	r3, [pc, #312]	; (800cc1c <SDMMC_GetCmdResp1+0x1d8>)
 800cae4:	4013      	ands	r3, r2
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d101      	bne.n	800caee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800caea:	2300      	movs	r3, #0
 800caec:	e08d      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	da02      	bge.n	800cafa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800caf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800caf8:	e087      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d001      	beq.n	800cb08 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cb04:	2340      	movs	r3, #64	; 0x40
 800cb06:	e080      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d001      	beq.n	800cb16 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cb12:	2380      	movs	r3, #128	; 0x80
 800cb14:	e079      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d002      	beq.n	800cb26 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cb20:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb24:	e071      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d002      	beq.n	800cb36 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cb30:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb34:	e069      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d002      	beq.n	800cb46 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cb40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb44:	e061      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d002      	beq.n	800cb56 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cb50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb54:	e059      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d002      	beq.n	800cb66 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cb60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb64:	e051      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d002      	beq.n	800cb76 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cb70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cb74:	e049      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d002      	beq.n	800cb86 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cb80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cb84:	e041      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d002      	beq.n	800cb96 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cb90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb94:	e039      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d002      	beq.n	800cba6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cba4:	e031      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d002      	beq.n	800cbb6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cbb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cbb4:	e029      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d002      	beq.n	800cbc6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cbc0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cbc4:	e021      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d002      	beq.n	800cbd6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cbd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cbd4:	e019      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d002      	beq.n	800cbe6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cbe0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cbe4:	e011      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d002      	beq.n	800cbf6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cbf0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cbf4:	e009      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	f003 0308 	and.w	r3, r3, #8
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d002      	beq.n	800cc06 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cc00:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cc04:	e001      	b.n	800cc0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cc06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3720      	adds	r7, #32
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	200000a4 	.word	0x200000a4
 800cc18:	10624dd3 	.word	0x10624dd3
 800cc1c:	fdffe008 	.word	0xfdffe008

0800cc20 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b085      	sub	sp, #20
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc28:	4b1f      	ldr	r3, [pc, #124]	; (800cca8 <SDMMC_GetCmdResp2+0x88>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a1f      	ldr	r2, [pc, #124]	; (800ccac <SDMMC_GetCmdResp2+0x8c>)
 800cc2e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc32:	0a5b      	lsrs	r3, r3, #9
 800cc34:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc38:	fb02 f303 	mul.w	r3, r2, r3
 800cc3c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	1e5a      	subs	r2, r3, #1
 800cc42:	60fa      	str	r2, [r7, #12]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d102      	bne.n	800cc4e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc4c:	e026      	b.n	800cc9c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc52:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d0ef      	beq.n	800cc3e <SDMMC_GetCmdResp2+0x1e>
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d1ea      	bne.n	800cc3e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc6c:	f003 0304 	and.w	r3, r3, #4
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d004      	beq.n	800cc7e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2204      	movs	r2, #4
 800cc78:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc7a:	2304      	movs	r3, #4
 800cc7c:	e00e      	b.n	800cc9c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc82:	f003 0301 	and.w	r3, r3, #1
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d004      	beq.n	800cc94 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc90:	2301      	movs	r3, #1
 800cc92:	e003      	b.n	800cc9c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	22c5      	movs	r2, #197	; 0xc5
 800cc98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3714      	adds	r7, #20
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr
 800cca8:	200000a4 	.word	0x200000a4
 800ccac:	10624dd3 	.word	0x10624dd3

0800ccb0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b085      	sub	sp, #20
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ccb8:	4b1a      	ldr	r3, [pc, #104]	; (800cd24 <SDMMC_GetCmdResp3+0x74>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4a1a      	ldr	r2, [pc, #104]	; (800cd28 <SDMMC_GetCmdResp3+0x78>)
 800ccbe:	fba2 2303 	umull	r2, r3, r2, r3
 800ccc2:	0a5b      	lsrs	r3, r3, #9
 800ccc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccc8:	fb02 f303 	mul.w	r3, r2, r3
 800cccc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	1e5a      	subs	r2, r3, #1
 800ccd2:	60fa      	str	r2, [r7, #12]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d102      	bne.n	800ccde <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ccd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ccdc:	e01b      	b.n	800cd16 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cce2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d0ef      	beq.n	800ccce <SDMMC_GetCmdResp3+0x1e>
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d1ea      	bne.n	800ccce <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccfc:	f003 0304 	and.w	r3, r3, #4
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d004      	beq.n	800cd0e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2204      	movs	r2, #4
 800cd08:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd0a:	2304      	movs	r3, #4
 800cd0c:	e003      	b.n	800cd16 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	22c5      	movs	r2, #197	; 0xc5
 800cd12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3714      	adds	r7, #20
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr
 800cd22:	bf00      	nop
 800cd24:	200000a4 	.word	0x200000a4
 800cd28:	10624dd3 	.word	0x10624dd3

0800cd2c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b088      	sub	sp, #32
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	460b      	mov	r3, r1
 800cd36:	607a      	str	r2, [r7, #4]
 800cd38:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd3a:	4b35      	ldr	r3, [pc, #212]	; (800ce10 <SDMMC_GetCmdResp6+0xe4>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	4a35      	ldr	r2, [pc, #212]	; (800ce14 <SDMMC_GetCmdResp6+0xe8>)
 800cd40:	fba2 2303 	umull	r2, r3, r2, r3
 800cd44:	0a5b      	lsrs	r3, r3, #9
 800cd46:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd4a:	fb02 f303 	mul.w	r3, r2, r3
 800cd4e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800cd50:	69fb      	ldr	r3, [r7, #28]
 800cd52:	1e5a      	subs	r2, r3, #1
 800cd54:	61fa      	str	r2, [r7, #28]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d102      	bne.n	800cd60 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd5e:	e052      	b.n	800ce06 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd64:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd66:	69bb      	ldr	r3, [r7, #24]
 800cd68:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d0ef      	beq.n	800cd50 <SDMMC_GetCmdResp6+0x24>
 800cd70:	69bb      	ldr	r3, [r7, #24]
 800cd72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d1ea      	bne.n	800cd50 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd7e:	f003 0304 	and.w	r3, r3, #4
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d004      	beq.n	800cd90 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2204      	movs	r2, #4
 800cd8a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd8c:	2304      	movs	r3, #4
 800cd8e:	e03a      	b.n	800ce06 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd94:	f003 0301 	and.w	r3, r3, #1
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d004      	beq.n	800cda6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2201      	movs	r2, #1
 800cda0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cda2:	2301      	movs	r3, #1
 800cda4:	e02f      	b.n	800ce06 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cda6:	68f8      	ldr	r0, [r7, #12]
 800cda8:	f7ff fbcc 	bl	800c544 <SDMMC_GetCommandResponse>
 800cdac:	4603      	mov	r3, r0
 800cdae:	461a      	mov	r2, r3
 800cdb0:	7afb      	ldrb	r3, [r7, #11]
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d001      	beq.n	800cdba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e025      	b.n	800ce06 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	22c5      	movs	r2, #197	; 0xc5
 800cdbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cdc0:	2100      	movs	r1, #0
 800cdc2:	68f8      	ldr	r0, [r7, #12]
 800cdc4:	f7ff fbcb 	bl	800c55e <SDMMC_GetResponse>
 800cdc8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d106      	bne.n	800cde2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	0c1b      	lsrs	r3, r3, #16
 800cdd8:	b29a      	uxth	r2, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800cdde:	2300      	movs	r3, #0
 800cde0:	e011      	b.n	800ce06 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d002      	beq.n	800cdf2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cdec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cdf0:	e009      	b.n	800ce06 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d002      	beq.n	800ce02 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cdfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce00:	e001      	b.n	800ce06 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ce02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3720      	adds	r7, #32
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	200000a4 	.word	0x200000a4
 800ce14:	10624dd3 	.word	0x10624dd3

0800ce18 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b085      	sub	sp, #20
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce20:	4b22      	ldr	r3, [pc, #136]	; (800ceac <SDMMC_GetCmdResp7+0x94>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	4a22      	ldr	r2, [pc, #136]	; (800ceb0 <SDMMC_GetCmdResp7+0x98>)
 800ce26:	fba2 2303 	umull	r2, r3, r2, r3
 800ce2a:	0a5b      	lsrs	r3, r3, #9
 800ce2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce30:	fb02 f303 	mul.w	r3, r2, r3
 800ce34:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	1e5a      	subs	r2, r3, #1
 800ce3a:	60fa      	str	r2, [r7, #12]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d102      	bne.n	800ce46 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce44:	e02c      	b.n	800cea0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce4a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d0ef      	beq.n	800ce36 <SDMMC_GetCmdResp7+0x1e>
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d1ea      	bne.n	800ce36 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce64:	f003 0304 	and.w	r3, r3, #4
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d004      	beq.n	800ce76 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2204      	movs	r2, #4
 800ce70:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce72:	2304      	movs	r3, #4
 800ce74:	e014      	b.n	800cea0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce7a:	f003 0301 	and.w	r3, r3, #1
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d004      	beq.n	800ce8c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2201      	movs	r2, #1
 800ce86:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	e009      	b.n	800cea0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d002      	beq.n	800ce9e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2240      	movs	r2, #64	; 0x40
 800ce9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ce9e:	2300      	movs	r3, #0

}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3714      	adds	r7, #20
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr
 800ceac:	200000a4 	.word	0x200000a4
 800ceb0:	10624dd3 	.word	0x10624dd3

0800ceb4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b085      	sub	sp, #20
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cebc:	4b11      	ldr	r3, [pc, #68]	; (800cf04 <SDMMC_GetCmdError+0x50>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a11      	ldr	r2, [pc, #68]	; (800cf08 <SDMMC_GetCmdError+0x54>)
 800cec2:	fba2 2303 	umull	r2, r3, r2, r3
 800cec6:	0a5b      	lsrs	r3, r3, #9
 800cec8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cecc:	fb02 f303 	mul.w	r3, r2, r3
 800ced0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	1e5a      	subs	r2, r3, #1
 800ced6:	60fa      	str	r2, [r7, #12]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d102      	bne.n	800cee2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cedc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cee0:	e009      	b.n	800cef6 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d0f1      	beq.n	800ced2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	22c5      	movs	r2, #197	; 0xc5
 800cef2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800cef4:	2300      	movs	r3, #0
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3714      	adds	r7, #20
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	200000a4 	.word	0x200000a4
 800cf08:	10624dd3 	.word	0x10624dd3

0800cf0c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cf10:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr

0800cf1c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800cf24:	f7f5 fc16 	bl	8002754 <BSP_SD_AbortCallback>
}
 800cf28:	bf00      	nop
 800cf2a:	3708      	adds	r7, #8
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800cf38:	f7f5 fc13 	bl	8002762 <BSP_SD_WriteCpltCallback>
}
 800cf3c:	bf00      	nop
 800cf3e:	3708      	adds	r7, #8
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cf4c:	f7f5 fc10 	bl	8002770 <BSP_SD_ReadCpltCallback>
}
 800cf50:	bf00      	nop
 800cf52:	3708      	adds	r7, #8
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	4603      	mov	r3, r0
 800cf60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cf62:	79fb      	ldrb	r3, [r7, #7]
 800cf64:	4a08      	ldr	r2, [pc, #32]	; (800cf88 <disk_status+0x30>)
 800cf66:	009b      	lsls	r3, r3, #2
 800cf68:	4413      	add	r3, r2
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	79fa      	ldrb	r2, [r7, #7]
 800cf70:	4905      	ldr	r1, [pc, #20]	; (800cf88 <disk_status+0x30>)
 800cf72:	440a      	add	r2, r1
 800cf74:	7a12      	ldrb	r2, [r2, #8]
 800cf76:	4610      	mov	r0, r2
 800cf78:	4798      	blx	r3
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cf7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3710      	adds	r7, #16
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	2001fc14 	.word	0x2001fc14

0800cf8c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	4603      	mov	r3, r0
 800cf94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cf96:	2300      	movs	r3, #0
 800cf98:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cf9a:	79fb      	ldrb	r3, [r7, #7]
 800cf9c:	4a0d      	ldr	r2, [pc, #52]	; (800cfd4 <disk_initialize+0x48>)
 800cf9e:	5cd3      	ldrb	r3, [r2, r3]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d111      	bne.n	800cfc8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cfa4:	79fb      	ldrb	r3, [r7, #7]
 800cfa6:	4a0b      	ldr	r2, [pc, #44]	; (800cfd4 <disk_initialize+0x48>)
 800cfa8:	2101      	movs	r1, #1
 800cfaa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cfac:	79fb      	ldrb	r3, [r7, #7]
 800cfae:	4a09      	ldr	r2, [pc, #36]	; (800cfd4 <disk_initialize+0x48>)
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	4413      	add	r3, r2
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	79fa      	ldrb	r2, [r7, #7]
 800cfba:	4906      	ldr	r1, [pc, #24]	; (800cfd4 <disk_initialize+0x48>)
 800cfbc:	440a      	add	r2, r1
 800cfbe:	7a12      	ldrb	r2, [r2, #8]
 800cfc0:	4610      	mov	r0, r2
 800cfc2:	4798      	blx	r3
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cfc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3710      	adds	r7, #16
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	2001fc14 	.word	0x2001fc14

0800cfd8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cfd8:	b590      	push	{r4, r7, lr}
 800cfda:	b087      	sub	sp, #28
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60b9      	str	r1, [r7, #8]
 800cfe0:	607a      	str	r2, [r7, #4]
 800cfe2:	603b      	str	r3, [r7, #0]
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cfe8:	7bfb      	ldrb	r3, [r7, #15]
 800cfea:	4a0a      	ldr	r2, [pc, #40]	; (800d014 <disk_read+0x3c>)
 800cfec:	009b      	lsls	r3, r3, #2
 800cfee:	4413      	add	r3, r2
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	689c      	ldr	r4, [r3, #8]
 800cff4:	7bfb      	ldrb	r3, [r7, #15]
 800cff6:	4a07      	ldr	r2, [pc, #28]	; (800d014 <disk_read+0x3c>)
 800cff8:	4413      	add	r3, r2
 800cffa:	7a18      	ldrb	r0, [r3, #8]
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	68b9      	ldr	r1, [r7, #8]
 800d002:	47a0      	blx	r4
 800d004:	4603      	mov	r3, r0
 800d006:	75fb      	strb	r3, [r7, #23]
  return res;
 800d008:	7dfb      	ldrb	r3, [r7, #23]
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	371c      	adds	r7, #28
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd90      	pop	{r4, r7, pc}
 800d012:	bf00      	nop
 800d014:	2001fc14 	.word	0x2001fc14

0800d018 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d018:	b590      	push	{r4, r7, lr}
 800d01a:	b087      	sub	sp, #28
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60b9      	str	r1, [r7, #8]
 800d020:	607a      	str	r2, [r7, #4]
 800d022:	603b      	str	r3, [r7, #0]
 800d024:	4603      	mov	r3, r0
 800d026:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d028:	7bfb      	ldrb	r3, [r7, #15]
 800d02a:	4a0a      	ldr	r2, [pc, #40]	; (800d054 <disk_write+0x3c>)
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	4413      	add	r3, r2
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	68dc      	ldr	r4, [r3, #12]
 800d034:	7bfb      	ldrb	r3, [r7, #15]
 800d036:	4a07      	ldr	r2, [pc, #28]	; (800d054 <disk_write+0x3c>)
 800d038:	4413      	add	r3, r2
 800d03a:	7a18      	ldrb	r0, [r3, #8]
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	68b9      	ldr	r1, [r7, #8]
 800d042:	47a0      	blx	r4
 800d044:	4603      	mov	r3, r0
 800d046:	75fb      	strb	r3, [r7, #23]
  return res;
 800d048:	7dfb      	ldrb	r3, [r7, #23]
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	371c      	adds	r7, #28
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd90      	pop	{r4, r7, pc}
 800d052:	bf00      	nop
 800d054:	2001fc14 	.word	0x2001fc14

0800d058 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	4603      	mov	r3, r0
 800d060:	603a      	str	r2, [r7, #0]
 800d062:	71fb      	strb	r3, [r7, #7]
 800d064:	460b      	mov	r3, r1
 800d066:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d068:	79fb      	ldrb	r3, [r7, #7]
 800d06a:	4a09      	ldr	r2, [pc, #36]	; (800d090 <disk_ioctl+0x38>)
 800d06c:	009b      	lsls	r3, r3, #2
 800d06e:	4413      	add	r3, r2
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	691b      	ldr	r3, [r3, #16]
 800d074:	79fa      	ldrb	r2, [r7, #7]
 800d076:	4906      	ldr	r1, [pc, #24]	; (800d090 <disk_ioctl+0x38>)
 800d078:	440a      	add	r2, r1
 800d07a:	7a10      	ldrb	r0, [r2, #8]
 800d07c:	79b9      	ldrb	r1, [r7, #6]
 800d07e:	683a      	ldr	r2, [r7, #0]
 800d080:	4798      	blx	r3
 800d082:	4603      	mov	r3, r0
 800d084:	73fb      	strb	r3, [r7, #15]
  return res;
 800d086:	7bfb      	ldrb	r3, [r7, #15]
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3710      	adds	r7, #16
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	2001fc14 	.word	0x2001fc14

0800d094 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d094:	b480      	push	{r7}
 800d096:	b085      	sub	sp, #20
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	3301      	adds	r3, #1
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d0a4:	89fb      	ldrh	r3, [r7, #14]
 800d0a6:	021b      	lsls	r3, r3, #8
 800d0a8:	b21a      	sxth	r2, r3
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	b21b      	sxth	r3, r3
 800d0b0:	4313      	orrs	r3, r2
 800d0b2:	b21b      	sxth	r3, r3
 800d0b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d0b6:	89fb      	ldrh	r3, [r7, #14]
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3714      	adds	r7, #20
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b085      	sub	sp, #20
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	3303      	adds	r3, #3
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	021b      	lsls	r3, r3, #8
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	3202      	adds	r2, #2
 800d0dc:	7812      	ldrb	r2, [r2, #0]
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	021b      	lsls	r3, r3, #8
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	3201      	adds	r2, #1
 800d0ea:	7812      	ldrb	r2, [r2, #0]
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	021b      	lsls	r3, r3, #8
 800d0f4:	687a      	ldr	r2, [r7, #4]
 800d0f6:	7812      	ldrb	r2, [r2, #0]
 800d0f8:	4313      	orrs	r3, r2
 800d0fa:	60fb      	str	r3, [r7, #12]
	return rv;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3714      	adds	r7, #20
 800d102:	46bd      	mov	sp, r7
 800d104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d108:	4770      	bx	lr

0800d10a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d10a:	b480      	push	{r7}
 800d10c:	b083      	sub	sp, #12
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
 800d112:	460b      	mov	r3, r1
 800d114:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	1c5a      	adds	r2, r3, #1
 800d11a:	607a      	str	r2, [r7, #4]
 800d11c:	887a      	ldrh	r2, [r7, #2]
 800d11e:	b2d2      	uxtb	r2, r2
 800d120:	701a      	strb	r2, [r3, #0]
 800d122:	887b      	ldrh	r3, [r7, #2]
 800d124:	0a1b      	lsrs	r3, r3, #8
 800d126:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	1c5a      	adds	r2, r3, #1
 800d12c:	607a      	str	r2, [r7, #4]
 800d12e:	887a      	ldrh	r2, [r7, #2]
 800d130:	b2d2      	uxtb	r2, r2
 800d132:	701a      	strb	r2, [r3, #0]
}
 800d134:	bf00      	nop
 800d136:	370c      	adds	r7, #12
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr

0800d140 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	1c5a      	adds	r2, r3, #1
 800d14e:	607a      	str	r2, [r7, #4]
 800d150:	683a      	ldr	r2, [r7, #0]
 800d152:	b2d2      	uxtb	r2, r2
 800d154:	701a      	strb	r2, [r3, #0]
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	0a1b      	lsrs	r3, r3, #8
 800d15a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	1c5a      	adds	r2, r3, #1
 800d160:	607a      	str	r2, [r7, #4]
 800d162:	683a      	ldr	r2, [r7, #0]
 800d164:	b2d2      	uxtb	r2, r2
 800d166:	701a      	strb	r2, [r3, #0]
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	0a1b      	lsrs	r3, r3, #8
 800d16c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	1c5a      	adds	r2, r3, #1
 800d172:	607a      	str	r2, [r7, #4]
 800d174:	683a      	ldr	r2, [r7, #0]
 800d176:	b2d2      	uxtb	r2, r2
 800d178:	701a      	strb	r2, [r3, #0]
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	0a1b      	lsrs	r3, r3, #8
 800d17e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	1c5a      	adds	r2, r3, #1
 800d184:	607a      	str	r2, [r7, #4]
 800d186:	683a      	ldr	r2, [r7, #0]
 800d188:	b2d2      	uxtb	r2, r2
 800d18a:	701a      	strb	r2, [r3, #0]
}
 800d18c:	bf00      	nop
 800d18e:	370c      	adds	r7, #12
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d198:	b480      	push	{r7}
 800d19a:	b087      	sub	sp, #28
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d00d      	beq.n	800d1ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d1b2:	693a      	ldr	r2, [r7, #16]
 800d1b4:	1c53      	adds	r3, r2, #1
 800d1b6:	613b      	str	r3, [r7, #16]
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	1c59      	adds	r1, r3, #1
 800d1bc:	6179      	str	r1, [r7, #20]
 800d1be:	7812      	ldrb	r2, [r2, #0]
 800d1c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	3b01      	subs	r3, #1
 800d1c6:	607b      	str	r3, [r7, #4]
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d1f1      	bne.n	800d1b2 <mem_cpy+0x1a>
	}
}
 800d1ce:	bf00      	nop
 800d1d0:	371c      	adds	r7, #28
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr

0800d1da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d1da:	b480      	push	{r7}
 800d1dc:	b087      	sub	sp, #28
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	60f8      	str	r0, [r7, #12]
 800d1e2:	60b9      	str	r1, [r7, #8]
 800d1e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	1c5a      	adds	r2, r3, #1
 800d1ee:	617a      	str	r2, [r7, #20]
 800d1f0:	68ba      	ldr	r2, [r7, #8]
 800d1f2:	b2d2      	uxtb	r2, r2
 800d1f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	607b      	str	r3, [r7, #4]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d1f3      	bne.n	800d1ea <mem_set+0x10>
}
 800d202:	bf00      	nop
 800d204:	bf00      	nop
 800d206:	371c      	adds	r7, #28
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr

0800d210 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d210:	b480      	push	{r7}
 800d212:	b089      	sub	sp, #36	; 0x24
 800d214:	af00      	add	r7, sp, #0
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	60b9      	str	r1, [r7, #8]
 800d21a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	61fb      	str	r3, [r7, #28]
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d224:	2300      	movs	r3, #0
 800d226:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d228:	69fb      	ldr	r3, [r7, #28]
 800d22a:	1c5a      	adds	r2, r3, #1
 800d22c:	61fa      	str	r2, [r7, #28]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	4619      	mov	r1, r3
 800d232:	69bb      	ldr	r3, [r7, #24]
 800d234:	1c5a      	adds	r2, r3, #1
 800d236:	61ba      	str	r2, [r7, #24]
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	1acb      	subs	r3, r1, r3
 800d23c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	3b01      	subs	r3, #1
 800d242:	607b      	str	r3, [r7, #4]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d002      	beq.n	800d250 <mem_cmp+0x40>
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d0eb      	beq.n	800d228 <mem_cmp+0x18>

	return r;
 800d250:	697b      	ldr	r3, [r7, #20]
}
 800d252:	4618      	mov	r0, r3
 800d254:	3724      	adds	r7, #36	; 0x24
 800d256:	46bd      	mov	sp, r7
 800d258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25c:	4770      	bx	lr

0800d25e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d25e:	b480      	push	{r7}
 800d260:	b083      	sub	sp, #12
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
 800d266:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d268:	e002      	b.n	800d270 <chk_chr+0x12>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	3301      	adds	r3, #1
 800d26e:	607b      	str	r3, [r7, #4]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d005      	beq.n	800d284 <chk_chr+0x26>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	461a      	mov	r2, r3
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	4293      	cmp	r3, r2
 800d282:	d1f2      	bne.n	800d26a <chk_chr+0xc>
	return *str;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	781b      	ldrb	r3, [r3, #0]
}
 800d288:	4618      	mov	r0, r3
 800d28a:	370c      	adds	r7, #12
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr

0800d294 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d294:	b480      	push	{r7}
 800d296:	b085      	sub	sp, #20
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d29e:	2300      	movs	r3, #0
 800d2a0:	60bb      	str	r3, [r7, #8]
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	60fb      	str	r3, [r7, #12]
 800d2a6:	e029      	b.n	800d2fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d2a8:	4a27      	ldr	r2, [pc, #156]	; (800d348 <chk_lock+0xb4>)
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	011b      	lsls	r3, r3, #4
 800d2ae:	4413      	add	r3, r2
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d01d      	beq.n	800d2f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d2b6:	4a24      	ldr	r2, [pc, #144]	; (800d348 <chk_lock+0xb4>)
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	011b      	lsls	r3, r3, #4
 800d2bc:	4413      	add	r3, r2
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d116      	bne.n	800d2f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d2c8:	4a1f      	ldr	r2, [pc, #124]	; (800d348 <chk_lock+0xb4>)
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	011b      	lsls	r3, r3, #4
 800d2ce:	4413      	add	r3, r2
 800d2d0:	3304      	adds	r3, #4
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d10c      	bne.n	800d2f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d2dc:	4a1a      	ldr	r2, [pc, #104]	; (800d348 <chk_lock+0xb4>)
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	011b      	lsls	r3, r3, #4
 800d2e2:	4413      	add	r3, r2
 800d2e4:	3308      	adds	r3, #8
 800d2e6:	681a      	ldr	r2, [r3, #0]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d102      	bne.n	800d2f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d2f0:	e007      	b.n	800d302 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	60fb      	str	r3, [r7, #12]
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	d9d2      	bls.n	800d2a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	2b02      	cmp	r3, #2
 800d306:	d109      	bne.n	800d31c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d102      	bne.n	800d314 <chk_lock+0x80>
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	2b02      	cmp	r3, #2
 800d312:	d101      	bne.n	800d318 <chk_lock+0x84>
 800d314:	2300      	movs	r3, #0
 800d316:	e010      	b.n	800d33a <chk_lock+0xa6>
 800d318:	2312      	movs	r3, #18
 800d31a:	e00e      	b.n	800d33a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d108      	bne.n	800d334 <chk_lock+0xa0>
 800d322:	4a09      	ldr	r2, [pc, #36]	; (800d348 <chk_lock+0xb4>)
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	011b      	lsls	r3, r3, #4
 800d328:	4413      	add	r3, r2
 800d32a:	330c      	adds	r3, #12
 800d32c:	881b      	ldrh	r3, [r3, #0]
 800d32e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d332:	d101      	bne.n	800d338 <chk_lock+0xa4>
 800d334:	2310      	movs	r3, #16
 800d336:	e000      	b.n	800d33a <chk_lock+0xa6>
 800d338:	2300      	movs	r3, #0
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3714      	adds	r7, #20
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop
 800d348:	2001fbf4 	.word	0x2001fbf4

0800d34c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d34c:	b480      	push	{r7}
 800d34e:	b083      	sub	sp, #12
 800d350:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d352:	2300      	movs	r3, #0
 800d354:	607b      	str	r3, [r7, #4]
 800d356:	e002      	b.n	800d35e <enq_lock+0x12>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	3301      	adds	r3, #1
 800d35c:	607b      	str	r3, [r7, #4]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2b01      	cmp	r3, #1
 800d362:	d806      	bhi.n	800d372 <enq_lock+0x26>
 800d364:	4a09      	ldr	r2, [pc, #36]	; (800d38c <enq_lock+0x40>)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	011b      	lsls	r3, r3, #4
 800d36a:	4413      	add	r3, r2
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d1f2      	bne.n	800d358 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2b02      	cmp	r3, #2
 800d376:	bf14      	ite	ne
 800d378:	2301      	movne	r3, #1
 800d37a:	2300      	moveq	r3, #0
 800d37c:	b2db      	uxtb	r3, r3
}
 800d37e:	4618      	mov	r0, r3
 800d380:	370c      	adds	r7, #12
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr
 800d38a:	bf00      	nop
 800d38c:	2001fbf4 	.word	0x2001fbf4

0800d390 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d390:	b480      	push	{r7}
 800d392:	b085      	sub	sp, #20
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d39a:	2300      	movs	r3, #0
 800d39c:	60fb      	str	r3, [r7, #12]
 800d39e:	e01f      	b.n	800d3e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d3a0:	4a41      	ldr	r2, [pc, #260]	; (800d4a8 <inc_lock+0x118>)
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	011b      	lsls	r3, r3, #4
 800d3a6:	4413      	add	r3, r2
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d113      	bne.n	800d3da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d3b2:	4a3d      	ldr	r2, [pc, #244]	; (800d4a8 <inc_lock+0x118>)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	011b      	lsls	r3, r3, #4
 800d3b8:	4413      	add	r3, r2
 800d3ba:	3304      	adds	r3, #4
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d109      	bne.n	800d3da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d3c6:	4a38      	ldr	r2, [pc, #224]	; (800d4a8 <inc_lock+0x118>)
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	011b      	lsls	r3, r3, #4
 800d3cc:	4413      	add	r3, r2
 800d3ce:	3308      	adds	r3, #8
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d006      	beq.n	800d3e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	3301      	adds	r3, #1
 800d3de:	60fb      	str	r3, [r7, #12]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	d9dc      	bls.n	800d3a0 <inc_lock+0x10>
 800d3e6:	e000      	b.n	800d3ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d3e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2b02      	cmp	r3, #2
 800d3ee:	d132      	bne.n	800d456 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	60fb      	str	r3, [r7, #12]
 800d3f4:	e002      	b.n	800d3fc <inc_lock+0x6c>
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	60fb      	str	r3, [r7, #12]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2b01      	cmp	r3, #1
 800d400:	d806      	bhi.n	800d410 <inc_lock+0x80>
 800d402:	4a29      	ldr	r2, [pc, #164]	; (800d4a8 <inc_lock+0x118>)
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	011b      	lsls	r3, r3, #4
 800d408:	4413      	add	r3, r2
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d1f2      	bne.n	800d3f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2b02      	cmp	r3, #2
 800d414:	d101      	bne.n	800d41a <inc_lock+0x8a>
 800d416:	2300      	movs	r3, #0
 800d418:	e040      	b.n	800d49c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	4922      	ldr	r1, [pc, #136]	; (800d4a8 <inc_lock+0x118>)
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	011b      	lsls	r3, r3, #4
 800d424:	440b      	add	r3, r1
 800d426:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	689a      	ldr	r2, [r3, #8]
 800d42c:	491e      	ldr	r1, [pc, #120]	; (800d4a8 <inc_lock+0x118>)
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	011b      	lsls	r3, r3, #4
 800d432:	440b      	add	r3, r1
 800d434:	3304      	adds	r3, #4
 800d436:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	695a      	ldr	r2, [r3, #20]
 800d43c:	491a      	ldr	r1, [pc, #104]	; (800d4a8 <inc_lock+0x118>)
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	011b      	lsls	r3, r3, #4
 800d442:	440b      	add	r3, r1
 800d444:	3308      	adds	r3, #8
 800d446:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d448:	4a17      	ldr	r2, [pc, #92]	; (800d4a8 <inc_lock+0x118>)
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	011b      	lsls	r3, r3, #4
 800d44e:	4413      	add	r3, r2
 800d450:	330c      	adds	r3, #12
 800d452:	2200      	movs	r2, #0
 800d454:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d009      	beq.n	800d470 <inc_lock+0xe0>
 800d45c:	4a12      	ldr	r2, [pc, #72]	; (800d4a8 <inc_lock+0x118>)
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	011b      	lsls	r3, r3, #4
 800d462:	4413      	add	r3, r2
 800d464:	330c      	adds	r3, #12
 800d466:	881b      	ldrh	r3, [r3, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d001      	beq.n	800d470 <inc_lock+0xe0>
 800d46c:	2300      	movs	r3, #0
 800d46e:	e015      	b.n	800d49c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d108      	bne.n	800d488 <inc_lock+0xf8>
 800d476:	4a0c      	ldr	r2, [pc, #48]	; (800d4a8 <inc_lock+0x118>)
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	011b      	lsls	r3, r3, #4
 800d47c:	4413      	add	r3, r2
 800d47e:	330c      	adds	r3, #12
 800d480:	881b      	ldrh	r3, [r3, #0]
 800d482:	3301      	adds	r3, #1
 800d484:	b29a      	uxth	r2, r3
 800d486:	e001      	b.n	800d48c <inc_lock+0xfc>
 800d488:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d48c:	4906      	ldr	r1, [pc, #24]	; (800d4a8 <inc_lock+0x118>)
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	011b      	lsls	r3, r3, #4
 800d492:	440b      	add	r3, r1
 800d494:	330c      	adds	r3, #12
 800d496:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	3301      	adds	r3, #1
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3714      	adds	r7, #20
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr
 800d4a8:	2001fbf4 	.word	0x2001fbf4

0800d4ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b085      	sub	sp, #20
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	3b01      	subs	r3, #1
 800d4b8:	607b      	str	r3, [r7, #4]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d825      	bhi.n	800d50c <dec_lock+0x60>
		n = Files[i].ctr;
 800d4c0:	4a17      	ldr	r2, [pc, #92]	; (800d520 <dec_lock+0x74>)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	011b      	lsls	r3, r3, #4
 800d4c6:	4413      	add	r3, r2
 800d4c8:	330c      	adds	r3, #12
 800d4ca:	881b      	ldrh	r3, [r3, #0]
 800d4cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d4ce:	89fb      	ldrh	r3, [r7, #14]
 800d4d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4d4:	d101      	bne.n	800d4da <dec_lock+0x2e>
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d4da:	89fb      	ldrh	r3, [r7, #14]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d002      	beq.n	800d4e6 <dec_lock+0x3a>
 800d4e0:	89fb      	ldrh	r3, [r7, #14]
 800d4e2:	3b01      	subs	r3, #1
 800d4e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d4e6:	4a0e      	ldr	r2, [pc, #56]	; (800d520 <dec_lock+0x74>)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	011b      	lsls	r3, r3, #4
 800d4ec:	4413      	add	r3, r2
 800d4ee:	330c      	adds	r3, #12
 800d4f0:	89fa      	ldrh	r2, [r7, #14]
 800d4f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d4f4:	89fb      	ldrh	r3, [r7, #14]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d105      	bne.n	800d506 <dec_lock+0x5a>
 800d4fa:	4a09      	ldr	r2, [pc, #36]	; (800d520 <dec_lock+0x74>)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	011b      	lsls	r3, r3, #4
 800d500:	4413      	add	r3, r2
 800d502:	2200      	movs	r2, #0
 800d504:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d506:	2300      	movs	r3, #0
 800d508:	737b      	strb	r3, [r7, #13]
 800d50a:	e001      	b.n	800d510 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d50c:	2302      	movs	r3, #2
 800d50e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d510:	7b7b      	ldrb	r3, [r7, #13]
}
 800d512:	4618      	mov	r0, r3
 800d514:	3714      	adds	r7, #20
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr
 800d51e:	bf00      	nop
 800d520:	2001fbf4 	.word	0x2001fbf4

0800d524 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d524:	b480      	push	{r7}
 800d526:	b085      	sub	sp, #20
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d52c:	2300      	movs	r3, #0
 800d52e:	60fb      	str	r3, [r7, #12]
 800d530:	e010      	b.n	800d554 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d532:	4a0d      	ldr	r2, [pc, #52]	; (800d568 <clear_lock+0x44>)
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	011b      	lsls	r3, r3, #4
 800d538:	4413      	add	r3, r2
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	429a      	cmp	r2, r3
 800d540:	d105      	bne.n	800d54e <clear_lock+0x2a>
 800d542:	4a09      	ldr	r2, [pc, #36]	; (800d568 <clear_lock+0x44>)
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	011b      	lsls	r3, r3, #4
 800d548:	4413      	add	r3, r2
 800d54a:	2200      	movs	r2, #0
 800d54c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	3301      	adds	r3, #1
 800d552:	60fb      	str	r3, [r7, #12]
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2b01      	cmp	r3, #1
 800d558:	d9eb      	bls.n	800d532 <clear_lock+0xe>
	}
}
 800d55a:	bf00      	nop
 800d55c:	bf00      	nop
 800d55e:	3714      	adds	r7, #20
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr
 800d568:	2001fbf4 	.word	0x2001fbf4

0800d56c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b086      	sub	sp, #24
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d574:	2300      	movs	r3, #0
 800d576:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	78db      	ldrb	r3, [r3, #3]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d034      	beq.n	800d5ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d584:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	7858      	ldrb	r0, [r3, #1]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d590:	2301      	movs	r3, #1
 800d592:	697a      	ldr	r2, [r7, #20]
 800d594:	f7ff fd40 	bl	800d018 <disk_write>
 800d598:	4603      	mov	r3, r0
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d002      	beq.n	800d5a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	73fb      	strb	r3, [r7, #15]
 800d5a2:	e022      	b.n	800d5ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ae:	697a      	ldr	r2, [r7, #20]
 800d5b0:	1ad2      	subs	r2, r2, r3
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	69db      	ldr	r3, [r3, #28]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d217      	bcs.n	800d5ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	789b      	ldrb	r3, [r3, #2]
 800d5be:	613b      	str	r3, [r7, #16]
 800d5c0:	e010      	b.n	800d5e4 <sync_window+0x78>
					wsect += fs->fsize;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	69db      	ldr	r3, [r3, #28]
 800d5c6:	697a      	ldr	r2, [r7, #20]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	7858      	ldrb	r0, [r3, #1]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	697a      	ldr	r2, [r7, #20]
 800d5da:	f7ff fd1d 	bl	800d018 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	3b01      	subs	r3, #1
 800d5e2:	613b      	str	r3, [r7, #16]
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d8eb      	bhi.n	800d5c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d5ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3718      	adds	r7, #24
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b084      	sub	sp, #16
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d5fe:	2300      	movs	r3, #0
 800d600:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d606:	683a      	ldr	r2, [r7, #0]
 800d608:	429a      	cmp	r2, r3
 800d60a:	d01b      	beq.n	800d644 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f7ff ffad 	bl	800d56c <sync_window>
 800d612:	4603      	mov	r3, r0
 800d614:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d616:	7bfb      	ldrb	r3, [r7, #15]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d113      	bne.n	800d644 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	7858      	ldrb	r0, [r3, #1]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d626:	2301      	movs	r3, #1
 800d628:	683a      	ldr	r2, [r7, #0]
 800d62a:	f7ff fcd5 	bl	800cfd8 <disk_read>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d004      	beq.n	800d63e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d634:	f04f 33ff 	mov.w	r3, #4294967295
 800d638:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d63a:	2301      	movs	r3, #1
 800d63c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	683a      	ldr	r2, [r7, #0]
 800d642:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d644:	7bfb      	ldrb	r3, [r7, #15]
}
 800d646:	4618      	mov	r0, r3
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
	...

0800d650 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f7ff ff87 	bl	800d56c <sync_window>
 800d65e:	4603      	mov	r3, r0
 800d660:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d662:	7bfb      	ldrb	r3, [r7, #15]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d158      	bne.n	800d71a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	2b03      	cmp	r3, #3
 800d66e:	d148      	bne.n	800d702 <sync_fs+0xb2>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	791b      	ldrb	r3, [r3, #4]
 800d674:	2b01      	cmp	r3, #1
 800d676:	d144      	bne.n	800d702 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	3334      	adds	r3, #52	; 0x34
 800d67c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d680:	2100      	movs	r1, #0
 800d682:	4618      	mov	r0, r3
 800d684:	f7ff fda9 	bl	800d1da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	3334      	adds	r3, #52	; 0x34
 800d68c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d690:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d694:	4618      	mov	r0, r3
 800d696:	f7ff fd38 	bl	800d10a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	3334      	adds	r3, #52	; 0x34
 800d69e:	4921      	ldr	r1, [pc, #132]	; (800d724 <sync_fs+0xd4>)
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f7ff fd4d 	bl	800d140 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	3334      	adds	r3, #52	; 0x34
 800d6aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d6ae:	491e      	ldr	r1, [pc, #120]	; (800d728 <sync_fs+0xd8>)
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7ff fd45 	bl	800d140 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	3334      	adds	r3, #52	; 0x34
 800d6ba:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	695b      	ldr	r3, [r3, #20]
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	4610      	mov	r0, r2
 800d6c6:	f7ff fd3b 	bl	800d140 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	3334      	adds	r3, #52	; 0x34
 800d6ce:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	691b      	ldr	r3, [r3, #16]
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	4610      	mov	r0, r2
 800d6da:	f7ff fd31 	bl	800d140 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6a1b      	ldr	r3, [r3, #32]
 800d6e2:	1c5a      	adds	r2, r3, #1
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	7858      	ldrb	r0, [r3, #1]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	f7ff fc8e 	bl	800d018 <disk_write>
			fs->fsi_flag = 0;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2200      	movs	r2, #0
 800d700:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	785b      	ldrb	r3, [r3, #1]
 800d706:	2200      	movs	r2, #0
 800d708:	2100      	movs	r1, #0
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7ff fca4 	bl	800d058 <disk_ioctl>
 800d710:	4603      	mov	r3, r0
 800d712:	2b00      	cmp	r3, #0
 800d714:	d001      	beq.n	800d71a <sync_fs+0xca>
 800d716:	2301      	movs	r3, #1
 800d718:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d71a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3710      	adds	r7, #16
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}
 800d724:	41615252 	.word	0x41615252
 800d728:	61417272 	.word	0x61417272

0800d72c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	3b02      	subs	r3, #2
 800d73a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	699b      	ldr	r3, [r3, #24]
 800d740:	3b02      	subs	r3, #2
 800d742:	683a      	ldr	r2, [r7, #0]
 800d744:	429a      	cmp	r2, r3
 800d746:	d301      	bcc.n	800d74c <clust2sect+0x20>
 800d748:	2300      	movs	r3, #0
 800d74a:	e008      	b.n	800d75e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	895b      	ldrh	r3, [r3, #10]
 800d750:	461a      	mov	r2, r3
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	fb03 f202 	mul.w	r2, r3, r2
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d75c:	4413      	add	r3, r2
}
 800d75e:	4618      	mov	r0, r3
 800d760:	370c      	adds	r7, #12
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr

0800d76a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d76a:	b580      	push	{r7, lr}
 800d76c:	b086      	sub	sp, #24
 800d76e:	af00      	add	r7, sp, #0
 800d770:	6078      	str	r0, [r7, #4]
 800d772:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	d904      	bls.n	800d78a <get_fat+0x20>
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	699b      	ldr	r3, [r3, #24]
 800d784:	683a      	ldr	r2, [r7, #0]
 800d786:	429a      	cmp	r2, r3
 800d788:	d302      	bcc.n	800d790 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d78a:	2301      	movs	r3, #1
 800d78c:	617b      	str	r3, [r7, #20]
 800d78e:	e08f      	b.n	800d8b0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d790:	f04f 33ff 	mov.w	r3, #4294967295
 800d794:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	2b03      	cmp	r3, #3
 800d79c:	d062      	beq.n	800d864 <get_fat+0xfa>
 800d79e:	2b03      	cmp	r3, #3
 800d7a0:	dc7c      	bgt.n	800d89c <get_fat+0x132>
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d002      	beq.n	800d7ac <get_fat+0x42>
 800d7a6:	2b02      	cmp	r3, #2
 800d7a8:	d042      	beq.n	800d830 <get_fat+0xc6>
 800d7aa:	e077      	b.n	800d89c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	60fb      	str	r3, [r7, #12]
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	085b      	lsrs	r3, r3, #1
 800d7b4:	68fa      	ldr	r2, [r7, #12]
 800d7b6:	4413      	add	r3, r2
 800d7b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	0a5b      	lsrs	r3, r3, #9
 800d7c2:	4413      	add	r3, r2
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	6938      	ldr	r0, [r7, #16]
 800d7c8:	f7ff ff14 	bl	800d5f4 <move_window>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d167      	bne.n	800d8a2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	1c5a      	adds	r2, r3, #1
 800d7d6:	60fa      	str	r2, [r7, #12]
 800d7d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7dc:	693a      	ldr	r2, [r7, #16]
 800d7de:	4413      	add	r3, r2
 800d7e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d7e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	0a5b      	lsrs	r3, r3, #9
 800d7ee:	4413      	add	r3, r2
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	6938      	ldr	r0, [r7, #16]
 800d7f4:	f7ff fefe 	bl	800d5f4 <move_window>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d153      	bne.n	800d8a6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d804:	693a      	ldr	r2, [r7, #16]
 800d806:	4413      	add	r3, r2
 800d808:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d80c:	021b      	lsls	r3, r3, #8
 800d80e:	461a      	mov	r2, r3
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	4313      	orrs	r3, r2
 800d814:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	f003 0301 	and.w	r3, r3, #1
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d002      	beq.n	800d826 <get_fat+0xbc>
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	091b      	lsrs	r3, r3, #4
 800d824:	e002      	b.n	800d82c <get_fat+0xc2>
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d82c:	617b      	str	r3, [r7, #20]
			break;
 800d82e:	e03f      	b.n	800d8b0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	0a1b      	lsrs	r3, r3, #8
 800d838:	4413      	add	r3, r2
 800d83a:	4619      	mov	r1, r3
 800d83c:	6938      	ldr	r0, [r7, #16]
 800d83e:	f7ff fed9 	bl	800d5f4 <move_window>
 800d842:	4603      	mov	r3, r0
 800d844:	2b00      	cmp	r3, #0
 800d846:	d130      	bne.n	800d8aa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	005b      	lsls	r3, r3, #1
 800d852:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d856:	4413      	add	r3, r2
 800d858:	4618      	mov	r0, r3
 800d85a:	f7ff fc1b 	bl	800d094 <ld_word>
 800d85e:	4603      	mov	r3, r0
 800d860:	617b      	str	r3, [r7, #20]
			break;
 800d862:	e025      	b.n	800d8b0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	09db      	lsrs	r3, r3, #7
 800d86c:	4413      	add	r3, r2
 800d86e:	4619      	mov	r1, r3
 800d870:	6938      	ldr	r0, [r7, #16]
 800d872:	f7ff febf 	bl	800d5f4 <move_window>
 800d876:	4603      	mov	r3, r0
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d118      	bne.n	800d8ae <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	009b      	lsls	r3, r3, #2
 800d886:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d88a:	4413      	add	r3, r2
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7ff fc19 	bl	800d0c4 <ld_dword>
 800d892:	4603      	mov	r3, r0
 800d894:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d898:	617b      	str	r3, [r7, #20]
			break;
 800d89a:	e009      	b.n	800d8b0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d89c:	2301      	movs	r3, #1
 800d89e:	617b      	str	r3, [r7, #20]
 800d8a0:	e006      	b.n	800d8b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8a2:	bf00      	nop
 800d8a4:	e004      	b.n	800d8b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8a6:	bf00      	nop
 800d8a8:	e002      	b.n	800d8b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d8aa:	bf00      	nop
 800d8ac:	e000      	b.n	800d8b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d8ae:	bf00      	nop
		}
	}

	return val;
 800d8b0:	697b      	ldr	r3, [r7, #20]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3718      	adds	r7, #24
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d8ba:	b590      	push	{r4, r7, lr}
 800d8bc:	b089      	sub	sp, #36	; 0x24
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	60f8      	str	r0, [r7, #12]
 800d8c2:	60b9      	str	r1, [r7, #8]
 800d8c4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d8c6:	2302      	movs	r3, #2
 800d8c8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	f240 80d2 	bls.w	800da76 <put_fat+0x1bc>
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	699b      	ldr	r3, [r3, #24]
 800d8d6:	68ba      	ldr	r2, [r7, #8]
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	f080 80cc 	bcs.w	800da76 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	2b03      	cmp	r3, #3
 800d8e4:	f000 8096 	beq.w	800da14 <put_fat+0x15a>
 800d8e8:	2b03      	cmp	r3, #3
 800d8ea:	f300 80cd 	bgt.w	800da88 <put_fat+0x1ce>
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d002      	beq.n	800d8f8 <put_fat+0x3e>
 800d8f2:	2b02      	cmp	r3, #2
 800d8f4:	d06e      	beq.n	800d9d4 <put_fat+0x11a>
 800d8f6:	e0c7      	b.n	800da88 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	61bb      	str	r3, [r7, #24]
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	085b      	lsrs	r3, r3, #1
 800d900:	69ba      	ldr	r2, [r7, #24]
 800d902:	4413      	add	r3, r2
 800d904:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d90a:	69bb      	ldr	r3, [r7, #24]
 800d90c:	0a5b      	lsrs	r3, r3, #9
 800d90e:	4413      	add	r3, r2
 800d910:	4619      	mov	r1, r3
 800d912:	68f8      	ldr	r0, [r7, #12]
 800d914:	f7ff fe6e 	bl	800d5f4 <move_window>
 800d918:	4603      	mov	r3, r0
 800d91a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d91c:	7ffb      	ldrb	r3, [r7, #31]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	f040 80ab 	bne.w	800da7a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d92a:	69bb      	ldr	r3, [r7, #24]
 800d92c:	1c59      	adds	r1, r3, #1
 800d92e:	61b9      	str	r1, [r7, #24]
 800d930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d934:	4413      	add	r3, r2
 800d936:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	f003 0301 	and.w	r3, r3, #1
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d00d      	beq.n	800d95e <put_fat+0xa4>
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	b25b      	sxtb	r3, r3
 800d948:	f003 030f 	and.w	r3, r3, #15
 800d94c:	b25a      	sxtb	r2, r3
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	b2db      	uxtb	r3, r3
 800d952:	011b      	lsls	r3, r3, #4
 800d954:	b25b      	sxtb	r3, r3
 800d956:	4313      	orrs	r3, r2
 800d958:	b25b      	sxtb	r3, r3
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	e001      	b.n	800d962 <put_fat+0xa8>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	b2db      	uxtb	r3, r3
 800d962:	697a      	ldr	r2, [r7, #20]
 800d964:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2201      	movs	r2, #1
 800d96a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d970:	69bb      	ldr	r3, [r7, #24]
 800d972:	0a5b      	lsrs	r3, r3, #9
 800d974:	4413      	add	r3, r2
 800d976:	4619      	mov	r1, r3
 800d978:	68f8      	ldr	r0, [r7, #12]
 800d97a:	f7ff fe3b 	bl	800d5f4 <move_window>
 800d97e:	4603      	mov	r3, r0
 800d980:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d982:	7ffb      	ldrb	r3, [r7, #31]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d17a      	bne.n	800da7e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d994:	4413      	add	r3, r2
 800d996:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	f003 0301 	and.w	r3, r3, #1
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d003      	beq.n	800d9aa <put_fat+0xf0>
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	091b      	lsrs	r3, r3, #4
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	e00e      	b.n	800d9c8 <put_fat+0x10e>
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	b25b      	sxtb	r3, r3
 800d9b0:	f023 030f 	bic.w	r3, r3, #15
 800d9b4:	b25a      	sxtb	r2, r3
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	0a1b      	lsrs	r3, r3, #8
 800d9ba:	b25b      	sxtb	r3, r3
 800d9bc:	f003 030f 	and.w	r3, r3, #15
 800d9c0:	b25b      	sxtb	r3, r3
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	b25b      	sxtb	r3, r3
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	697a      	ldr	r2, [r7, #20]
 800d9ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	70da      	strb	r2, [r3, #3]
			break;
 800d9d2:	e059      	b.n	800da88 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	0a1b      	lsrs	r3, r3, #8
 800d9dc:	4413      	add	r3, r2
 800d9de:	4619      	mov	r1, r3
 800d9e0:	68f8      	ldr	r0, [r7, #12]
 800d9e2:	f7ff fe07 	bl	800d5f4 <move_window>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d9ea:	7ffb      	ldrb	r3, [r7, #31]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d148      	bne.n	800da82 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	005b      	lsls	r3, r3, #1
 800d9fa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d9fe:	4413      	add	r3, r2
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	b292      	uxth	r2, r2
 800da04:	4611      	mov	r1, r2
 800da06:	4618      	mov	r0, r3
 800da08:	f7ff fb7f 	bl	800d10a <st_word>
			fs->wflag = 1;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2201      	movs	r2, #1
 800da10:	70da      	strb	r2, [r3, #3]
			break;
 800da12:	e039      	b.n	800da88 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	09db      	lsrs	r3, r3, #7
 800da1c:	4413      	add	r3, r2
 800da1e:	4619      	mov	r1, r3
 800da20:	68f8      	ldr	r0, [r7, #12]
 800da22:	f7ff fde7 	bl	800d5f4 <move_window>
 800da26:	4603      	mov	r3, r0
 800da28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da2a:	7ffb      	ldrb	r3, [r7, #31]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d12a      	bne.n	800da86 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	009b      	lsls	r3, r3, #2
 800da40:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800da44:	4413      	add	r3, r2
 800da46:	4618      	mov	r0, r3
 800da48:	f7ff fb3c 	bl	800d0c4 <ld_dword>
 800da4c:	4603      	mov	r3, r0
 800da4e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800da52:	4323      	orrs	r3, r4
 800da54:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	009b      	lsls	r3, r3, #2
 800da60:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800da64:	4413      	add	r3, r2
 800da66:	6879      	ldr	r1, [r7, #4]
 800da68:	4618      	mov	r0, r3
 800da6a:	f7ff fb69 	bl	800d140 <st_dword>
			fs->wflag = 1;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	2201      	movs	r2, #1
 800da72:	70da      	strb	r2, [r3, #3]
			break;
 800da74:	e008      	b.n	800da88 <put_fat+0x1ce>
		}
	}
 800da76:	bf00      	nop
 800da78:	e006      	b.n	800da88 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800da7a:	bf00      	nop
 800da7c:	e004      	b.n	800da88 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800da7e:	bf00      	nop
 800da80:	e002      	b.n	800da88 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800da82:	bf00      	nop
 800da84:	e000      	b.n	800da88 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800da86:	bf00      	nop
	return res;
 800da88:	7ffb      	ldrb	r3, [r7, #31]
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3724      	adds	r7, #36	; 0x24
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd90      	pop	{r4, r7, pc}

0800da92 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800da92:	b580      	push	{r7, lr}
 800da94:	b088      	sub	sp, #32
 800da96:	af00      	add	r7, sp, #0
 800da98:	60f8      	str	r0, [r7, #12]
 800da9a:	60b9      	str	r1, [r7, #8]
 800da9c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800da9e:	2300      	movs	r3, #0
 800daa0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d904      	bls.n	800dab8 <remove_chain+0x26>
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	699b      	ldr	r3, [r3, #24]
 800dab2:	68ba      	ldr	r2, [r7, #8]
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d301      	bcc.n	800dabc <remove_chain+0x2a>
 800dab8:	2302      	movs	r3, #2
 800daba:	e04b      	b.n	800db54 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d00c      	beq.n	800dadc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800dac2:	f04f 32ff 	mov.w	r2, #4294967295
 800dac6:	6879      	ldr	r1, [r7, #4]
 800dac8:	69b8      	ldr	r0, [r7, #24]
 800daca:	f7ff fef6 	bl	800d8ba <put_fat>
 800dace:	4603      	mov	r3, r0
 800dad0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800dad2:	7ffb      	ldrb	r3, [r7, #31]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d001      	beq.n	800dadc <remove_chain+0x4a>
 800dad8:	7ffb      	ldrb	r3, [r7, #31]
 800dada:	e03b      	b.n	800db54 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dadc:	68b9      	ldr	r1, [r7, #8]
 800dade:	68f8      	ldr	r0, [r7, #12]
 800dae0:	f7ff fe43 	bl	800d76a <get_fat>
 800dae4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d031      	beq.n	800db50 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d101      	bne.n	800daf6 <remove_chain+0x64>
 800daf2:	2302      	movs	r3, #2
 800daf4:	e02e      	b.n	800db54 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dafc:	d101      	bne.n	800db02 <remove_chain+0x70>
 800dafe:	2301      	movs	r3, #1
 800db00:	e028      	b.n	800db54 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800db02:	2200      	movs	r2, #0
 800db04:	68b9      	ldr	r1, [r7, #8]
 800db06:	69b8      	ldr	r0, [r7, #24]
 800db08:	f7ff fed7 	bl	800d8ba <put_fat>
 800db0c:	4603      	mov	r3, r0
 800db0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800db10:	7ffb      	ldrb	r3, [r7, #31]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d001      	beq.n	800db1a <remove_chain+0x88>
 800db16:	7ffb      	ldrb	r3, [r7, #31]
 800db18:	e01c      	b.n	800db54 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800db1a:	69bb      	ldr	r3, [r7, #24]
 800db1c:	695a      	ldr	r2, [r3, #20]
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	699b      	ldr	r3, [r3, #24]
 800db22:	3b02      	subs	r3, #2
 800db24:	429a      	cmp	r2, r3
 800db26:	d20b      	bcs.n	800db40 <remove_chain+0xae>
			fs->free_clst++;
 800db28:	69bb      	ldr	r3, [r7, #24]
 800db2a:	695b      	ldr	r3, [r3, #20]
 800db2c:	1c5a      	adds	r2, r3, #1
 800db2e:	69bb      	ldr	r3, [r7, #24]
 800db30:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800db32:	69bb      	ldr	r3, [r7, #24]
 800db34:	791b      	ldrb	r3, [r3, #4]
 800db36:	f043 0301 	orr.w	r3, r3, #1
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	69bb      	ldr	r3, [r7, #24]
 800db3e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800db44:	69bb      	ldr	r3, [r7, #24]
 800db46:	699b      	ldr	r3, [r3, #24]
 800db48:	68ba      	ldr	r2, [r7, #8]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d3c6      	bcc.n	800dadc <remove_chain+0x4a>
 800db4e:	e000      	b.n	800db52 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800db50:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800db52:	2300      	movs	r3, #0
}
 800db54:	4618      	mov	r0, r3
 800db56:	3720      	adds	r7, #32
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b088      	sub	sp, #32
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
 800db64:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d10d      	bne.n	800db8e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	691b      	ldr	r3, [r3, #16]
 800db76:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800db78:	69bb      	ldr	r3, [r7, #24]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d004      	beq.n	800db88 <create_chain+0x2c>
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	699b      	ldr	r3, [r3, #24]
 800db82:	69ba      	ldr	r2, [r7, #24]
 800db84:	429a      	cmp	r2, r3
 800db86:	d31b      	bcc.n	800dbc0 <create_chain+0x64>
 800db88:	2301      	movs	r3, #1
 800db8a:	61bb      	str	r3, [r7, #24]
 800db8c:	e018      	b.n	800dbc0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800db8e:	6839      	ldr	r1, [r7, #0]
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f7ff fdea 	bl	800d76a <get_fat>
 800db96:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d801      	bhi.n	800dba2 <create_chain+0x46>
 800db9e:	2301      	movs	r3, #1
 800dba0:	e070      	b.n	800dc84 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dba8:	d101      	bne.n	800dbae <create_chain+0x52>
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	e06a      	b.n	800dc84 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	699b      	ldr	r3, [r3, #24]
 800dbb2:	68fa      	ldr	r2, [r7, #12]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d201      	bcs.n	800dbbc <create_chain+0x60>
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	e063      	b.n	800dc84 <create_chain+0x128>
		scl = clst;
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dbc0:	69bb      	ldr	r3, [r7, #24]
 800dbc2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	699b      	ldr	r3, [r3, #24]
 800dbce:	69fa      	ldr	r2, [r7, #28]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d307      	bcc.n	800dbe4 <create_chain+0x88>
				ncl = 2;
 800dbd4:	2302      	movs	r3, #2
 800dbd6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dbd8:	69fa      	ldr	r2, [r7, #28]
 800dbda:	69bb      	ldr	r3, [r7, #24]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d901      	bls.n	800dbe4 <create_chain+0x88>
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	e04f      	b.n	800dc84 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dbe4:	69f9      	ldr	r1, [r7, #28]
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f7ff fdbf 	bl	800d76a <get_fat>
 800dbec:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d00e      	beq.n	800dc12 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d003      	beq.n	800dc02 <create_chain+0xa6>
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc00:	d101      	bne.n	800dc06 <create_chain+0xaa>
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	e03e      	b.n	800dc84 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dc06:	69fa      	ldr	r2, [r7, #28]
 800dc08:	69bb      	ldr	r3, [r7, #24]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d1da      	bne.n	800dbc4 <create_chain+0x68>
 800dc0e:	2300      	movs	r3, #0
 800dc10:	e038      	b.n	800dc84 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dc12:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dc14:	f04f 32ff 	mov.w	r2, #4294967295
 800dc18:	69f9      	ldr	r1, [r7, #28]
 800dc1a:	6938      	ldr	r0, [r7, #16]
 800dc1c:	f7ff fe4d 	bl	800d8ba <put_fat>
 800dc20:	4603      	mov	r3, r0
 800dc22:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dc24:	7dfb      	ldrb	r3, [r7, #23]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d109      	bne.n	800dc3e <create_chain+0xe2>
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d006      	beq.n	800dc3e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dc30:	69fa      	ldr	r2, [r7, #28]
 800dc32:	6839      	ldr	r1, [r7, #0]
 800dc34:	6938      	ldr	r0, [r7, #16]
 800dc36:	f7ff fe40 	bl	800d8ba <put_fat>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dc3e:	7dfb      	ldrb	r3, [r7, #23]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d116      	bne.n	800dc72 <create_chain+0x116>
		fs->last_clst = ncl;
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	69fa      	ldr	r2, [r7, #28]
 800dc48:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	695a      	ldr	r2, [r3, #20]
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	699b      	ldr	r3, [r3, #24]
 800dc52:	3b02      	subs	r3, #2
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d804      	bhi.n	800dc62 <create_chain+0x106>
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	695b      	ldr	r3, [r3, #20]
 800dc5c:	1e5a      	subs	r2, r3, #1
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	791b      	ldrb	r3, [r3, #4]
 800dc66:	f043 0301 	orr.w	r3, r3, #1
 800dc6a:	b2da      	uxtb	r2, r3
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	711a      	strb	r2, [r3, #4]
 800dc70:	e007      	b.n	800dc82 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dc72:	7dfb      	ldrb	r3, [r7, #23]
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d102      	bne.n	800dc7e <create_chain+0x122>
 800dc78:	f04f 33ff 	mov.w	r3, #4294967295
 800dc7c:	e000      	b.n	800dc80 <create_chain+0x124>
 800dc7e:	2301      	movs	r3, #1
 800dc80:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dc82:	69fb      	ldr	r3, [r7, #28]
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3720      	adds	r7, #32
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b087      	sub	sp, #28
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca0:	3304      	adds	r3, #4
 800dca2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	0a5b      	lsrs	r3, r3, #9
 800dca8:	68fa      	ldr	r2, [r7, #12]
 800dcaa:	8952      	ldrh	r2, [r2, #10]
 800dcac:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcb0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	1d1a      	adds	r2, r3, #4
 800dcb6:	613a      	str	r2, [r7, #16]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d101      	bne.n	800dcc6 <clmt_clust+0x3a>
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	e010      	b.n	800dce8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800dcc6:	697a      	ldr	r2, [r7, #20]
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d307      	bcc.n	800dcde <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800dcce:	697a      	ldr	r2, [r7, #20]
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	1ad3      	subs	r3, r2, r3
 800dcd4:	617b      	str	r3, [r7, #20]
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	3304      	adds	r3, #4
 800dcda:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dcdc:	e7e9      	b.n	800dcb2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800dcde:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	4413      	add	r3, r2
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	371c      	adds	r7, #28
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr

0800dcf4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b086      	sub	sp, #24
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dd0a:	d204      	bcs.n	800dd16 <dir_sdi+0x22>
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	f003 031f 	and.w	r3, r3, #31
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d001      	beq.n	800dd1a <dir_sdi+0x26>
		return FR_INT_ERR;
 800dd16:	2302      	movs	r3, #2
 800dd18:	e063      	b.n	800dde2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	683a      	ldr	r2, [r7, #0]
 800dd1e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	689b      	ldr	r3, [r3, #8]
 800dd24:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d106      	bne.n	800dd3a <dir_sdi+0x46>
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	2b02      	cmp	r3, #2
 800dd32:	d902      	bls.n	800dd3a <dir_sdi+0x46>
		clst = fs->dirbase;
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd38:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d10c      	bne.n	800dd5a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	095b      	lsrs	r3, r3, #5
 800dd44:	693a      	ldr	r2, [r7, #16]
 800dd46:	8912      	ldrh	r2, [r2, #8]
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d301      	bcc.n	800dd50 <dir_sdi+0x5c>
 800dd4c:	2302      	movs	r3, #2
 800dd4e:	e048      	b.n	800dde2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	61da      	str	r2, [r3, #28]
 800dd58:	e029      	b.n	800ddae <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	895b      	ldrh	r3, [r3, #10]
 800dd5e:	025b      	lsls	r3, r3, #9
 800dd60:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dd62:	e019      	b.n	800dd98 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6979      	ldr	r1, [r7, #20]
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7ff fcfe 	bl	800d76a <get_fat>
 800dd6e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd76:	d101      	bne.n	800dd7c <dir_sdi+0x88>
 800dd78:	2301      	movs	r3, #1
 800dd7a:	e032      	b.n	800dde2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	2b01      	cmp	r3, #1
 800dd80:	d904      	bls.n	800dd8c <dir_sdi+0x98>
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	699b      	ldr	r3, [r3, #24]
 800dd86:	697a      	ldr	r2, [r7, #20]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d301      	bcc.n	800dd90 <dir_sdi+0x9c>
 800dd8c:	2302      	movs	r3, #2
 800dd8e:	e028      	b.n	800dde2 <dir_sdi+0xee>
			ofs -= csz;
 800dd90:	683a      	ldr	r2, [r7, #0]
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	1ad3      	subs	r3, r2, r3
 800dd96:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dd98:	683a      	ldr	r2, [r7, #0]
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d2e1      	bcs.n	800dd64 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800dda0:	6979      	ldr	r1, [r7, #20]
 800dda2:	6938      	ldr	r0, [r7, #16]
 800dda4:	f7ff fcc2 	bl	800d72c <clust2sect>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	697a      	ldr	r2, [r7, #20]
 800ddb2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	69db      	ldr	r3, [r3, #28]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d101      	bne.n	800ddc0 <dir_sdi+0xcc>
 800ddbc:	2302      	movs	r3, #2
 800ddbe:	e010      	b.n	800dde2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	69da      	ldr	r2, [r3, #28]
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	0a5b      	lsrs	r3, r3, #9
 800ddc8:	441a      	add	r2, r3
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddda:	441a      	add	r2, r3
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dde0:	2300      	movs	r3, #0
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3718      	adds	r7, #24
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}

0800ddea <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ddea:	b580      	push	{r7, lr}
 800ddec:	b086      	sub	sp, #24
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	6078      	str	r0, [r7, #4]
 800ddf2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	695b      	ldr	r3, [r3, #20]
 800ddfe:	3320      	adds	r3, #32
 800de00:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	69db      	ldr	r3, [r3, #28]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d003      	beq.n	800de12 <dir_next+0x28>
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800de10:	d301      	bcc.n	800de16 <dir_next+0x2c>
 800de12:	2304      	movs	r3, #4
 800de14:	e0aa      	b.n	800df6c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	f040 8098 	bne.w	800df52 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	69db      	ldr	r3, [r3, #28]
 800de26:	1c5a      	adds	r2, r3, #1
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	699b      	ldr	r3, [r3, #24]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d10b      	bne.n	800de4c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	095b      	lsrs	r3, r3, #5
 800de38:	68fa      	ldr	r2, [r7, #12]
 800de3a:	8912      	ldrh	r2, [r2, #8]
 800de3c:	4293      	cmp	r3, r2
 800de3e:	f0c0 8088 	bcc.w	800df52 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2200      	movs	r2, #0
 800de46:	61da      	str	r2, [r3, #28]
 800de48:	2304      	movs	r3, #4
 800de4a:	e08f      	b.n	800df6c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	0a5b      	lsrs	r3, r3, #9
 800de50:	68fa      	ldr	r2, [r7, #12]
 800de52:	8952      	ldrh	r2, [r2, #10]
 800de54:	3a01      	subs	r2, #1
 800de56:	4013      	ands	r3, r2
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d17a      	bne.n	800df52 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800de5c:	687a      	ldr	r2, [r7, #4]
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	699b      	ldr	r3, [r3, #24]
 800de62:	4619      	mov	r1, r3
 800de64:	4610      	mov	r0, r2
 800de66:	f7ff fc80 	bl	800d76a <get_fat>
 800de6a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	2b01      	cmp	r3, #1
 800de70:	d801      	bhi.n	800de76 <dir_next+0x8c>
 800de72:	2302      	movs	r3, #2
 800de74:	e07a      	b.n	800df6c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de7c:	d101      	bne.n	800de82 <dir_next+0x98>
 800de7e:	2301      	movs	r3, #1
 800de80:	e074      	b.n	800df6c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	699b      	ldr	r3, [r3, #24]
 800de86:	697a      	ldr	r2, [r7, #20]
 800de88:	429a      	cmp	r2, r3
 800de8a:	d358      	bcc.n	800df3e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d104      	bne.n	800de9c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2200      	movs	r2, #0
 800de96:	61da      	str	r2, [r3, #28]
 800de98:	2304      	movs	r3, #4
 800de9a:	e067      	b.n	800df6c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	699b      	ldr	r3, [r3, #24]
 800dea2:	4619      	mov	r1, r3
 800dea4:	4610      	mov	r0, r2
 800dea6:	f7ff fe59 	bl	800db5c <create_chain>
 800deaa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d101      	bne.n	800deb6 <dir_next+0xcc>
 800deb2:	2307      	movs	r3, #7
 800deb4:	e05a      	b.n	800df6c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	2b01      	cmp	r3, #1
 800deba:	d101      	bne.n	800dec0 <dir_next+0xd6>
 800debc:	2302      	movs	r3, #2
 800debe:	e055      	b.n	800df6c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dec6:	d101      	bne.n	800decc <dir_next+0xe2>
 800dec8:	2301      	movs	r3, #1
 800deca:	e04f      	b.n	800df6c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800decc:	68f8      	ldr	r0, [r7, #12]
 800dece:	f7ff fb4d 	bl	800d56c <sync_window>
 800ded2:	4603      	mov	r3, r0
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d001      	beq.n	800dedc <dir_next+0xf2>
 800ded8:	2301      	movs	r3, #1
 800deda:	e047      	b.n	800df6c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	3334      	adds	r3, #52	; 0x34
 800dee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dee4:	2100      	movs	r1, #0
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7ff f977 	bl	800d1da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800deec:	2300      	movs	r3, #0
 800deee:	613b      	str	r3, [r7, #16]
 800def0:	6979      	ldr	r1, [r7, #20]
 800def2:	68f8      	ldr	r0, [r7, #12]
 800def4:	f7ff fc1a 	bl	800d72c <clust2sect>
 800def8:	4602      	mov	r2, r0
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	631a      	str	r2, [r3, #48]	; 0x30
 800defe:	e012      	b.n	800df26 <dir_next+0x13c>
						fs->wflag = 1;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	2201      	movs	r2, #1
 800df04:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f7ff fb30 	bl	800d56c <sync_window>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d001      	beq.n	800df16 <dir_next+0x12c>
 800df12:	2301      	movs	r3, #1
 800df14:	e02a      	b.n	800df6c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	3301      	adds	r3, #1
 800df1a:	613b      	str	r3, [r7, #16]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df20:	1c5a      	adds	r2, r3, #1
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	631a      	str	r2, [r3, #48]	; 0x30
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	895b      	ldrh	r3, [r3, #10]
 800df2a:	461a      	mov	r2, r3
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	4293      	cmp	r3, r2
 800df30:	d3e6      	bcc.n	800df00 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	1ad2      	subs	r2, r2, r3
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	697a      	ldr	r2, [r7, #20]
 800df42:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800df44:	6979      	ldr	r1, [r7, #20]
 800df46:	68f8      	ldr	r0, [r7, #12]
 800df48:	f7ff fbf0 	bl	800d72c <clust2sect>
 800df4c:	4602      	mov	r2, r0
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	68ba      	ldr	r2, [r7, #8]
 800df56:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df64:	441a      	add	r2, r3
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800df6a:	2300      	movs	r3, #0
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3718      	adds	r7, #24
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b086      	sub	sp, #24
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800df84:	2100      	movs	r1, #0
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f7ff feb4 	bl	800dcf4 <dir_sdi>
 800df8c:	4603      	mov	r3, r0
 800df8e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800df90:	7dfb      	ldrb	r3, [r7, #23]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d12b      	bne.n	800dfee <dir_alloc+0x7a>
		n = 0;
 800df96:	2300      	movs	r3, #0
 800df98:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	69db      	ldr	r3, [r3, #28]
 800df9e:	4619      	mov	r1, r3
 800dfa0:	68f8      	ldr	r0, [r7, #12]
 800dfa2:	f7ff fb27 	bl	800d5f4 <move_window>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dfaa:	7dfb      	ldrb	r3, [r7, #23]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d11d      	bne.n	800dfec <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6a1b      	ldr	r3, [r3, #32]
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	2be5      	cmp	r3, #229	; 0xe5
 800dfb8:	d004      	beq.n	800dfc4 <dir_alloc+0x50>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6a1b      	ldr	r3, [r3, #32]
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d107      	bne.n	800dfd4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	613b      	str	r3, [r7, #16]
 800dfca:	693a      	ldr	r2, [r7, #16]
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d102      	bne.n	800dfd8 <dir_alloc+0x64>
 800dfd2:	e00c      	b.n	800dfee <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dfd8:	2101      	movs	r1, #1
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f7ff ff05 	bl	800ddea <dir_next>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dfe4:	7dfb      	ldrb	r3, [r7, #23]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d0d7      	beq.n	800df9a <dir_alloc+0x26>
 800dfea:	e000      	b.n	800dfee <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dfec:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dfee:	7dfb      	ldrb	r3, [r7, #23]
 800dff0:	2b04      	cmp	r3, #4
 800dff2:	d101      	bne.n	800dff8 <dir_alloc+0x84>
 800dff4:	2307      	movs	r3, #7
 800dff6:	75fb      	strb	r3, [r7, #23]
	return res;
 800dff8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3718      	adds	r7, #24
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e002:	b580      	push	{r7, lr}
 800e004:	b084      	sub	sp, #16
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
 800e00a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	331a      	adds	r3, #26
 800e010:	4618      	mov	r0, r3
 800e012:	f7ff f83f 	bl	800d094 <ld_word>
 800e016:	4603      	mov	r3, r0
 800e018:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	2b03      	cmp	r3, #3
 800e020:	d109      	bne.n	800e036 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	3314      	adds	r3, #20
 800e026:	4618      	mov	r0, r3
 800e028:	f7ff f834 	bl	800d094 <ld_word>
 800e02c:	4603      	mov	r3, r0
 800e02e:	041b      	lsls	r3, r3, #16
 800e030:	68fa      	ldr	r2, [r7, #12]
 800e032:	4313      	orrs	r3, r2
 800e034:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e036:	68fb      	ldr	r3, [r7, #12]
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3710      	adds	r7, #16
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	af00      	add	r7, sp, #0
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	331a      	adds	r3, #26
 800e050:	687a      	ldr	r2, [r7, #4]
 800e052:	b292      	uxth	r2, r2
 800e054:	4611      	mov	r1, r2
 800e056:	4618      	mov	r0, r3
 800e058:	f7ff f857 	bl	800d10a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	2b03      	cmp	r3, #3
 800e062:	d109      	bne.n	800e078 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	f103 0214 	add.w	r2, r3, #20
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	0c1b      	lsrs	r3, r3, #16
 800e06e:	b29b      	uxth	r3, r3
 800e070:	4619      	mov	r1, r3
 800e072:	4610      	mov	r0, r2
 800e074:	f7ff f849 	bl	800d10a <st_word>
	}
}
 800e078:	bf00      	nop
 800e07a:	3710      	adds	r7, #16
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e080:	b590      	push	{r4, r7, lr}
 800e082:	b087      	sub	sp, #28
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	331a      	adds	r3, #26
 800e08e:	4618      	mov	r0, r3
 800e090:	f7ff f800 	bl	800d094 <ld_word>
 800e094:	4603      	mov	r3, r0
 800e096:	2b00      	cmp	r3, #0
 800e098:	d001      	beq.n	800e09e <cmp_lfn+0x1e>
 800e09a:	2300      	movs	r3, #0
 800e09c:	e059      	b.n	800e152 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0a6:	1e5a      	subs	r2, r3, #1
 800e0a8:	4613      	mov	r3, r2
 800e0aa:	005b      	lsls	r3, r3, #1
 800e0ac:	4413      	add	r3, r2
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	4413      	add	r3, r2
 800e0b2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	81fb      	strh	r3, [r7, #14]
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	613b      	str	r3, [r7, #16]
 800e0bc:	e033      	b.n	800e126 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e0be:	4a27      	ldr	r2, [pc, #156]	; (800e15c <cmp_lfn+0xdc>)
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	4413      	add	r3, r2
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	4413      	add	r3, r2
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7fe ffe1 	bl	800d094 <ld_word>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e0d6:	89fb      	ldrh	r3, [r7, #14]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d01a      	beq.n	800e112 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	2bfe      	cmp	r3, #254	; 0xfe
 800e0e0:	d812      	bhi.n	800e108 <cmp_lfn+0x88>
 800e0e2:	89bb      	ldrh	r3, [r7, #12]
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f002 f95d 	bl	80103a4 <ff_wtoupper>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	461c      	mov	r4, r3
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	1c5a      	adds	r2, r3, #1
 800e0f2:	617a      	str	r2, [r7, #20]
 800e0f4:	005b      	lsls	r3, r3, #1
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	4413      	add	r3, r2
 800e0fa:	881b      	ldrh	r3, [r3, #0]
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f002 f951 	bl	80103a4 <ff_wtoupper>
 800e102:	4603      	mov	r3, r0
 800e104:	429c      	cmp	r4, r3
 800e106:	d001      	beq.n	800e10c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e108:	2300      	movs	r3, #0
 800e10a:	e022      	b.n	800e152 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e10c:	89bb      	ldrh	r3, [r7, #12]
 800e10e:	81fb      	strh	r3, [r7, #14]
 800e110:	e006      	b.n	800e120 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e112:	89bb      	ldrh	r3, [r7, #12]
 800e114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e118:	4293      	cmp	r3, r2
 800e11a:	d001      	beq.n	800e120 <cmp_lfn+0xa0>
 800e11c:	2300      	movs	r3, #0
 800e11e:	e018      	b.n	800e152 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	3301      	adds	r3, #1
 800e124:	613b      	str	r3, [r7, #16]
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	2b0c      	cmp	r3, #12
 800e12a:	d9c8      	bls.n	800e0be <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e134:	2b00      	cmp	r3, #0
 800e136:	d00b      	beq.n	800e150 <cmp_lfn+0xd0>
 800e138:	89fb      	ldrh	r3, [r7, #14]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d008      	beq.n	800e150 <cmp_lfn+0xd0>
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	005b      	lsls	r3, r3, #1
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	4413      	add	r3, r2
 800e146:	881b      	ldrh	r3, [r3, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d001      	beq.n	800e150 <cmp_lfn+0xd0>
 800e14c:	2300      	movs	r3, #0
 800e14e:	e000      	b.n	800e152 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e150:	2301      	movs	r3, #1
}
 800e152:	4618      	mov	r0, r3
 800e154:	371c      	adds	r7, #28
 800e156:	46bd      	mov	sp, r7
 800e158:	bd90      	pop	{r4, r7, pc}
 800e15a:	bf00      	nop
 800e15c:	0801207c 	.word	0x0801207c

0800e160 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b088      	sub	sp, #32
 800e164:	af00      	add	r7, sp, #0
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	60b9      	str	r1, [r7, #8]
 800e16a:	4611      	mov	r1, r2
 800e16c:	461a      	mov	r2, r3
 800e16e:	460b      	mov	r3, r1
 800e170:	71fb      	strb	r3, [r7, #7]
 800e172:	4613      	mov	r3, r2
 800e174:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	330d      	adds	r3, #13
 800e17a:	79ba      	ldrb	r2, [r7, #6]
 800e17c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	330b      	adds	r3, #11
 800e182:	220f      	movs	r2, #15
 800e184:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	330c      	adds	r3, #12
 800e18a:	2200      	movs	r2, #0
 800e18c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	331a      	adds	r3, #26
 800e192:	2100      	movs	r1, #0
 800e194:	4618      	mov	r0, r3
 800e196:	f7fe ffb8 	bl	800d10a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e19a:	79fb      	ldrb	r3, [r7, #7]
 800e19c:	1e5a      	subs	r2, r3, #1
 800e19e:	4613      	mov	r3, r2
 800e1a0:	005b      	lsls	r3, r3, #1
 800e1a2:	4413      	add	r3, r2
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	4413      	add	r3, r2
 800e1a8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	82fb      	strh	r3, [r7, #22]
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e1b2:	8afb      	ldrh	r3, [r7, #22]
 800e1b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1b8:	4293      	cmp	r3, r2
 800e1ba:	d007      	beq.n	800e1cc <put_lfn+0x6c>
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	1c5a      	adds	r2, r3, #1
 800e1c0:	61fa      	str	r2, [r7, #28]
 800e1c2:	005b      	lsls	r3, r3, #1
 800e1c4:	68fa      	ldr	r2, [r7, #12]
 800e1c6:	4413      	add	r3, r2
 800e1c8:	881b      	ldrh	r3, [r3, #0]
 800e1ca:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e1cc:	4a17      	ldr	r2, [pc, #92]	; (800e22c <put_lfn+0xcc>)
 800e1ce:	69bb      	ldr	r3, [r7, #24]
 800e1d0:	4413      	add	r3, r2
 800e1d2:	781b      	ldrb	r3, [r3, #0]
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	4413      	add	r3, r2
 800e1da:	8afa      	ldrh	r2, [r7, #22]
 800e1dc:	4611      	mov	r1, r2
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fe ff93 	bl	800d10a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e1e4:	8afb      	ldrh	r3, [r7, #22]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d102      	bne.n	800e1f0 <put_lfn+0x90>
 800e1ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1ee:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e1f0:	69bb      	ldr	r3, [r7, #24]
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	61bb      	str	r3, [r7, #24]
 800e1f6:	69bb      	ldr	r3, [r7, #24]
 800e1f8:	2b0c      	cmp	r3, #12
 800e1fa:	d9da      	bls.n	800e1b2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e1fc:	8afb      	ldrh	r3, [r7, #22]
 800e1fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e202:	4293      	cmp	r3, r2
 800e204:	d006      	beq.n	800e214 <put_lfn+0xb4>
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	005b      	lsls	r3, r3, #1
 800e20a:	68fa      	ldr	r2, [r7, #12]
 800e20c:	4413      	add	r3, r2
 800e20e:	881b      	ldrh	r3, [r3, #0]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d103      	bne.n	800e21c <put_lfn+0xbc>
 800e214:	79fb      	ldrb	r3, [r7, #7]
 800e216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e21a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	79fa      	ldrb	r2, [r7, #7]
 800e220:	701a      	strb	r2, [r3, #0]
}
 800e222:	bf00      	nop
 800e224:	3720      	adds	r7, #32
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	0801207c 	.word	0x0801207c

0800e230 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b08c      	sub	sp, #48	; 0x30
 800e234:	af00      	add	r7, sp, #0
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	60b9      	str	r1, [r7, #8]
 800e23a:	607a      	str	r2, [r7, #4]
 800e23c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e23e:	220b      	movs	r2, #11
 800e240:	68b9      	ldr	r1, [r7, #8]
 800e242:	68f8      	ldr	r0, [r7, #12]
 800e244:	f7fe ffa8 	bl	800d198 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	2b05      	cmp	r3, #5
 800e24c:	d92b      	bls.n	800e2a6 <gen_numname+0x76>
		sr = seq;
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e252:	e022      	b.n	800e29a <gen_numname+0x6a>
			wc = *lfn++;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	1c9a      	adds	r2, r3, #2
 800e258:	607a      	str	r2, [r7, #4]
 800e25a:	881b      	ldrh	r3, [r3, #0]
 800e25c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e25e:	2300      	movs	r3, #0
 800e260:	62bb      	str	r3, [r7, #40]	; 0x28
 800e262:	e017      	b.n	800e294 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	005a      	lsls	r2, r3, #1
 800e268:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e26a:	f003 0301 	and.w	r3, r3, #1
 800e26e:	4413      	add	r3, r2
 800e270:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e272:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e274:	085b      	lsrs	r3, r3, #1
 800e276:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d005      	beq.n	800e28e <gen_numname+0x5e>
 800e282:	69fb      	ldr	r3, [r7, #28]
 800e284:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e288:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e28c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e290:	3301      	adds	r3, #1
 800e292:	62bb      	str	r3, [r7, #40]	; 0x28
 800e294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e296:	2b0f      	cmp	r3, #15
 800e298:	d9e4      	bls.n	800e264 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	881b      	ldrh	r3, [r3, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d1d8      	bne.n	800e254 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e2a2:	69fb      	ldr	r3, [r7, #28]
 800e2a4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e2a6:	2307      	movs	r3, #7
 800e2a8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	b2db      	uxtb	r3, r3
 800e2ae:	f003 030f 	and.w	r3, r3, #15
 800e2b2:	b2db      	uxtb	r3, r3
 800e2b4:	3330      	adds	r3, #48	; 0x30
 800e2b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e2ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2be:	2b39      	cmp	r3, #57	; 0x39
 800e2c0:	d904      	bls.n	800e2cc <gen_numname+0x9c>
 800e2c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2c6:	3307      	adds	r3, #7
 800e2c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ce:	1e5a      	subs	r2, r3, #1
 800e2d0:	62ba      	str	r2, [r7, #40]	; 0x28
 800e2d2:	3330      	adds	r3, #48	; 0x30
 800e2d4:	443b      	add	r3, r7
 800e2d6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e2da:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	091b      	lsrs	r3, r3, #4
 800e2e2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d1df      	bne.n	800e2aa <gen_numname+0x7a>
	ns[i] = '~';
 800e2ea:	f107 0214 	add.w	r2, r7, #20
 800e2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f0:	4413      	add	r3, r2
 800e2f2:	227e      	movs	r2, #126	; 0x7e
 800e2f4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	627b      	str	r3, [r7, #36]	; 0x24
 800e2fa:	e002      	b.n	800e302 <gen_numname+0xd2>
 800e2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fe:	3301      	adds	r3, #1
 800e300:	627b      	str	r3, [r7, #36]	; 0x24
 800e302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e306:	429a      	cmp	r2, r3
 800e308:	d205      	bcs.n	800e316 <gen_numname+0xe6>
 800e30a:	68fa      	ldr	r2, [r7, #12]
 800e30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30e:	4413      	add	r3, r2
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	2b20      	cmp	r3, #32
 800e314:	d1f2      	bne.n	800e2fc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e318:	2b07      	cmp	r3, #7
 800e31a:	d807      	bhi.n	800e32c <gen_numname+0xfc>
 800e31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e31e:	1c5a      	adds	r2, r3, #1
 800e320:	62ba      	str	r2, [r7, #40]	; 0x28
 800e322:	3330      	adds	r3, #48	; 0x30
 800e324:	443b      	add	r3, r7
 800e326:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e32a:	e000      	b.n	800e32e <gen_numname+0xfe>
 800e32c:	2120      	movs	r1, #32
 800e32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e330:	1c5a      	adds	r2, r3, #1
 800e332:	627a      	str	r2, [r7, #36]	; 0x24
 800e334:	68fa      	ldr	r2, [r7, #12]
 800e336:	4413      	add	r3, r2
 800e338:	460a      	mov	r2, r1
 800e33a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33e:	2b07      	cmp	r3, #7
 800e340:	d9e9      	bls.n	800e316 <gen_numname+0xe6>
}
 800e342:	bf00      	nop
 800e344:	bf00      	nop
 800e346:	3730      	adds	r7, #48	; 0x30
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e34c:	b480      	push	{r7}
 800e34e:	b085      	sub	sp, #20
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e354:	2300      	movs	r3, #0
 800e356:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e358:	230b      	movs	r3, #11
 800e35a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e35c:	7bfb      	ldrb	r3, [r7, #15]
 800e35e:	b2da      	uxtb	r2, r3
 800e360:	0852      	lsrs	r2, r2, #1
 800e362:	01db      	lsls	r3, r3, #7
 800e364:	4313      	orrs	r3, r2
 800e366:	b2da      	uxtb	r2, r3
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	1c59      	adds	r1, r3, #1
 800e36c:	6079      	str	r1, [r7, #4]
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	4413      	add	r3, r2
 800e372:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	3b01      	subs	r3, #1
 800e378:	60bb      	str	r3, [r7, #8]
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d1ed      	bne.n	800e35c <sum_sfn+0x10>
	return sum;
 800e380:	7bfb      	ldrb	r3, [r7, #15]
}
 800e382:	4618      	mov	r0, r3
 800e384:	3714      	adds	r7, #20
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr

0800e38e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e38e:	b580      	push	{r7, lr}
 800e390:	b086      	sub	sp, #24
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e39c:	2100      	movs	r1, #0
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f7ff fca8 	bl	800dcf4 <dir_sdi>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e3a8:	7dfb      	ldrb	r3, [r7, #23]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d001      	beq.n	800e3b2 <dir_find+0x24>
 800e3ae:	7dfb      	ldrb	r3, [r7, #23]
 800e3b0:	e0a9      	b.n	800e506 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e3b2:	23ff      	movs	r3, #255	; 0xff
 800e3b4:	753b      	strb	r3, [r7, #20]
 800e3b6:	7d3b      	ldrb	r3, [r7, #20]
 800e3b8:	757b      	strb	r3, [r7, #21]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e3c0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	69db      	ldr	r3, [r3, #28]
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	6938      	ldr	r0, [r7, #16]
 800e3ca:	f7ff f913 	bl	800d5f4 <move_window>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e3d2:	7dfb      	ldrb	r3, [r7, #23]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	f040 8090 	bne.w	800e4fa <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6a1b      	ldr	r3, [r3, #32]
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e3e2:	7dbb      	ldrb	r3, [r7, #22]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d102      	bne.n	800e3ee <dir_find+0x60>
 800e3e8:	2304      	movs	r3, #4
 800e3ea:	75fb      	strb	r3, [r7, #23]
 800e3ec:	e08a      	b.n	800e504 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6a1b      	ldr	r3, [r3, #32]
 800e3f2:	330b      	adds	r3, #11
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e3fa:	73fb      	strb	r3, [r7, #15]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	7bfa      	ldrb	r2, [r7, #15]
 800e400:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e402:	7dbb      	ldrb	r3, [r7, #22]
 800e404:	2be5      	cmp	r3, #229	; 0xe5
 800e406:	d007      	beq.n	800e418 <dir_find+0x8a>
 800e408:	7bfb      	ldrb	r3, [r7, #15]
 800e40a:	f003 0308 	and.w	r3, r3, #8
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d009      	beq.n	800e426 <dir_find+0x98>
 800e412:	7bfb      	ldrb	r3, [r7, #15]
 800e414:	2b0f      	cmp	r3, #15
 800e416:	d006      	beq.n	800e426 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e418:	23ff      	movs	r3, #255	; 0xff
 800e41a:	757b      	strb	r3, [r7, #21]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f04f 32ff 	mov.w	r2, #4294967295
 800e422:	631a      	str	r2, [r3, #48]	; 0x30
 800e424:	e05e      	b.n	800e4e4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e426:	7bfb      	ldrb	r3, [r7, #15]
 800e428:	2b0f      	cmp	r3, #15
 800e42a:	d136      	bne.n	800e49a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e436:	2b00      	cmp	r3, #0
 800e438:	d154      	bne.n	800e4e4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e43a:	7dbb      	ldrb	r3, [r7, #22]
 800e43c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e440:	2b00      	cmp	r3, #0
 800e442:	d00d      	beq.n	800e460 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6a1b      	ldr	r3, [r3, #32]
 800e448:	7b5b      	ldrb	r3, [r3, #13]
 800e44a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e44c:	7dbb      	ldrb	r3, [r7, #22]
 800e44e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e452:	75bb      	strb	r3, [r7, #22]
 800e454:	7dbb      	ldrb	r3, [r7, #22]
 800e456:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	695a      	ldr	r2, [r3, #20]
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e460:	7dba      	ldrb	r2, [r7, #22]
 800e462:	7d7b      	ldrb	r3, [r7, #21]
 800e464:	429a      	cmp	r2, r3
 800e466:	d115      	bne.n	800e494 <dir_find+0x106>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6a1b      	ldr	r3, [r3, #32]
 800e46c:	330d      	adds	r3, #13
 800e46e:	781b      	ldrb	r3, [r3, #0]
 800e470:	7d3a      	ldrb	r2, [r7, #20]
 800e472:	429a      	cmp	r2, r3
 800e474:	d10e      	bne.n	800e494 <dir_find+0x106>
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	68da      	ldr	r2, [r3, #12]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6a1b      	ldr	r3, [r3, #32]
 800e47e:	4619      	mov	r1, r3
 800e480:	4610      	mov	r0, r2
 800e482:	f7ff fdfd 	bl	800e080 <cmp_lfn>
 800e486:	4603      	mov	r3, r0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d003      	beq.n	800e494 <dir_find+0x106>
 800e48c:	7d7b      	ldrb	r3, [r7, #21]
 800e48e:	3b01      	subs	r3, #1
 800e490:	b2db      	uxtb	r3, r3
 800e492:	e000      	b.n	800e496 <dir_find+0x108>
 800e494:	23ff      	movs	r3, #255	; 0xff
 800e496:	757b      	strb	r3, [r7, #21]
 800e498:	e024      	b.n	800e4e4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e49a:	7d7b      	ldrb	r3, [r7, #21]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d109      	bne.n	800e4b4 <dir_find+0x126>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6a1b      	ldr	r3, [r3, #32]
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7ff ff51 	bl	800e34c <sum_sfn>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	461a      	mov	r2, r3
 800e4ae:	7d3b      	ldrb	r3, [r7, #20]
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d024      	beq.n	800e4fe <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e4ba:	f003 0301 	and.w	r3, r3, #1
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d10a      	bne.n	800e4d8 <dir_find+0x14a>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6a18      	ldr	r0, [r3, #32]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	3324      	adds	r3, #36	; 0x24
 800e4ca:	220b      	movs	r2, #11
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	f7fe fe9f 	bl	800d210 <mem_cmp>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d014      	beq.n	800e502 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e4d8:	23ff      	movs	r3, #255	; 0xff
 800e4da:	757b      	strb	r3, [r7, #21]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f04f 32ff 	mov.w	r2, #4294967295
 800e4e2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e4e4:	2100      	movs	r1, #0
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f7ff fc7f 	bl	800ddea <dir_next>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e4f0:	7dfb      	ldrb	r3, [r7, #23]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	f43f af65 	beq.w	800e3c2 <dir_find+0x34>
 800e4f8:	e004      	b.n	800e504 <dir_find+0x176>
		if (res != FR_OK) break;
 800e4fa:	bf00      	nop
 800e4fc:	e002      	b.n	800e504 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e4fe:	bf00      	nop
 800e500:	e000      	b.n	800e504 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e502:	bf00      	nop

	return res;
 800e504:	7dfb      	ldrb	r3, [r7, #23]
}
 800e506:	4618      	mov	r0, r3
 800e508:	3718      	adds	r7, #24
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}
	...

0800e510 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b08c      	sub	sp, #48	; 0x30
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e524:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d001      	beq.n	800e530 <dir_register+0x20>
 800e52c:	2306      	movs	r3, #6
 800e52e:	e0e0      	b.n	800e6f2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e530:	2300      	movs	r3, #0
 800e532:	627b      	str	r3, [r7, #36]	; 0x24
 800e534:	e002      	b.n	800e53c <dir_register+0x2c>
 800e536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e538:	3301      	adds	r3, #1
 800e53a:	627b      	str	r3, [r7, #36]	; 0x24
 800e53c:	69fb      	ldr	r3, [r7, #28]
 800e53e:	68da      	ldr	r2, [r3, #12]
 800e540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e542:	005b      	lsls	r3, r3, #1
 800e544:	4413      	add	r3, r2
 800e546:	881b      	ldrh	r3, [r3, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d1f4      	bne.n	800e536 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e552:	f107 030c 	add.w	r3, r7, #12
 800e556:	220c      	movs	r2, #12
 800e558:	4618      	mov	r0, r3
 800e55a:	f7fe fe1d 	bl	800d198 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e55e:	7dfb      	ldrb	r3, [r7, #23]
 800e560:	f003 0301 	and.w	r3, r3, #1
 800e564:	2b00      	cmp	r3, #0
 800e566:	d032      	beq.n	800e5ce <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2240      	movs	r2, #64	; 0x40
 800e56c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e570:	2301      	movs	r3, #1
 800e572:	62bb      	str	r3, [r7, #40]	; 0x28
 800e574:	e016      	b.n	800e5a4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	68da      	ldr	r2, [r3, #12]
 800e580:	f107 010c 	add.w	r1, r7, #12
 800e584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e586:	f7ff fe53 	bl	800e230 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f7ff feff 	bl	800e38e <dir_find>
 800e590:	4603      	mov	r3, r0
 800e592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d106      	bne.n	800e5ac <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a6:	2b63      	cmp	r3, #99	; 0x63
 800e5a8:	d9e5      	bls.n	800e576 <dir_register+0x66>
 800e5aa:	e000      	b.n	800e5ae <dir_register+0x9e>
			if (res != FR_OK) break;
 800e5ac:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b0:	2b64      	cmp	r3, #100	; 0x64
 800e5b2:	d101      	bne.n	800e5b8 <dir_register+0xa8>
 800e5b4:	2307      	movs	r3, #7
 800e5b6:	e09c      	b.n	800e6f2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e5b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e5bc:	2b04      	cmp	r3, #4
 800e5be:	d002      	beq.n	800e5c6 <dir_register+0xb6>
 800e5c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e5c4:	e095      	b.n	800e6f2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e5c6:	7dfa      	ldrb	r2, [r7, #23]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e5ce:	7dfb      	ldrb	r3, [r7, #23]
 800e5d0:	f003 0302 	and.w	r3, r3, #2
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d007      	beq.n	800e5e8 <dir_register+0xd8>
 800e5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5da:	330c      	adds	r3, #12
 800e5dc:	4a47      	ldr	r2, [pc, #284]	; (800e6fc <dir_register+0x1ec>)
 800e5de:	fba2 2303 	umull	r2, r3, r2, r3
 800e5e2:	089b      	lsrs	r3, r3, #2
 800e5e4:	3301      	adds	r3, #1
 800e5e6:	e000      	b.n	800e5ea <dir_register+0xda>
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e5ec:	6a39      	ldr	r1, [r7, #32]
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7ff fcc0 	bl	800df74 <dir_alloc>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e5fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d148      	bne.n	800e694 <dir_register+0x184>
 800e602:	6a3b      	ldr	r3, [r7, #32]
 800e604:	3b01      	subs	r3, #1
 800e606:	623b      	str	r3, [r7, #32]
 800e608:	6a3b      	ldr	r3, [r7, #32]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d042      	beq.n	800e694 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	695a      	ldr	r2, [r3, #20]
 800e612:	6a3b      	ldr	r3, [r7, #32]
 800e614:	015b      	lsls	r3, r3, #5
 800e616:	1ad3      	subs	r3, r2, r3
 800e618:	4619      	mov	r1, r3
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f7ff fb6a 	bl	800dcf4 <dir_sdi>
 800e620:	4603      	mov	r3, r0
 800e622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d132      	bne.n	800e694 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	3324      	adds	r3, #36	; 0x24
 800e632:	4618      	mov	r0, r3
 800e634:	f7ff fe8a 	bl	800e34c <sum_sfn>
 800e638:	4603      	mov	r3, r0
 800e63a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	69db      	ldr	r3, [r3, #28]
 800e640:	4619      	mov	r1, r3
 800e642:	69f8      	ldr	r0, [r7, #28]
 800e644:	f7fe ffd6 	bl	800d5f4 <move_window>
 800e648:	4603      	mov	r3, r0
 800e64a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e64e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e652:	2b00      	cmp	r3, #0
 800e654:	d11d      	bne.n	800e692 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e656:	69fb      	ldr	r3, [r7, #28]
 800e658:	68d8      	ldr	r0, [r3, #12]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6a19      	ldr	r1, [r3, #32]
 800e65e:	6a3b      	ldr	r3, [r7, #32]
 800e660:	b2da      	uxtb	r2, r3
 800e662:	7efb      	ldrb	r3, [r7, #27]
 800e664:	f7ff fd7c 	bl	800e160 <put_lfn>
				fs->wflag = 1;
 800e668:	69fb      	ldr	r3, [r7, #28]
 800e66a:	2201      	movs	r2, #1
 800e66c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e66e:	2100      	movs	r1, #0
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f7ff fbba 	bl	800ddea <dir_next>
 800e676:	4603      	mov	r3, r0
 800e678:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e67c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e680:	2b00      	cmp	r3, #0
 800e682:	d107      	bne.n	800e694 <dir_register+0x184>
 800e684:	6a3b      	ldr	r3, [r7, #32]
 800e686:	3b01      	subs	r3, #1
 800e688:	623b      	str	r3, [r7, #32]
 800e68a:	6a3b      	ldr	r3, [r7, #32]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d1d5      	bne.n	800e63c <dir_register+0x12c>
 800e690:	e000      	b.n	800e694 <dir_register+0x184>
				if (res != FR_OK) break;
 800e692:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e694:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d128      	bne.n	800e6ee <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	69db      	ldr	r3, [r3, #28]
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	69f8      	ldr	r0, [r7, #28]
 800e6a4:	f7fe ffa6 	bl	800d5f4 <move_window>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e6ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d11b      	bne.n	800e6ee <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6a1b      	ldr	r3, [r3, #32]
 800e6ba:	2220      	movs	r2, #32
 800e6bc:	2100      	movs	r1, #0
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7fe fd8b 	bl	800d1da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6a18      	ldr	r0, [r3, #32]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	3324      	adds	r3, #36	; 0x24
 800e6cc:	220b      	movs	r2, #11
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	f7fe fd62 	bl	800d198 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6a1b      	ldr	r3, [r3, #32]
 800e6de:	330c      	adds	r3, #12
 800e6e0:	f002 0218 	and.w	r2, r2, #24
 800e6e4:	b2d2      	uxtb	r2, r2
 800e6e6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e6ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3730      	adds	r7, #48	; 0x30
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	4ec4ec4f 	.word	0x4ec4ec4f

0800e700 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b08a      	sub	sp, #40	; 0x28
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	613b      	str	r3, [r7, #16]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	68db      	ldr	r3, [r3, #12]
 800e716:	60fb      	str	r3, [r7, #12]
 800e718:	2300      	movs	r3, #0
 800e71a:	617b      	str	r3, [r7, #20]
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e720:	69bb      	ldr	r3, [r7, #24]
 800e722:	1c5a      	adds	r2, r3, #1
 800e724:	61ba      	str	r2, [r7, #24]
 800e726:	693a      	ldr	r2, [r7, #16]
 800e728:	4413      	add	r3, r2
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e72e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e730:	2b1f      	cmp	r3, #31
 800e732:	d940      	bls.n	800e7b6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e734:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e736:	2b2f      	cmp	r3, #47	; 0x2f
 800e738:	d006      	beq.n	800e748 <create_name+0x48>
 800e73a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e73c:	2b5c      	cmp	r3, #92	; 0x5c
 800e73e:	d110      	bne.n	800e762 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e740:	e002      	b.n	800e748 <create_name+0x48>
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	3301      	adds	r3, #1
 800e746:	61bb      	str	r3, [r7, #24]
 800e748:	693a      	ldr	r2, [r7, #16]
 800e74a:	69bb      	ldr	r3, [r7, #24]
 800e74c:	4413      	add	r3, r2
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	2b2f      	cmp	r3, #47	; 0x2f
 800e752:	d0f6      	beq.n	800e742 <create_name+0x42>
 800e754:	693a      	ldr	r2, [r7, #16]
 800e756:	69bb      	ldr	r3, [r7, #24]
 800e758:	4413      	add	r3, r2
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	2b5c      	cmp	r3, #92	; 0x5c
 800e75e:	d0f0      	beq.n	800e742 <create_name+0x42>
			break;
 800e760:	e02a      	b.n	800e7b8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	2bfe      	cmp	r3, #254	; 0xfe
 800e766:	d901      	bls.n	800e76c <create_name+0x6c>
 800e768:	2306      	movs	r3, #6
 800e76a:	e17d      	b.n	800ea68 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e76c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e774:	2101      	movs	r1, #1
 800e776:	4618      	mov	r0, r3
 800e778:	f001 fdd8 	bl	801032c <ff_convert>
 800e77c:	4603      	mov	r3, r0
 800e77e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e780:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e782:	2b00      	cmp	r3, #0
 800e784:	d101      	bne.n	800e78a <create_name+0x8a>
 800e786:	2306      	movs	r3, #6
 800e788:	e16e      	b.n	800ea68 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e78a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e78c:	2b7f      	cmp	r3, #127	; 0x7f
 800e78e:	d809      	bhi.n	800e7a4 <create_name+0xa4>
 800e790:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e792:	4619      	mov	r1, r3
 800e794:	488d      	ldr	r0, [pc, #564]	; (800e9cc <create_name+0x2cc>)
 800e796:	f7fe fd62 	bl	800d25e <chk_chr>
 800e79a:	4603      	mov	r3, r0
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d001      	beq.n	800e7a4 <create_name+0xa4>
 800e7a0:	2306      	movs	r3, #6
 800e7a2:	e161      	b.n	800ea68 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	1c5a      	adds	r2, r3, #1
 800e7a8:	617a      	str	r2, [r7, #20]
 800e7aa:	005b      	lsls	r3, r3, #1
 800e7ac:	68fa      	ldr	r2, [r7, #12]
 800e7ae:	4413      	add	r3, r2
 800e7b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e7b2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e7b4:	e7b4      	b.n	800e720 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e7b6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e7b8:	693a      	ldr	r2, [r7, #16]
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	441a      	add	r2, r3
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e7c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7c4:	2b1f      	cmp	r3, #31
 800e7c6:	d801      	bhi.n	800e7cc <create_name+0xcc>
 800e7c8:	2304      	movs	r3, #4
 800e7ca:	e000      	b.n	800e7ce <create_name+0xce>
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e7d2:	e011      	b.n	800e7f8 <create_name+0xf8>
		w = lfn[di - 1];
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e7da:	3b01      	subs	r3, #1
 800e7dc:	005b      	lsls	r3, r3, #1
 800e7de:	68fa      	ldr	r2, [r7, #12]
 800e7e0:	4413      	add	r3, r2
 800e7e2:	881b      	ldrh	r3, [r3, #0]
 800e7e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e7e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7e8:	2b20      	cmp	r3, #32
 800e7ea:	d002      	beq.n	800e7f2 <create_name+0xf2>
 800e7ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7ee:	2b2e      	cmp	r3, #46	; 0x2e
 800e7f0:	d106      	bne.n	800e800 <create_name+0x100>
		di--;
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	3b01      	subs	r3, #1
 800e7f6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d1ea      	bne.n	800e7d4 <create_name+0xd4>
 800e7fe:	e000      	b.n	800e802 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e800:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	005b      	lsls	r3, r3, #1
 800e806:	68fa      	ldr	r2, [r7, #12]
 800e808:	4413      	add	r3, r2
 800e80a:	2200      	movs	r2, #0
 800e80c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d101      	bne.n	800e818 <create_name+0x118>
 800e814:	2306      	movs	r3, #6
 800e816:	e127      	b.n	800ea68 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	3324      	adds	r3, #36	; 0x24
 800e81c:	220b      	movs	r2, #11
 800e81e:	2120      	movs	r1, #32
 800e820:	4618      	mov	r0, r3
 800e822:	f7fe fcda 	bl	800d1da <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e826:	2300      	movs	r3, #0
 800e828:	61bb      	str	r3, [r7, #24]
 800e82a:	e002      	b.n	800e832 <create_name+0x132>
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	3301      	adds	r3, #1
 800e830:	61bb      	str	r3, [r7, #24]
 800e832:	69bb      	ldr	r3, [r7, #24]
 800e834:	005b      	lsls	r3, r3, #1
 800e836:	68fa      	ldr	r2, [r7, #12]
 800e838:	4413      	add	r3, r2
 800e83a:	881b      	ldrh	r3, [r3, #0]
 800e83c:	2b20      	cmp	r3, #32
 800e83e:	d0f5      	beq.n	800e82c <create_name+0x12c>
 800e840:	69bb      	ldr	r3, [r7, #24]
 800e842:	005b      	lsls	r3, r3, #1
 800e844:	68fa      	ldr	r2, [r7, #12]
 800e846:	4413      	add	r3, r2
 800e848:	881b      	ldrh	r3, [r3, #0]
 800e84a:	2b2e      	cmp	r3, #46	; 0x2e
 800e84c:	d0ee      	beq.n	800e82c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e84e:	69bb      	ldr	r3, [r7, #24]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d009      	beq.n	800e868 <create_name+0x168>
 800e854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e858:	f043 0303 	orr.w	r3, r3, #3
 800e85c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e860:	e002      	b.n	800e868 <create_name+0x168>
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	3b01      	subs	r3, #1
 800e866:	617b      	str	r3, [r7, #20]
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d009      	beq.n	800e882 <create_name+0x182>
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e874:	3b01      	subs	r3, #1
 800e876:	005b      	lsls	r3, r3, #1
 800e878:	68fa      	ldr	r2, [r7, #12]
 800e87a:	4413      	add	r3, r2
 800e87c:	881b      	ldrh	r3, [r3, #0]
 800e87e:	2b2e      	cmp	r3, #46	; 0x2e
 800e880:	d1ef      	bne.n	800e862 <create_name+0x162>

	i = b = 0; ni = 8;
 800e882:	2300      	movs	r3, #0
 800e884:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e888:	2300      	movs	r3, #0
 800e88a:	623b      	str	r3, [r7, #32]
 800e88c:	2308      	movs	r3, #8
 800e88e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e890:	69bb      	ldr	r3, [r7, #24]
 800e892:	1c5a      	adds	r2, r3, #1
 800e894:	61ba      	str	r2, [r7, #24]
 800e896:	005b      	lsls	r3, r3, #1
 800e898:	68fa      	ldr	r2, [r7, #12]
 800e89a:	4413      	add	r3, r2
 800e89c:	881b      	ldrh	r3, [r3, #0]
 800e89e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e8a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	f000 8090 	beq.w	800e9c8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e8a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8aa:	2b20      	cmp	r3, #32
 800e8ac:	d006      	beq.n	800e8bc <create_name+0x1bc>
 800e8ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8b0:	2b2e      	cmp	r3, #46	; 0x2e
 800e8b2:	d10a      	bne.n	800e8ca <create_name+0x1ca>
 800e8b4:	69ba      	ldr	r2, [r7, #24]
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d006      	beq.n	800e8ca <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e8bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8c0:	f043 0303 	orr.w	r3, r3, #3
 800e8c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8c8:	e07d      	b.n	800e9c6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e8ca:	6a3a      	ldr	r2, [r7, #32]
 800e8cc:	69fb      	ldr	r3, [r7, #28]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d203      	bcs.n	800e8da <create_name+0x1da>
 800e8d2:	69ba      	ldr	r2, [r7, #24]
 800e8d4:	697b      	ldr	r3, [r7, #20]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d123      	bne.n	800e922 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	2b0b      	cmp	r3, #11
 800e8de:	d106      	bne.n	800e8ee <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e8e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8e4:	f043 0303 	orr.w	r3, r3, #3
 800e8e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8ec:	e075      	b.n	800e9da <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e8ee:	69ba      	ldr	r2, [r7, #24]
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d005      	beq.n	800e902 <create_name+0x202>
 800e8f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8fa:	f043 0303 	orr.w	r3, r3, #3
 800e8fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e902:	69ba      	ldr	r2, [r7, #24]
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	429a      	cmp	r2, r3
 800e908:	d866      	bhi.n	800e9d8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	61bb      	str	r3, [r7, #24]
 800e90e:	2308      	movs	r3, #8
 800e910:	623b      	str	r3, [r7, #32]
 800e912:	230b      	movs	r3, #11
 800e914:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e916:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e91a:	009b      	lsls	r3, r3, #2
 800e91c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e920:	e051      	b.n	800e9c6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e922:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e924:	2b7f      	cmp	r3, #127	; 0x7f
 800e926:	d914      	bls.n	800e952 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e928:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e92a:	2100      	movs	r1, #0
 800e92c:	4618      	mov	r0, r3
 800e92e:	f001 fcfd 	bl	801032c <ff_convert>
 800e932:	4603      	mov	r3, r0
 800e934:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e936:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d004      	beq.n	800e946 <create_name+0x246>
 800e93c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e93e:	3b80      	subs	r3, #128	; 0x80
 800e940:	4a23      	ldr	r2, [pc, #140]	; (800e9d0 <create_name+0x2d0>)
 800e942:	5cd3      	ldrb	r3, [r2, r3]
 800e944:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e946:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e94a:	f043 0302 	orr.w	r3, r3, #2
 800e94e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e954:	2b00      	cmp	r3, #0
 800e956:	d007      	beq.n	800e968 <create_name+0x268>
 800e958:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e95a:	4619      	mov	r1, r3
 800e95c:	481d      	ldr	r0, [pc, #116]	; (800e9d4 <create_name+0x2d4>)
 800e95e:	f7fe fc7e 	bl	800d25e <chk_chr>
 800e962:	4603      	mov	r3, r0
 800e964:	2b00      	cmp	r3, #0
 800e966:	d008      	beq.n	800e97a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e968:	235f      	movs	r3, #95	; 0x5f
 800e96a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e96c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e970:	f043 0303 	orr.w	r3, r3, #3
 800e974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e978:	e01b      	b.n	800e9b2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e97a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e97c:	2b40      	cmp	r3, #64	; 0x40
 800e97e:	d909      	bls.n	800e994 <create_name+0x294>
 800e980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e982:	2b5a      	cmp	r3, #90	; 0x5a
 800e984:	d806      	bhi.n	800e994 <create_name+0x294>
					b |= 2;
 800e986:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e98a:	f043 0302 	orr.w	r3, r3, #2
 800e98e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e992:	e00e      	b.n	800e9b2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e996:	2b60      	cmp	r3, #96	; 0x60
 800e998:	d90b      	bls.n	800e9b2 <create_name+0x2b2>
 800e99a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e99c:	2b7a      	cmp	r3, #122	; 0x7a
 800e99e:	d808      	bhi.n	800e9b2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e9a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e9a4:	f043 0301 	orr.w	r3, r3, #1
 800e9a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e9ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9ae:	3b20      	subs	r3, #32
 800e9b0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e9b2:	6a3b      	ldr	r3, [r7, #32]
 800e9b4:	1c5a      	adds	r2, r3, #1
 800e9b6:	623a      	str	r2, [r7, #32]
 800e9b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9ba:	b2d1      	uxtb	r1, r2
 800e9bc:	687a      	ldr	r2, [r7, #4]
 800e9be:	4413      	add	r3, r2
 800e9c0:	460a      	mov	r2, r1
 800e9c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e9c6:	e763      	b.n	800e890 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e9c8:	bf00      	nop
 800e9ca:	e006      	b.n	800e9da <create_name+0x2da>
 800e9cc:	08011990 	.word	0x08011990
 800e9d0:	08011ffc 	.word	0x08011ffc
 800e9d4:	0801199c 	.word	0x0801199c
			if (si > di) break;			/* No extension */
 800e9d8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e9e0:	2be5      	cmp	r3, #229	; 0xe5
 800e9e2:	d103      	bne.n	800e9ec <create_name+0x2ec>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2205      	movs	r2, #5
 800e9e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e9ec:	69fb      	ldr	r3, [r7, #28]
 800e9ee:	2b08      	cmp	r3, #8
 800e9f0:	d104      	bne.n	800e9fc <create_name+0x2fc>
 800e9f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e9fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea00:	f003 030c 	and.w	r3, r3, #12
 800ea04:	2b0c      	cmp	r3, #12
 800ea06:	d005      	beq.n	800ea14 <create_name+0x314>
 800ea08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea0c:	f003 0303 	and.w	r3, r3, #3
 800ea10:	2b03      	cmp	r3, #3
 800ea12:	d105      	bne.n	800ea20 <create_name+0x320>
 800ea14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea18:	f043 0302 	orr.w	r3, r3, #2
 800ea1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ea20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea24:	f003 0302 	and.w	r3, r3, #2
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d117      	bne.n	800ea5c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ea2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea30:	f003 0303 	and.w	r3, r3, #3
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d105      	bne.n	800ea44 <create_name+0x344>
 800ea38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea3c:	f043 0310 	orr.w	r3, r3, #16
 800ea40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ea44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea48:	f003 030c 	and.w	r3, r3, #12
 800ea4c:	2b04      	cmp	r3, #4
 800ea4e:	d105      	bne.n	800ea5c <create_name+0x35c>
 800ea50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea54:	f043 0308 	orr.w	r3, r3, #8
 800ea58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ea62:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800ea66:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3728      	adds	r7, #40	; 0x28
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b086      	sub	sp, #24
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ea84:	e002      	b.n	800ea8c <follow_path+0x1c>
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	3301      	adds	r3, #1
 800ea8a:	603b      	str	r3, [r7, #0]
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	781b      	ldrb	r3, [r3, #0]
 800ea90:	2b2f      	cmp	r3, #47	; 0x2f
 800ea92:	d0f8      	beq.n	800ea86 <follow_path+0x16>
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	2b5c      	cmp	r3, #92	; 0x5c
 800ea9a:	d0f4      	beq.n	800ea86 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ea9c:	693b      	ldr	r3, [r7, #16]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	2b1f      	cmp	r3, #31
 800eaa8:	d80a      	bhi.n	800eac0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2280      	movs	r2, #128	; 0x80
 800eaae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800eab2:	2100      	movs	r1, #0
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f7ff f91d 	bl	800dcf4 <dir_sdi>
 800eaba:	4603      	mov	r3, r0
 800eabc:	75fb      	strb	r3, [r7, #23]
 800eabe:	e043      	b.n	800eb48 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eac0:	463b      	mov	r3, r7
 800eac2:	4619      	mov	r1, r3
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f7ff fe1b 	bl	800e700 <create_name>
 800eaca:	4603      	mov	r3, r0
 800eacc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eace:	7dfb      	ldrb	r3, [r7, #23]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d134      	bne.n	800eb3e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f7ff fc5a 	bl	800e38e <dir_find>
 800eada:	4603      	mov	r3, r0
 800eadc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eae4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800eae6:	7dfb      	ldrb	r3, [r7, #23]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d00a      	beq.n	800eb02 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800eaec:	7dfb      	ldrb	r3, [r7, #23]
 800eaee:	2b04      	cmp	r3, #4
 800eaf0:	d127      	bne.n	800eb42 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800eaf2:	7afb      	ldrb	r3, [r7, #11]
 800eaf4:	f003 0304 	and.w	r3, r3, #4
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d122      	bne.n	800eb42 <follow_path+0xd2>
 800eafc:	2305      	movs	r3, #5
 800eafe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800eb00:	e01f      	b.n	800eb42 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eb02:	7afb      	ldrb	r3, [r7, #11]
 800eb04:	f003 0304 	and.w	r3, r3, #4
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d11c      	bne.n	800eb46 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	799b      	ldrb	r3, [r3, #6]
 800eb10:	f003 0310 	and.w	r3, r3, #16
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d102      	bne.n	800eb1e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800eb18:	2305      	movs	r3, #5
 800eb1a:	75fb      	strb	r3, [r7, #23]
 800eb1c:	e014      	b.n	800eb48 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	695b      	ldr	r3, [r3, #20]
 800eb28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb2c:	4413      	add	r3, r2
 800eb2e:	4619      	mov	r1, r3
 800eb30:	68f8      	ldr	r0, [r7, #12]
 800eb32:	f7ff fa66 	bl	800e002 <ld_clust>
 800eb36:	4602      	mov	r2, r0
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eb3c:	e7c0      	b.n	800eac0 <follow_path+0x50>
			if (res != FR_OK) break;
 800eb3e:	bf00      	nop
 800eb40:	e002      	b.n	800eb48 <follow_path+0xd8>
				break;
 800eb42:	bf00      	nop
 800eb44:	e000      	b.n	800eb48 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eb46:	bf00      	nop
			}
		}
	}

	return res;
 800eb48:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3718      	adds	r7, #24
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}

0800eb52 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800eb52:	b480      	push	{r7}
 800eb54:	b087      	sub	sp, #28
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800eb5a:	f04f 33ff 	mov.w	r3, #4294967295
 800eb5e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d031      	beq.n	800ebcc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	617b      	str	r3, [r7, #20]
 800eb6e:	e002      	b.n	800eb76 <get_ldnumber+0x24>
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	3301      	adds	r3, #1
 800eb74:	617b      	str	r3, [r7, #20]
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	2b1f      	cmp	r3, #31
 800eb7c:	d903      	bls.n	800eb86 <get_ldnumber+0x34>
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	2b3a      	cmp	r3, #58	; 0x3a
 800eb84:	d1f4      	bne.n	800eb70 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	781b      	ldrb	r3, [r3, #0]
 800eb8a:	2b3a      	cmp	r3, #58	; 0x3a
 800eb8c:	d11c      	bne.n	800ebc8 <get_ldnumber+0x76>
			tp = *path;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	1c5a      	adds	r2, r3, #1
 800eb98:	60fa      	str	r2, [r7, #12]
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	3b30      	subs	r3, #48	; 0x30
 800eb9e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	2b09      	cmp	r3, #9
 800eba4:	d80e      	bhi.n	800ebc4 <get_ldnumber+0x72>
 800eba6:	68fa      	ldr	r2, [r7, #12]
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d10a      	bne.n	800ebc4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d107      	bne.n	800ebc4 <get_ldnumber+0x72>
					vol = (int)i;
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	3301      	adds	r3, #1
 800ebbc:	617b      	str	r3, [r7, #20]
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	697a      	ldr	r2, [r7, #20]
 800ebc2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	e002      	b.n	800ebce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ebc8:	2300      	movs	r3, #0
 800ebca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ebcc:	693b      	ldr	r3, [r7, #16]
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	371c      	adds	r7, #28
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd8:	4770      	bx	lr
	...

0800ebdc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	70da      	strb	r2, [r3, #3]
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f04f 32ff 	mov.w	r2, #4294967295
 800ebf2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ebf4:	6839      	ldr	r1, [r7, #0]
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f7fe fcfc 	bl	800d5f4 <move_window>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d001      	beq.n	800ec06 <check_fs+0x2a>
 800ec02:	2304      	movs	r3, #4
 800ec04:	e038      	b.n	800ec78 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	3334      	adds	r3, #52	; 0x34
 800ec0a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fe fa40 	bl	800d094 <ld_word>
 800ec14:	4603      	mov	r3, r0
 800ec16:	461a      	mov	r2, r3
 800ec18:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d001      	beq.n	800ec24 <check_fs+0x48>
 800ec20:	2303      	movs	r3, #3
 800ec22:	e029      	b.n	800ec78 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ec2a:	2be9      	cmp	r3, #233	; 0xe9
 800ec2c:	d009      	beq.n	800ec42 <check_fs+0x66>
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ec34:	2beb      	cmp	r3, #235	; 0xeb
 800ec36:	d11e      	bne.n	800ec76 <check_fs+0x9a>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ec3e:	2b90      	cmp	r3, #144	; 0x90
 800ec40:	d119      	bne.n	800ec76 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	3334      	adds	r3, #52	; 0x34
 800ec46:	3336      	adds	r3, #54	; 0x36
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7fe fa3b 	bl	800d0c4 <ld_dword>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ec54:	4a0a      	ldr	r2, [pc, #40]	; (800ec80 <check_fs+0xa4>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d101      	bne.n	800ec5e <check_fs+0x82>
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	e00c      	b.n	800ec78 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	3334      	adds	r3, #52	; 0x34
 800ec62:	3352      	adds	r3, #82	; 0x52
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7fe fa2d 	bl	800d0c4 <ld_dword>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	4a05      	ldr	r2, [pc, #20]	; (800ec84 <check_fs+0xa8>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d101      	bne.n	800ec76 <check_fs+0x9a>
 800ec72:	2300      	movs	r3, #0
 800ec74:	e000      	b.n	800ec78 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ec76:	2302      	movs	r3, #2
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3708      	adds	r7, #8
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}
 800ec80:	00544146 	.word	0x00544146
 800ec84:	33544146 	.word	0x33544146

0800ec88 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b096      	sub	sp, #88	; 0x58
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	60f8      	str	r0, [r7, #12]
 800ec90:	60b9      	str	r1, [r7, #8]
 800ec92:	4613      	mov	r3, r2
 800ec94:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ec9c:	68f8      	ldr	r0, [r7, #12]
 800ec9e:	f7ff ff58 	bl	800eb52 <get_ldnumber>
 800eca2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800eca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	da01      	bge.n	800ecae <find_volume+0x26>
 800ecaa:	230b      	movs	r3, #11
 800ecac:	e22d      	b.n	800f10a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ecae:	4aa1      	ldr	r2, [pc, #644]	; (800ef34 <find_volume+0x2ac>)
 800ecb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecb6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ecb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d101      	bne.n	800ecc2 <find_volume+0x3a>
 800ecbe:	230c      	movs	r3, #12
 800ecc0:	e223      	b.n	800f10a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecc6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ecc8:	79fb      	ldrb	r3, [r7, #7]
 800ecca:	f023 0301 	bic.w	r3, r3, #1
 800ecce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ecd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d01a      	beq.n	800ed0e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ecd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecda:	785b      	ldrb	r3, [r3, #1]
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f7fe f93b 	bl	800cf58 <disk_status>
 800ece2:	4603      	mov	r3, r0
 800ece4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ece8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ecec:	f003 0301 	and.w	r3, r3, #1
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d10c      	bne.n	800ed0e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ecf4:	79fb      	ldrb	r3, [r7, #7]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d007      	beq.n	800ed0a <find_volume+0x82>
 800ecfa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ecfe:	f003 0304 	and.w	r3, r3, #4
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d001      	beq.n	800ed0a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ed06:	230a      	movs	r3, #10
 800ed08:	e1ff      	b.n	800f10a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	e1fd      	b.n	800f10a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ed0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed10:	2200      	movs	r2, #0
 800ed12:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ed14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed16:	b2da      	uxtb	r2, r3
 800ed18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed1a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ed1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed1e:	785b      	ldrb	r3, [r3, #1]
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7fe f933 	bl	800cf8c <disk_initialize>
 800ed26:	4603      	mov	r3, r0
 800ed28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ed2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed30:	f003 0301 	and.w	r3, r3, #1
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d001      	beq.n	800ed3c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ed38:	2303      	movs	r3, #3
 800ed3a:	e1e6      	b.n	800f10a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ed3c:	79fb      	ldrb	r3, [r7, #7]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d007      	beq.n	800ed52 <find_volume+0xca>
 800ed42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed46:	f003 0304 	and.w	r3, r3, #4
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d001      	beq.n	800ed52 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ed4e:	230a      	movs	r3, #10
 800ed50:	e1db      	b.n	800f10a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ed52:	2300      	movs	r3, #0
 800ed54:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ed56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ed58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed5a:	f7ff ff3f 	bl	800ebdc <check_fs>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ed64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ed68:	2b02      	cmp	r3, #2
 800ed6a:	d149      	bne.n	800ee00 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	643b      	str	r3, [r7, #64]	; 0x40
 800ed70:	e01e      	b.n	800edb0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ed72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed74:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ed78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed7a:	011b      	lsls	r3, r3, #4
 800ed7c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ed80:	4413      	add	r3, r2
 800ed82:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ed84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed86:	3304      	adds	r3, #4
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d006      	beq.n	800ed9c <find_volume+0x114>
 800ed8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed90:	3308      	adds	r3, #8
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7fe f996 	bl	800d0c4 <ld_dword>
 800ed98:	4602      	mov	r2, r0
 800ed9a:	e000      	b.n	800ed9e <find_volume+0x116>
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eda0:	009b      	lsls	r3, r3, #2
 800eda2:	3358      	adds	r3, #88	; 0x58
 800eda4:	443b      	add	r3, r7
 800eda6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800edaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edac:	3301      	adds	r3, #1
 800edae:	643b      	str	r3, [r7, #64]	; 0x40
 800edb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edb2:	2b03      	cmp	r3, #3
 800edb4:	d9dd      	bls.n	800ed72 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800edb6:	2300      	movs	r3, #0
 800edb8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800edba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d002      	beq.n	800edc6 <find_volume+0x13e>
 800edc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edc2:	3b01      	subs	r3, #1
 800edc4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800edc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edc8:	009b      	lsls	r3, r3, #2
 800edca:	3358      	adds	r3, #88	; 0x58
 800edcc:	443b      	add	r3, r7
 800edce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800edd2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800edd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d005      	beq.n	800ede6 <find_volume+0x15e>
 800edda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eddc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800edde:	f7ff fefd 	bl	800ebdc <check_fs>
 800ede2:	4603      	mov	r3, r0
 800ede4:	e000      	b.n	800ede8 <find_volume+0x160>
 800ede6:	2303      	movs	r3, #3
 800ede8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800edec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800edf0:	2b01      	cmp	r3, #1
 800edf2:	d905      	bls.n	800ee00 <find_volume+0x178>
 800edf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edf6:	3301      	adds	r3, #1
 800edf8:	643b      	str	r3, [r7, #64]	; 0x40
 800edfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edfc:	2b03      	cmp	r3, #3
 800edfe:	d9e2      	bls.n	800edc6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ee00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee04:	2b04      	cmp	r3, #4
 800ee06:	d101      	bne.n	800ee0c <find_volume+0x184>
 800ee08:	2301      	movs	r3, #1
 800ee0a:	e17e      	b.n	800f10a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ee0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee10:	2b01      	cmp	r3, #1
 800ee12:	d901      	bls.n	800ee18 <find_volume+0x190>
 800ee14:	230d      	movs	r3, #13
 800ee16:	e178      	b.n	800f10a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ee18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee1a:	3334      	adds	r3, #52	; 0x34
 800ee1c:	330b      	adds	r3, #11
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7fe f938 	bl	800d094 <ld_word>
 800ee24:	4603      	mov	r3, r0
 800ee26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee2a:	d001      	beq.n	800ee30 <find_volume+0x1a8>
 800ee2c:	230d      	movs	r3, #13
 800ee2e:	e16c      	b.n	800f10a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ee30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee32:	3334      	adds	r3, #52	; 0x34
 800ee34:	3316      	adds	r3, #22
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fe f92c 	bl	800d094 <ld_word>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ee40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d106      	bne.n	800ee54 <find_volume+0x1cc>
 800ee46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee48:	3334      	adds	r3, #52	; 0x34
 800ee4a:	3324      	adds	r3, #36	; 0x24
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f7fe f939 	bl	800d0c4 <ld_dword>
 800ee52:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ee54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee58:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ee5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ee60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee62:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ee64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee66:	789b      	ldrb	r3, [r3, #2]
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d005      	beq.n	800ee78 <find_volume+0x1f0>
 800ee6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6e:	789b      	ldrb	r3, [r3, #2]
 800ee70:	2b02      	cmp	r3, #2
 800ee72:	d001      	beq.n	800ee78 <find_volume+0x1f0>
 800ee74:	230d      	movs	r3, #13
 800ee76:	e148      	b.n	800f10a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ee78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee7a:	789b      	ldrb	r3, [r3, #2]
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee80:	fb02 f303 	mul.w	r3, r2, r3
 800ee84:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ee86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ee8c:	b29a      	uxth	r2, r3
 800ee8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee90:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ee92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee94:	895b      	ldrh	r3, [r3, #10]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d008      	beq.n	800eeac <find_volume+0x224>
 800ee9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee9c:	895b      	ldrh	r3, [r3, #10]
 800ee9e:	461a      	mov	r2, r3
 800eea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea2:	895b      	ldrh	r3, [r3, #10]
 800eea4:	3b01      	subs	r3, #1
 800eea6:	4013      	ands	r3, r2
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d001      	beq.n	800eeb0 <find_volume+0x228>
 800eeac:	230d      	movs	r3, #13
 800eeae:	e12c      	b.n	800f10a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800eeb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb2:	3334      	adds	r3, #52	; 0x34
 800eeb4:	3311      	adds	r3, #17
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7fe f8ec 	bl	800d094 <ld_word>
 800eebc:	4603      	mov	r3, r0
 800eebe:	461a      	mov	r2, r3
 800eec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800eec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec6:	891b      	ldrh	r3, [r3, #8]
 800eec8:	f003 030f 	and.w	r3, r3, #15
 800eecc:	b29b      	uxth	r3, r3
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d001      	beq.n	800eed6 <find_volume+0x24e>
 800eed2:	230d      	movs	r3, #13
 800eed4:	e119      	b.n	800f10a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800eed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed8:	3334      	adds	r3, #52	; 0x34
 800eeda:	3313      	adds	r3, #19
 800eedc:	4618      	mov	r0, r3
 800eede:	f7fe f8d9 	bl	800d094 <ld_word>
 800eee2:	4603      	mov	r3, r0
 800eee4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800eee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d106      	bne.n	800eefa <find_volume+0x272>
 800eeec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeee:	3334      	adds	r3, #52	; 0x34
 800eef0:	3320      	adds	r3, #32
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7fe f8e6 	bl	800d0c4 <ld_dword>
 800eef8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800eefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eefc:	3334      	adds	r3, #52	; 0x34
 800eefe:	330e      	adds	r3, #14
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7fe f8c7 	bl	800d094 <ld_word>
 800ef06:	4603      	mov	r3, r0
 800ef08:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ef0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d101      	bne.n	800ef14 <find_volume+0x28c>
 800ef10:	230d      	movs	r3, #13
 800ef12:	e0fa      	b.n	800f10a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ef14:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ef16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef18:	4413      	add	r3, r2
 800ef1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef1c:	8912      	ldrh	r2, [r2, #8]
 800ef1e:	0912      	lsrs	r2, r2, #4
 800ef20:	b292      	uxth	r2, r2
 800ef22:	4413      	add	r3, r2
 800ef24:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ef26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d204      	bcs.n	800ef38 <find_volume+0x2b0>
 800ef2e:	230d      	movs	r3, #13
 800ef30:	e0eb      	b.n	800f10a <find_volume+0x482>
 800ef32:	bf00      	nop
 800ef34:	2001fbec 	.word	0x2001fbec
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ef38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef3c:	1ad3      	subs	r3, r2, r3
 800ef3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef40:	8952      	ldrh	r2, [r2, #10]
 800ef42:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef46:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ef48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d101      	bne.n	800ef52 <find_volume+0x2ca>
 800ef4e:	230d      	movs	r3, #13
 800ef50:	e0db      	b.n	800f10a <find_volume+0x482>
		fmt = FS_FAT32;
 800ef52:	2303      	movs	r3, #3
 800ef54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ef58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d802      	bhi.n	800ef68 <find_volume+0x2e0>
 800ef62:	2302      	movs	r3, #2
 800ef64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ef68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d802      	bhi.n	800ef78 <find_volume+0x2f0>
 800ef72:	2301      	movs	r3, #1
 800ef74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ef78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7a:	1c9a      	adds	r2, r3, #2
 800ef7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef7e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ef80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ef84:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ef86:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ef88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef8a:	441a      	add	r2, r3
 800ef8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef8e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ef90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ef92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef94:	441a      	add	r2, r3
 800ef96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef98:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ef9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef9e:	2b03      	cmp	r3, #3
 800efa0:	d11e      	bne.n	800efe0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800efa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa4:	3334      	adds	r3, #52	; 0x34
 800efa6:	332a      	adds	r3, #42	; 0x2a
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7fe f873 	bl	800d094 <ld_word>
 800efae:	4603      	mov	r3, r0
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d001      	beq.n	800efb8 <find_volume+0x330>
 800efb4:	230d      	movs	r3, #13
 800efb6:	e0a8      	b.n	800f10a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800efb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efba:	891b      	ldrh	r3, [r3, #8]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d001      	beq.n	800efc4 <find_volume+0x33c>
 800efc0:	230d      	movs	r3, #13
 800efc2:	e0a2      	b.n	800f10a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800efc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc6:	3334      	adds	r3, #52	; 0x34
 800efc8:	332c      	adds	r3, #44	; 0x2c
 800efca:	4618      	mov	r0, r3
 800efcc:	f7fe f87a 	bl	800d0c4 <ld_dword>
 800efd0:	4602      	mov	r2, r0
 800efd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800efd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd8:	699b      	ldr	r3, [r3, #24]
 800efda:	009b      	lsls	r3, r3, #2
 800efdc:	647b      	str	r3, [r7, #68]	; 0x44
 800efde:	e01f      	b.n	800f020 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800efe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe2:	891b      	ldrh	r3, [r3, #8]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d101      	bne.n	800efec <find_volume+0x364>
 800efe8:	230d      	movs	r3, #13
 800efea:	e08e      	b.n	800f10a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800efec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eff2:	441a      	add	r2, r3
 800eff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eff8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800effc:	2b02      	cmp	r3, #2
 800effe:	d103      	bne.n	800f008 <find_volume+0x380>
 800f000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f002:	699b      	ldr	r3, [r3, #24]
 800f004:	005b      	lsls	r3, r3, #1
 800f006:	e00a      	b.n	800f01e <find_volume+0x396>
 800f008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00a:	699a      	ldr	r2, [r3, #24]
 800f00c:	4613      	mov	r3, r2
 800f00e:	005b      	lsls	r3, r3, #1
 800f010:	4413      	add	r3, r2
 800f012:	085a      	lsrs	r2, r3, #1
 800f014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f016:	699b      	ldr	r3, [r3, #24]
 800f018:	f003 0301 	and.w	r3, r3, #1
 800f01c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f01e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f022:	69da      	ldr	r2, [r3, #28]
 800f024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f026:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f02a:	0a5b      	lsrs	r3, r3, #9
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d201      	bcs.n	800f034 <find_volume+0x3ac>
 800f030:	230d      	movs	r3, #13
 800f032:	e06a      	b.n	800f10a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f036:	f04f 32ff 	mov.w	r2, #4294967295
 800f03a:	615a      	str	r2, [r3, #20]
 800f03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03e:	695a      	ldr	r2, [r3, #20]
 800f040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f042:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f046:	2280      	movs	r2, #128	; 0x80
 800f048:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f04a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f04e:	2b03      	cmp	r3, #3
 800f050:	d149      	bne.n	800f0e6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f054:	3334      	adds	r3, #52	; 0x34
 800f056:	3330      	adds	r3, #48	; 0x30
 800f058:	4618      	mov	r0, r3
 800f05a:	f7fe f81b 	bl	800d094 <ld_word>
 800f05e:	4603      	mov	r3, r0
 800f060:	2b01      	cmp	r3, #1
 800f062:	d140      	bne.n	800f0e6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f066:	3301      	adds	r3, #1
 800f068:	4619      	mov	r1, r3
 800f06a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f06c:	f7fe fac2 	bl	800d5f4 <move_window>
 800f070:	4603      	mov	r3, r0
 800f072:	2b00      	cmp	r3, #0
 800f074:	d137      	bne.n	800f0e6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f078:	2200      	movs	r2, #0
 800f07a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f07e:	3334      	adds	r3, #52	; 0x34
 800f080:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f084:	4618      	mov	r0, r3
 800f086:	f7fe f805 	bl	800d094 <ld_word>
 800f08a:	4603      	mov	r3, r0
 800f08c:	461a      	mov	r2, r3
 800f08e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f092:	429a      	cmp	r2, r3
 800f094:	d127      	bne.n	800f0e6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f098:	3334      	adds	r3, #52	; 0x34
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7fe f812 	bl	800d0c4 <ld_dword>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	4a1c      	ldr	r2, [pc, #112]	; (800f114 <find_volume+0x48c>)
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	d11e      	bne.n	800f0e6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0aa:	3334      	adds	r3, #52	; 0x34
 800f0ac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7fe f807 	bl	800d0c4 <ld_dword>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	4a17      	ldr	r2, [pc, #92]	; (800f118 <find_volume+0x490>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d113      	bne.n	800f0e6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c0:	3334      	adds	r3, #52	; 0x34
 800f0c2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7fd fffc 	bl	800d0c4 <ld_dword>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d4:	3334      	adds	r3, #52	; 0x34
 800f0d6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7fd fff2 	bl	800d0c4 <ld_dword>
 800f0e0:	4602      	mov	r2, r0
 800f0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f0ec:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f0ee:	4b0b      	ldr	r3, [pc, #44]	; (800f11c <find_volume+0x494>)
 800f0f0:	881b      	ldrh	r3, [r3, #0]
 800f0f2:	3301      	adds	r3, #1
 800f0f4:	b29a      	uxth	r2, r3
 800f0f6:	4b09      	ldr	r3, [pc, #36]	; (800f11c <find_volume+0x494>)
 800f0f8:	801a      	strh	r2, [r3, #0]
 800f0fa:	4b08      	ldr	r3, [pc, #32]	; (800f11c <find_volume+0x494>)
 800f0fc:	881a      	ldrh	r2, [r3, #0]
 800f0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f100:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f102:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f104:	f7fe fa0e 	bl	800d524 <clear_lock>
#endif
	return FR_OK;
 800f108:	2300      	movs	r3, #0
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3758      	adds	r7, #88	; 0x58
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	41615252 	.word	0x41615252
 800f118:	61417272 	.word	0x61417272
 800f11c:	2001fbf0 	.word	0x2001fbf0

0800f120 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b084      	sub	sp, #16
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f12a:	2309      	movs	r3, #9
 800f12c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d01c      	beq.n	800f16e <validate+0x4e>
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d018      	beq.n	800f16e <validate+0x4e>
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d013      	beq.n	800f16e <validate+0x4e>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	889a      	ldrh	r2, [r3, #4]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	88db      	ldrh	r3, [r3, #6]
 800f150:	429a      	cmp	r2, r3
 800f152:	d10c      	bne.n	800f16e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	785b      	ldrb	r3, [r3, #1]
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7fd fefc 	bl	800cf58 <disk_status>
 800f160:	4603      	mov	r3, r0
 800f162:	f003 0301 	and.w	r3, r3, #1
 800f166:	2b00      	cmp	r3, #0
 800f168:	d101      	bne.n	800f16e <validate+0x4e>
			res = FR_OK;
 800f16a:	2300      	movs	r3, #0
 800f16c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f16e:	7bfb      	ldrb	r3, [r7, #15]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d102      	bne.n	800f17a <validate+0x5a>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	e000      	b.n	800f17c <validate+0x5c>
 800f17a:	2300      	movs	r3, #0
 800f17c:	683a      	ldr	r2, [r7, #0]
 800f17e:	6013      	str	r3, [r2, #0]
	return res;
 800f180:	7bfb      	ldrb	r3, [r7, #15]
}
 800f182:	4618      	mov	r0, r3
 800f184:	3710      	adds	r7, #16
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
	...

0800f18c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b088      	sub	sp, #32
 800f190:	af00      	add	r7, sp, #0
 800f192:	60f8      	str	r0, [r7, #12]
 800f194:	60b9      	str	r1, [r7, #8]
 800f196:	4613      	mov	r3, r2
 800f198:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f19e:	f107 0310 	add.w	r3, r7, #16
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7ff fcd5 	bl	800eb52 <get_ldnumber>
 800f1a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f1aa:	69fb      	ldr	r3, [r7, #28]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	da01      	bge.n	800f1b4 <f_mount+0x28>
 800f1b0:	230b      	movs	r3, #11
 800f1b2:	e02b      	b.n	800f20c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f1b4:	4a17      	ldr	r2, [pc, #92]	; (800f214 <f_mount+0x88>)
 800f1b6:	69fb      	ldr	r3, [r7, #28]
 800f1b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f1be:	69bb      	ldr	r3, [r7, #24]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d005      	beq.n	800f1d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f1c4:	69b8      	ldr	r0, [r7, #24]
 800f1c6:	f7fe f9ad 	bl	800d524 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f1ca:	69bb      	ldr	r3, [r7, #24]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d002      	beq.n	800f1dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f1dc:	68fa      	ldr	r2, [r7, #12]
 800f1de:	490d      	ldr	r1, [pc, #52]	; (800f214 <f_mount+0x88>)
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d002      	beq.n	800f1f2 <f_mount+0x66>
 800f1ec:	79fb      	ldrb	r3, [r7, #7]
 800f1ee:	2b01      	cmp	r3, #1
 800f1f0:	d001      	beq.n	800f1f6 <f_mount+0x6a>
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	e00a      	b.n	800f20c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f1f6:	f107 010c 	add.w	r1, r7, #12
 800f1fa:	f107 0308 	add.w	r3, r7, #8
 800f1fe:	2200      	movs	r2, #0
 800f200:	4618      	mov	r0, r3
 800f202:	f7ff fd41 	bl	800ec88 <find_volume>
 800f206:	4603      	mov	r3, r0
 800f208:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f20a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3720      	adds	r7, #32
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}
 800f214:	2001fbec 	.word	0x2001fbec

0800f218 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b09a      	sub	sp, #104	; 0x68
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	4613      	mov	r3, r2
 800f224:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d101      	bne.n	800f230 <f_open+0x18>
 800f22c:	2309      	movs	r3, #9
 800f22e:	e1bd      	b.n	800f5ac <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f230:	79fb      	ldrb	r3, [r7, #7]
 800f232:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f236:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f238:	79fa      	ldrb	r2, [r7, #7]
 800f23a:	f107 0110 	add.w	r1, r7, #16
 800f23e:	f107 0308 	add.w	r3, r7, #8
 800f242:	4618      	mov	r0, r3
 800f244:	f7ff fd20 	bl	800ec88 <find_volume>
 800f248:	4603      	mov	r3, r0
 800f24a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f24e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f252:	2b00      	cmp	r3, #0
 800f254:	f040 81a1 	bne.w	800f59a <f_open+0x382>
		dj.obj.fs = fs;
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800f25c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f260:	f001 f84d 	bl	80102fe <ff_memalloc>
 800f264:	65b8      	str	r0, [r7, #88]	; 0x58
 800f266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d101      	bne.n	800f270 <f_open+0x58>
 800f26c:	2311      	movs	r3, #17
 800f26e:	e19d      	b.n	800f5ac <f_open+0x394>
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f274:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f276:	68ba      	ldr	r2, [r7, #8]
 800f278:	f107 0314 	add.w	r3, r7, #20
 800f27c:	4611      	mov	r1, r2
 800f27e:	4618      	mov	r0, r3
 800f280:	f7ff fbf6 	bl	800ea70 <follow_path>
 800f284:	4603      	mov	r3, r0
 800f286:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f28a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d11a      	bne.n	800f2c8 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f292:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f296:	b25b      	sxtb	r3, r3
 800f298:	2b00      	cmp	r3, #0
 800f29a:	da03      	bge.n	800f2a4 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800f29c:	2306      	movs	r3, #6
 800f29e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f2a2:	e011      	b.n	800f2c8 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f2a4:	79fb      	ldrb	r3, [r7, #7]
 800f2a6:	f023 0301 	bic.w	r3, r3, #1
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	bf14      	ite	ne
 800f2ae:	2301      	movne	r3, #1
 800f2b0:	2300      	moveq	r3, #0
 800f2b2:	b2db      	uxtb	r3, r3
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	f107 0314 	add.w	r3, r7, #20
 800f2ba:	4611      	mov	r1, r2
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7fd ffe9 	bl	800d294 <chk_lock>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f2c8:	79fb      	ldrb	r3, [r7, #7]
 800f2ca:	f003 031c 	and.w	r3, r3, #28
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d07f      	beq.n	800f3d2 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 800f2d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d017      	beq.n	800f30a <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f2da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f2de:	2b04      	cmp	r3, #4
 800f2e0:	d10e      	bne.n	800f300 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f2e2:	f7fe f833 	bl	800d34c <enq_lock>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d006      	beq.n	800f2fa <f_open+0xe2>
 800f2ec:	f107 0314 	add.w	r3, r7, #20
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7ff f90d 	bl	800e510 <dir_register>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	e000      	b.n	800f2fc <f_open+0xe4>
 800f2fa:	2312      	movs	r3, #18
 800f2fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f300:	79fb      	ldrb	r3, [r7, #7]
 800f302:	f043 0308 	orr.w	r3, r3, #8
 800f306:	71fb      	strb	r3, [r7, #7]
 800f308:	e010      	b.n	800f32c <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f30a:	7ebb      	ldrb	r3, [r7, #26]
 800f30c:	f003 0311 	and.w	r3, r3, #17
 800f310:	2b00      	cmp	r3, #0
 800f312:	d003      	beq.n	800f31c <f_open+0x104>
					res = FR_DENIED;
 800f314:	2307      	movs	r3, #7
 800f316:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f31a:	e007      	b.n	800f32c <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f31c:	79fb      	ldrb	r3, [r7, #7]
 800f31e:	f003 0304 	and.w	r3, r3, #4
 800f322:	2b00      	cmp	r3, #0
 800f324:	d002      	beq.n	800f32c <f_open+0x114>
 800f326:	2308      	movs	r3, #8
 800f328:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f32c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f330:	2b00      	cmp	r3, #0
 800f332:	d168      	bne.n	800f406 <f_open+0x1ee>
 800f334:	79fb      	ldrb	r3, [r7, #7]
 800f336:	f003 0308 	and.w	r3, r3, #8
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d063      	beq.n	800f406 <f_open+0x1ee>
				dw = GET_FATTIME();
 800f33e:	f7fd fde5 	bl	800cf0c <get_fattime>
 800f342:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f346:	330e      	adds	r3, #14
 800f348:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f34a:	4618      	mov	r0, r3
 800f34c:	f7fd fef8 	bl	800d140 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f352:	3316      	adds	r3, #22
 800f354:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f356:	4618      	mov	r0, r3
 800f358:	f7fd fef2 	bl	800d140 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f35e:	330b      	adds	r3, #11
 800f360:	2220      	movs	r2, #32
 800f362:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f368:	4611      	mov	r1, r2
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7fe fe49 	bl	800e002 <ld_clust>
 800f370:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f376:	2200      	movs	r2, #0
 800f378:	4618      	mov	r0, r3
 800f37a:	f7fe fe61 	bl	800e040 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f380:	331c      	adds	r3, #28
 800f382:	2100      	movs	r1, #0
 800f384:	4618      	mov	r0, r3
 800f386:	f7fd fedb 	bl	800d140 <st_dword>
					fs->wflag = 1;
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	2201      	movs	r2, #1
 800f38e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f392:	2b00      	cmp	r3, #0
 800f394:	d037      	beq.n	800f406 <f_open+0x1ee>
						dw = fs->winsect;
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f39a:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800f39c:	f107 0314 	add.w	r3, r7, #20
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7fe fb74 	bl	800da92 <remove_chain>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f3b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d126      	bne.n	800f406 <f_open+0x1ee>
							res = move_window(fs, dw);
 800f3b8:	693b      	ldr	r3, [r7, #16]
 800f3ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f7fe f919 	bl	800d5f4 <move_window>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f3c8:	693b      	ldr	r3, [r7, #16]
 800f3ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f3cc:	3a01      	subs	r2, #1
 800f3ce:	611a      	str	r2, [r3, #16]
 800f3d0:	e019      	b.n	800f406 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f3d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d115      	bne.n	800f406 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f3da:	7ebb      	ldrb	r3, [r7, #26]
 800f3dc:	f003 0310 	and.w	r3, r3, #16
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d003      	beq.n	800f3ec <f_open+0x1d4>
					res = FR_NO_FILE;
 800f3e4:	2304      	movs	r3, #4
 800f3e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f3ea:	e00c      	b.n	800f406 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f3ec:	79fb      	ldrb	r3, [r7, #7]
 800f3ee:	f003 0302 	and.w	r3, r3, #2
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d007      	beq.n	800f406 <f_open+0x1ee>
 800f3f6:	7ebb      	ldrb	r3, [r7, #26]
 800f3f8:	f003 0301 	and.w	r3, r3, #1
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d002      	beq.n	800f406 <f_open+0x1ee>
						res = FR_DENIED;
 800f400:	2307      	movs	r3, #7
 800f402:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f406:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d128      	bne.n	800f460 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f40e:	79fb      	ldrb	r3, [r7, #7]
 800f410:	f003 0308 	and.w	r3, r3, #8
 800f414:	2b00      	cmp	r3, #0
 800f416:	d003      	beq.n	800f420 <f_open+0x208>
				mode |= FA_MODIFIED;
 800f418:	79fb      	ldrb	r3, [r7, #7]
 800f41a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f41e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f42e:	79fb      	ldrb	r3, [r7, #7]
 800f430:	f023 0301 	bic.w	r3, r3, #1
 800f434:	2b00      	cmp	r3, #0
 800f436:	bf14      	ite	ne
 800f438:	2301      	movne	r3, #1
 800f43a:	2300      	moveq	r3, #0
 800f43c:	b2db      	uxtb	r3, r3
 800f43e:	461a      	mov	r2, r3
 800f440:	f107 0314 	add.w	r3, r7, #20
 800f444:	4611      	mov	r1, r2
 800f446:	4618      	mov	r0, r3
 800f448:	f7fd ffa2 	bl	800d390 <inc_lock>
 800f44c:	4602      	mov	r2, r0
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	691b      	ldr	r3, [r3, #16]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d102      	bne.n	800f460 <f_open+0x248>
 800f45a:	2302      	movs	r3, #2
 800f45c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f460:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f464:	2b00      	cmp	r3, #0
 800f466:	f040 8095 	bne.w	800f594 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f46e:	4611      	mov	r1, r2
 800f470:	4618      	mov	r0, r3
 800f472:	f7fe fdc6 	bl	800e002 <ld_clust>
 800f476:	4602      	mov	r2, r0
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f47e:	331c      	adds	r3, #28
 800f480:	4618      	mov	r0, r3
 800f482:	f7fd fe1f 	bl	800d0c4 <ld_dword>
 800f486:	4602      	mov	r2, r0
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	2200      	movs	r2, #0
 800f490:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f492:	693a      	ldr	r2, [r7, #16]
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f498:	693b      	ldr	r3, [r7, #16]
 800f49a:	88da      	ldrh	r2, [r3, #6]
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	79fa      	ldrb	r2, [r7, #7]
 800f4a4:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	3330      	adds	r3, #48	; 0x30
 800f4bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f4c0:	2100      	movs	r1, #0
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7fd fe89 	bl	800d1da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f4c8:	79fb      	ldrb	r3, [r7, #7]
 800f4ca:	f003 0320 	and.w	r3, r3, #32
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d060      	beq.n	800f594 <f_open+0x37c>
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	68db      	ldr	r3, [r3, #12]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d05c      	beq.n	800f594 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	68da      	ldr	r2, [r3, #12]
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	895b      	ldrh	r3, [r3, #10]
 800f4e6:	025b      	lsls	r3, r3, #9
 800f4e8:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	689b      	ldr	r3, [r3, #8]
 800f4ee:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	68db      	ldr	r3, [r3, #12]
 800f4f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f4f6:	e016      	b.n	800f526 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7fe f934 	bl	800d76a <get_fat>
 800f502:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f504:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f506:	2b01      	cmp	r3, #1
 800f508:	d802      	bhi.n	800f510 <f_open+0x2f8>
 800f50a:	2302      	movs	r3, #2
 800f50c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f510:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f516:	d102      	bne.n	800f51e <f_open+0x306>
 800f518:	2301      	movs	r3, #1
 800f51a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f51e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f522:	1ad3      	subs	r3, r2, r3
 800f524:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f526:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d103      	bne.n	800f536 <f_open+0x31e>
 800f52e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f532:	429a      	cmp	r2, r3
 800f534:	d8e0      	bhi.n	800f4f8 <f_open+0x2e0>
				}
				fp->clust = clst;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f53a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f53c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f540:	2b00      	cmp	r3, #0
 800f542:	d127      	bne.n	800f594 <f_open+0x37c>
 800f544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d022      	beq.n	800f594 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f552:	4618      	mov	r0, r3
 800f554:	f7fe f8ea 	bl	800d72c <clust2sect>
 800f558:	64b8      	str	r0, [r7, #72]	; 0x48
 800f55a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d103      	bne.n	800f568 <f_open+0x350>
						res = FR_INT_ERR;
 800f560:	2302      	movs	r3, #2
 800f562:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f566:	e015      	b.n	800f594 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f56a:	0a5a      	lsrs	r2, r3, #9
 800f56c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f56e:	441a      	add	r2, r3
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	7858      	ldrb	r0, [r3, #1]
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	6a1a      	ldr	r2, [r3, #32]
 800f582:	2301      	movs	r3, #1
 800f584:	f7fd fd28 	bl	800cfd8 <disk_read>
 800f588:	4603      	mov	r3, r0
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d002      	beq.n	800f594 <f_open+0x37c>
 800f58e:	2301      	movs	r3, #1
 800f590:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800f594:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f596:	f000 febe 	bl	8010316 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f59a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d002      	beq.n	800f5a8 <f_open+0x390>
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f5a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3768      	adds	r7, #104	; 0x68
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}

0800f5b4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b08c      	sub	sp, #48	; 0x30
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	60f8      	str	r0, [r7, #12]
 800f5bc:	60b9      	str	r1, [r7, #8]
 800f5be:	607a      	str	r2, [r7, #4]
 800f5c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f107 0210 	add.w	r2, r7, #16
 800f5d2:	4611      	mov	r1, r2
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f7ff fda3 	bl	800f120 <validate>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f5e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d107      	bne.n	800f5f8 <f_write+0x44>
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	7d5b      	ldrb	r3, [r3, #21]
 800f5ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f5f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d002      	beq.n	800f5fe <f_write+0x4a>
 800f5f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5fc:	e14b      	b.n	800f896 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	7d1b      	ldrb	r3, [r3, #20]
 800f602:	f003 0302 	and.w	r3, r3, #2
 800f606:	2b00      	cmp	r3, #0
 800f608:	d101      	bne.n	800f60e <f_write+0x5a>
 800f60a:	2307      	movs	r3, #7
 800f60c:	e143      	b.n	800f896 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	699a      	ldr	r2, [r3, #24]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	441a      	add	r2, r3
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	699b      	ldr	r3, [r3, #24]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	f080 812d 	bcs.w	800f87a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	699b      	ldr	r3, [r3, #24]
 800f624:	43db      	mvns	r3, r3
 800f626:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f628:	e127      	b.n	800f87a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	699b      	ldr	r3, [r3, #24]
 800f62e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f632:	2b00      	cmp	r3, #0
 800f634:	f040 80e3 	bne.w	800f7fe <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	699b      	ldr	r3, [r3, #24]
 800f63c:	0a5b      	lsrs	r3, r3, #9
 800f63e:	693a      	ldr	r2, [r7, #16]
 800f640:	8952      	ldrh	r2, [r2, #10]
 800f642:	3a01      	subs	r2, #1
 800f644:	4013      	ands	r3, r2
 800f646:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f648:	69bb      	ldr	r3, [r7, #24]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d143      	bne.n	800f6d6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	699b      	ldr	r3, [r3, #24]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d10c      	bne.n	800f670 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	689b      	ldr	r3, [r3, #8]
 800f65a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d11a      	bne.n	800f698 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	2100      	movs	r1, #0
 800f666:	4618      	mov	r0, r3
 800f668:	f7fe fa78 	bl	800db5c <create_chain>
 800f66c:	62b8      	str	r0, [r7, #40]	; 0x28
 800f66e:	e013      	b.n	800f698 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f674:	2b00      	cmp	r3, #0
 800f676:	d007      	beq.n	800f688 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	699b      	ldr	r3, [r3, #24]
 800f67c:	4619      	mov	r1, r3
 800f67e:	68f8      	ldr	r0, [r7, #12]
 800f680:	f7fe fb04 	bl	800dc8c <clmt_clust>
 800f684:	62b8      	str	r0, [r7, #40]	; 0x28
 800f686:	e007      	b.n	800f698 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f688:	68fa      	ldr	r2, [r7, #12]
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	69db      	ldr	r3, [r3, #28]
 800f68e:	4619      	mov	r1, r3
 800f690:	4610      	mov	r0, r2
 800f692:	f7fe fa63 	bl	800db5c <create_chain>
 800f696:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	f000 80f2 	beq.w	800f884 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a2:	2b01      	cmp	r3, #1
 800f6a4:	d104      	bne.n	800f6b0 <f_write+0xfc>
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2202      	movs	r2, #2
 800f6aa:	755a      	strb	r2, [r3, #21]
 800f6ac:	2302      	movs	r3, #2
 800f6ae:	e0f2      	b.n	800f896 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6b6:	d104      	bne.n	800f6c2 <f_write+0x10e>
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	2201      	movs	r2, #1
 800f6bc:	755a      	strb	r2, [r3, #21]
 800f6be:	2301      	movs	r3, #1
 800f6c0:	e0e9      	b.n	800f896 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6c6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	689b      	ldr	r3, [r3, #8]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d102      	bne.n	800f6d6 <f_write+0x122>
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6d4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	7d1b      	ldrb	r3, [r3, #20]
 800f6da:	b25b      	sxtb	r3, r3
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	da18      	bge.n	800f712 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	7858      	ldrb	r0, [r3, #1]
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	6a1a      	ldr	r2, [r3, #32]
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	f7fd fc92 	bl	800d018 <disk_write>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d004      	beq.n	800f704 <f_write+0x150>
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2201      	movs	r2, #1
 800f6fe:	755a      	strb	r2, [r3, #21]
 800f700:	2301      	movs	r3, #1
 800f702:	e0c8      	b.n	800f896 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	7d1b      	ldrb	r3, [r3, #20]
 800f708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f70c:	b2da      	uxtb	r2, r3
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f712:	693a      	ldr	r2, [r7, #16]
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	69db      	ldr	r3, [r3, #28]
 800f718:	4619      	mov	r1, r3
 800f71a:	4610      	mov	r0, r2
 800f71c:	f7fe f806 	bl	800d72c <clust2sect>
 800f720:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d104      	bne.n	800f732 <f_write+0x17e>
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	2202      	movs	r2, #2
 800f72c:	755a      	strb	r2, [r3, #21]
 800f72e:	2302      	movs	r3, #2
 800f730:	e0b1      	b.n	800f896 <f_write+0x2e2>
			sect += csect;
 800f732:	697a      	ldr	r2, [r7, #20]
 800f734:	69bb      	ldr	r3, [r7, #24]
 800f736:	4413      	add	r3, r2
 800f738:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	0a5b      	lsrs	r3, r3, #9
 800f73e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f740:	6a3b      	ldr	r3, [r7, #32]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d03c      	beq.n	800f7c0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f746:	69ba      	ldr	r2, [r7, #24]
 800f748:	6a3b      	ldr	r3, [r7, #32]
 800f74a:	4413      	add	r3, r2
 800f74c:	693a      	ldr	r2, [r7, #16]
 800f74e:	8952      	ldrh	r2, [r2, #10]
 800f750:	4293      	cmp	r3, r2
 800f752:	d905      	bls.n	800f760 <f_write+0x1ac>
					cc = fs->csize - csect;
 800f754:	693b      	ldr	r3, [r7, #16]
 800f756:	895b      	ldrh	r3, [r3, #10]
 800f758:	461a      	mov	r2, r3
 800f75a:	69bb      	ldr	r3, [r7, #24]
 800f75c:	1ad3      	subs	r3, r2, r3
 800f75e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f760:	693b      	ldr	r3, [r7, #16]
 800f762:	7858      	ldrb	r0, [r3, #1]
 800f764:	6a3b      	ldr	r3, [r7, #32]
 800f766:	697a      	ldr	r2, [r7, #20]
 800f768:	69f9      	ldr	r1, [r7, #28]
 800f76a:	f7fd fc55 	bl	800d018 <disk_write>
 800f76e:	4603      	mov	r3, r0
 800f770:	2b00      	cmp	r3, #0
 800f772:	d004      	beq.n	800f77e <f_write+0x1ca>
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	2201      	movs	r2, #1
 800f778:	755a      	strb	r2, [r3, #21]
 800f77a:	2301      	movs	r3, #1
 800f77c:	e08b      	b.n	800f896 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	6a1a      	ldr	r2, [r3, #32]
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	1ad3      	subs	r3, r2, r3
 800f786:	6a3a      	ldr	r2, [r7, #32]
 800f788:	429a      	cmp	r2, r3
 800f78a:	d915      	bls.n	800f7b8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	6a1a      	ldr	r2, [r3, #32]
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	1ad3      	subs	r3, r2, r3
 800f79a:	025b      	lsls	r3, r3, #9
 800f79c:	69fa      	ldr	r2, [r7, #28]
 800f79e:	4413      	add	r3, r2
 800f7a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	f7fd fcf7 	bl	800d198 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	7d1b      	ldrb	r3, [r3, #20]
 800f7ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7b2:	b2da      	uxtb	r2, r3
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f7b8:	6a3b      	ldr	r3, [r7, #32]
 800f7ba:	025b      	lsls	r3, r3, #9
 800f7bc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f7be:	e03f      	b.n	800f840 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	6a1b      	ldr	r3, [r3, #32]
 800f7c4:	697a      	ldr	r2, [r7, #20]
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d016      	beq.n	800f7f8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	699a      	ldr	r2, [r3, #24]
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d210      	bcs.n	800f7f8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	7858      	ldrb	r0, [r3, #1]
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	697a      	ldr	r2, [r7, #20]
 800f7e4:	f7fd fbf8 	bl	800cfd8 <disk_read>
 800f7e8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d004      	beq.n	800f7f8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	2201      	movs	r2, #1
 800f7f2:	755a      	strb	r2, [r3, #21]
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	e04e      	b.n	800f896 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	697a      	ldr	r2, [r7, #20]
 800f7fc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	699b      	ldr	r3, [r3, #24]
 800f802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f806:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f80a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f80c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	429a      	cmp	r2, r3
 800f812:	d901      	bls.n	800f818 <f_write+0x264>
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	699b      	ldr	r3, [r3, #24]
 800f822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f826:	4413      	add	r3, r2
 800f828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f82a:	69f9      	ldr	r1, [r7, #28]
 800f82c:	4618      	mov	r0, r3
 800f82e:	f7fd fcb3 	bl	800d198 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	7d1b      	ldrb	r3, [r3, #20]
 800f836:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f83a:	b2da      	uxtb	r2, r3
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f840:	69fa      	ldr	r2, [r7, #28]
 800f842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f844:	4413      	add	r3, r2
 800f846:	61fb      	str	r3, [r7, #28]
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	699a      	ldr	r2, [r3, #24]
 800f84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f84e:	441a      	add	r2, r3
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	619a      	str	r2, [r3, #24]
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	68da      	ldr	r2, [r3, #12]
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	699b      	ldr	r3, [r3, #24]
 800f85c:	429a      	cmp	r2, r3
 800f85e:	bf38      	it	cc
 800f860:	461a      	movcc	r2, r3
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	60da      	str	r2, [r3, #12]
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	681a      	ldr	r2, [r3, #0]
 800f86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f86c:	441a      	add	r2, r3
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	601a      	str	r2, [r3, #0]
 800f872:	687a      	ldr	r2, [r7, #4]
 800f874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f876:	1ad3      	subs	r3, r2, r3
 800f878:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	f47f aed4 	bne.w	800f62a <f_write+0x76>
 800f882:	e000      	b.n	800f886 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f884:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	7d1b      	ldrb	r3, [r3, #20]
 800f88a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f88e:	b2da      	uxtb	r2, r3
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f894:	2300      	movs	r3, #0
}
 800f896:	4618      	mov	r0, r3
 800f898:	3730      	adds	r7, #48	; 0x30
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}

0800f89e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f89e:	b580      	push	{r7, lr}
 800f8a0:	b086      	sub	sp, #24
 800f8a2:	af00      	add	r7, sp, #0
 800f8a4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f107 0208 	add.w	r2, r7, #8
 800f8ac:	4611      	mov	r1, r2
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7ff fc36 	bl	800f120 <validate>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f8b8:	7dfb      	ldrb	r3, [r7, #23]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d168      	bne.n	800f990 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	7d1b      	ldrb	r3, [r3, #20]
 800f8c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d062      	beq.n	800f990 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	7d1b      	ldrb	r3, [r3, #20]
 800f8ce:	b25b      	sxtb	r3, r3
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	da15      	bge.n	800f900 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	7858      	ldrb	r0, [r3, #1]
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6a1a      	ldr	r2, [r3, #32]
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	f7fd fb98 	bl	800d018 <disk_write>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d001      	beq.n	800f8f2 <f_sync+0x54>
 800f8ee:	2301      	movs	r3, #1
 800f8f0:	e04f      	b.n	800f992 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	7d1b      	ldrb	r3, [r3, #20]
 800f8f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8fa:	b2da      	uxtb	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f900:	f7fd fb04 	bl	800cf0c <get_fattime>
 800f904:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f906:	68ba      	ldr	r2, [r7, #8]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f90c:	4619      	mov	r1, r3
 800f90e:	4610      	mov	r0, r2
 800f910:	f7fd fe70 	bl	800d5f4 <move_window>
 800f914:	4603      	mov	r3, r0
 800f916:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f918:	7dfb      	ldrb	r3, [r7, #23]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d138      	bne.n	800f990 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f922:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	330b      	adds	r3, #11
 800f928:	781a      	ldrb	r2, [r3, #0]
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	330b      	adds	r3, #11
 800f92e:	f042 0220 	orr.w	r2, r2, #32
 800f932:	b2d2      	uxtb	r2, r2
 800f934:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6818      	ldr	r0, [r3, #0]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	689b      	ldr	r3, [r3, #8]
 800f93e:	461a      	mov	r2, r3
 800f940:	68f9      	ldr	r1, [r7, #12]
 800f942:	f7fe fb7d 	bl	800e040 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	f103 021c 	add.w	r2, r3, #28
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	68db      	ldr	r3, [r3, #12]
 800f950:	4619      	mov	r1, r3
 800f952:	4610      	mov	r0, r2
 800f954:	f7fd fbf4 	bl	800d140 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	3316      	adds	r3, #22
 800f95c:	6939      	ldr	r1, [r7, #16]
 800f95e:	4618      	mov	r0, r3
 800f960:	f7fd fbee 	bl	800d140 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	3312      	adds	r3, #18
 800f968:	2100      	movs	r1, #0
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7fd fbcd 	bl	800d10a <st_word>
					fs->wflag = 1;
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	2201      	movs	r2, #1
 800f974:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	4618      	mov	r0, r3
 800f97a:	f7fd fe69 	bl	800d650 <sync_fs>
 800f97e:	4603      	mov	r3, r0
 800f980:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	7d1b      	ldrb	r3, [r3, #20]
 800f986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f98a:	b2da      	uxtb	r2, r3
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f990:	7dfb      	ldrb	r3, [r7, #23]
}
 800f992:	4618      	mov	r0, r3
 800f994:	3718      	adds	r7, #24
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}

0800f99a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f99a:	b580      	push	{r7, lr}
 800f99c:	b084      	sub	sp, #16
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	f7ff ff7b 	bl	800f89e <f_sync>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f9ac:	7bfb      	ldrb	r3, [r7, #15]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d118      	bne.n	800f9e4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f107 0208 	add.w	r2, r7, #8
 800f9b8:	4611      	mov	r1, r2
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7ff fbb0 	bl	800f120 <validate>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f9c4:	7bfb      	ldrb	r3, [r7, #15]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d10c      	bne.n	800f9e4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	691b      	ldr	r3, [r3, #16]
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7fd fd6c 	bl	800d4ac <dec_lock>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f9d8:	7bfb      	ldrb	r3, [r7, #15]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d102      	bne.n	800f9e4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3710      	adds	r7, #16
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}
	...

0800f9f0 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800f9f0:	b590      	push	{r4, r7, lr}
 800f9f2:	b09d      	sub	sp, #116	; 0x74
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	60f8      	str	r0, [r7, #12]
 800f9f8:	607a      	str	r2, [r7, #4]
 800f9fa:	603b      	str	r3, [r7, #0]
 800f9fc:	460b      	mov	r3, r1
 800f9fe:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800fa00:	2301      	movs	r3, #1
 800fa02:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800fa04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fa08:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800fa0a:	f107 030c 	add.w	r3, r7, #12
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f7ff f89f 	bl	800eb52 <get_ldnumber>
 800fa14:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fa16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	da02      	bge.n	800fa22 <f_mkfs+0x32>
 800fa1c:	230b      	movs	r3, #11
 800fa1e:	f000 bc0d 	b.w	801023c <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800fa22:	4a94      	ldr	r2, [pc, #592]	; (800fc74 <f_mkfs+0x284>)
 800fa24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d005      	beq.n	800fa3a <f_mkfs+0x4a>
 800fa2e:	4a91      	ldr	r2, [pc, #580]	; (800fc74 <f_mkfs+0x284>)
 800fa30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa36:	2200      	movs	r2, #0
 800fa38:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800fa3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa3c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800fa40:	2300      	movs	r3, #0
 800fa42:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800fa46:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7fd fa9e 	bl	800cf8c <disk_initialize>
 800fa50:	4603      	mov	r3, r0
 800fa52:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800fa56:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800fa5a:	f003 0301 	and.w	r3, r3, #1
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d001      	beq.n	800fa66 <f_mkfs+0x76>
 800fa62:	2303      	movs	r3, #3
 800fa64:	e3ea      	b.n	801023c <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800fa66:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800fa6a:	f003 0304 	and.w	r3, r3, #4
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d001      	beq.n	800fa76 <f_mkfs+0x86>
 800fa72:	230a      	movs	r3, #10
 800fa74:	e3e2      	b.n	801023c <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800fa76:	f107 0214 	add.w	r2, r7, #20
 800fa7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fa7e:	2103      	movs	r1, #3
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7fd fae9 	bl	800d058 <disk_ioctl>
 800fa86:	4603      	mov	r3, r0
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d10c      	bne.n	800faa6 <f_mkfs+0xb6>
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d009      	beq.n	800faa6 <f_mkfs+0xb6>
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa98:	d805      	bhi.n	800faa6 <f_mkfs+0xb6>
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	1e5a      	subs	r2, r3, #1
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	4013      	ands	r3, r2
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d001      	beq.n	800faaa <f_mkfs+0xba>
 800faa6:	2301      	movs	r3, #1
 800faa8:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800faaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800faae:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d003      	beq.n	800fabe <f_mkfs+0xce>
 800fab6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fab8:	687a      	ldr	r2, [r7, #4]
 800faba:	429a      	cmp	r2, r3
 800fabc:	d309      	bcc.n	800fad2 <f_mkfs+0xe2>
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fac4:	d805      	bhi.n	800fad2 <f_mkfs+0xe2>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	1e5a      	subs	r2, r3, #1
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	4013      	ands	r3, r2
 800face:	2b00      	cmp	r3, #0
 800fad0:	d001      	beq.n	800fad6 <f_mkfs+0xe6>
 800fad2:	2313      	movs	r3, #19
 800fad4:	e3b2      	b.n	801023c <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800fad6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fad8:	687a      	ldr	r2, [r7, #4]
 800fada:	fbb2 f3f3 	udiv	r3, r2, r3
 800fade:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800fae4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fae6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800faea:	fbb2 f3f3 	udiv	r3, r2, r3
 800faee:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800faf0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800faf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf4:	fb02 f303 	mul.w	r3, r2, r3
 800faf8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800fafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d101      	bne.n	800fb04 <f_mkfs+0x114>
 800fb00:	230e      	movs	r3, #14
 800fb02:	e39b      	b.n	801023c <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800fb04:	f107 0210 	add.w	r2, r7, #16
 800fb08:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fb0c:	2101      	movs	r1, #1
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7fd faa2 	bl	800d058 <disk_ioctl>
 800fb14:	4603      	mov	r3, r0
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d001      	beq.n	800fb1e <f_mkfs+0x12e>
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	e38e      	b.n	801023c <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800fb1e:	7afb      	ldrb	r3, [r7, #11]
 800fb20:	f003 0308 	and.w	r3, r3, #8
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d001      	beq.n	800fb2c <f_mkfs+0x13c>
 800fb28:	2300      	movs	r3, #0
 800fb2a:	e000      	b.n	800fb2e <f_mkfs+0x13e>
 800fb2c:	233f      	movs	r3, #63	; 0x3f
 800fb2e:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d901      	bls.n	800fb3c <f_mkfs+0x14c>
 800fb38:	230e      	movs	r3, #14
 800fb3a:	e37f      	b.n	801023c <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800fb3c:	693a      	ldr	r2, [r7, #16]
 800fb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb40:	1ad3      	subs	r3, r2, r3
 800fb42:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	2b7f      	cmp	r3, #127	; 0x7f
 800fb48:	d801      	bhi.n	800fb4e <f_mkfs+0x15e>
 800fb4a:	230e      	movs	r3, #14
 800fb4c:	e376      	b.n	801023c <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2b80      	cmp	r3, #128	; 0x80
 800fb52:	d901      	bls.n	800fb58 <f_mkfs+0x168>
 800fb54:	2313      	movs	r3, #19
 800fb56:	e371      	b.n	801023c <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800fb58:	7afb      	ldrb	r3, [r7, #11]
 800fb5a:	f003 0302 	and.w	r3, r3, #2
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d00d      	beq.n	800fb7e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800fb62:	7afb      	ldrb	r3, [r7, #11]
 800fb64:	f003 0307 	and.w	r3, r3, #7
 800fb68:	2b02      	cmp	r3, #2
 800fb6a:	d004      	beq.n	800fb76 <f_mkfs+0x186>
 800fb6c:	7afb      	ldrb	r3, [r7, #11]
 800fb6e:	f003 0301 	and.w	r3, r3, #1
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d103      	bne.n	800fb7e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800fb76:	2303      	movs	r3, #3
 800fb78:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800fb7c:	e009      	b.n	800fb92 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800fb7e:	7afb      	ldrb	r3, [r7, #11]
 800fb80:	f003 0301 	and.w	r3, r3, #1
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d101      	bne.n	800fb8c <f_mkfs+0x19c>
 800fb88:	2313      	movs	r3, #19
 800fb8a:	e357      	b.n	801023c <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800fb8c:	2302      	movs	r3, #2
 800fb8e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800fb96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fb9a:	2b03      	cmp	r3, #3
 800fb9c:	d13c      	bne.n	800fc18 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800fb9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d11b      	bne.n	800fbdc <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	0c5b      	lsrs	r3, r3, #17
 800fba8:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800fbaa:	2300      	movs	r3, #0
 800fbac:	64bb      	str	r3, [r7, #72]	; 0x48
 800fbae:	2301      	movs	r3, #1
 800fbb0:	653b      	str	r3, [r7, #80]	; 0x50
 800fbb2:	e005      	b.n	800fbc0 <f_mkfs+0x1d0>
 800fbb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbb6:	3301      	adds	r3, #1
 800fbb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800fbba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbbc:	005b      	lsls	r3, r3, #1
 800fbbe:	653b      	str	r3, [r7, #80]	; 0x50
 800fbc0:	4a2d      	ldr	r2, [pc, #180]	; (800fc78 <f_mkfs+0x288>)
 800fbc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d007      	beq.n	800fbdc <f_mkfs+0x1ec>
 800fbcc:	4a2a      	ldr	r2, [pc, #168]	; (800fc78 <f_mkfs+0x288>)
 800fbce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbd4:	461a      	mov	r2, r3
 800fbd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbd8:	4293      	cmp	r3, r2
 800fbda:	d2eb      	bcs.n	800fbb4 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800fbdc:	693a      	ldr	r2, [r7, #16]
 800fbde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbe0:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbe4:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800fbe6:	6a3b      	ldr	r3, [r7, #32]
 800fbe8:	3302      	adds	r3, #2
 800fbea:	009a      	lsls	r2, r3, #2
 800fbec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fbee:	4413      	add	r3, r2
 800fbf0:	1e5a      	subs	r2, r3, #1
 800fbf2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fbf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbf8:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800fbfa:	2320      	movs	r3, #32
 800fbfc:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800fbfe:	2300      	movs	r3, #0
 800fc00:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800fc02:	6a3b      	ldr	r3, [r7, #32]
 800fc04:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	d903      	bls.n	800fc14 <f_mkfs+0x224>
 800fc0c:	6a3b      	ldr	r3, [r7, #32]
 800fc0e:	4a1b      	ldr	r2, [pc, #108]	; (800fc7c <f_mkfs+0x28c>)
 800fc10:	4293      	cmp	r3, r2
 800fc12:	d952      	bls.n	800fcba <f_mkfs+0x2ca>
 800fc14:	230e      	movs	r3, #14
 800fc16:	e311      	b.n	801023c <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800fc18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d11b      	bne.n	800fc56 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	0b1b      	lsrs	r3, r3, #12
 800fc22:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800fc24:	2300      	movs	r3, #0
 800fc26:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc28:	2301      	movs	r3, #1
 800fc2a:	653b      	str	r3, [r7, #80]	; 0x50
 800fc2c:	e005      	b.n	800fc3a <f_mkfs+0x24a>
 800fc2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc30:	3301      	adds	r3, #1
 800fc32:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc36:	005b      	lsls	r3, r3, #1
 800fc38:	653b      	str	r3, [r7, #80]	; 0x50
 800fc3a:	4a11      	ldr	r2, [pc, #68]	; (800fc80 <f_mkfs+0x290>)
 800fc3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d007      	beq.n	800fc56 <f_mkfs+0x266>
 800fc46:	4a0e      	ldr	r2, [pc, #56]	; (800fc80 <f_mkfs+0x290>)
 800fc48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc4e:	461a      	mov	r2, r3
 800fc50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc52:	4293      	cmp	r3, r2
 800fc54:	d2eb      	bcs.n	800fc2e <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800fc56:	693a      	ldr	r2, [r7, #16]
 800fc58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc5e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800fc60:	6a3b      	ldr	r3, [r7, #32]
 800fc62:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fc66:	4293      	cmp	r3, r2
 800fc68:	d90c      	bls.n	800fc84 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800fc6a:	6a3b      	ldr	r3, [r7, #32]
 800fc6c:	3302      	adds	r3, #2
 800fc6e:	005b      	lsls	r3, r3, #1
 800fc70:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc72:	e012      	b.n	800fc9a <f_mkfs+0x2aa>
 800fc74:	2001fbec 	.word	0x2001fbec
 800fc78:	0801208c 	.word	0x0801208c
 800fc7c:	0ffffff5 	.word	0x0ffffff5
 800fc80:	0801209c 	.word	0x0801209c
				} else {
					fmt = FS_FAT12;
 800fc84:	2301      	movs	r3, #1
 800fc86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800fc8a:	6a3a      	ldr	r2, [r7, #32]
 800fc8c:	4613      	mov	r3, r2
 800fc8e:	005b      	lsls	r3, r3, #1
 800fc90:	4413      	add	r3, r2
 800fc92:	3301      	adds	r3, #1
 800fc94:	085b      	lsrs	r3, r3, #1
 800fc96:	3303      	adds	r3, #3
 800fc98:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800fc9a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fc9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc9e:	4413      	add	r3, r2
 800fca0:	1e5a      	subs	r2, r3, #1
 800fca2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fca4:	fbb2 f3f3 	udiv	r3, r2, r3
 800fca8:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800fcaa:	2301      	movs	r3, #1
 800fcac:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800fcae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcb0:	015a      	lsls	r2, r3, #5
 800fcb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fcb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800fcb8:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800fcba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcbe:	4413      	add	r3, r2
 800fcc0:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800fcc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fcc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fcc6:	fb03 f202 	mul.w	r2, r3, r2
 800fcca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fccc:	4413      	add	r3, r2
 800fcce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fcd0:	4413      	add	r3, r2
 800fcd2:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800fcd4:	697a      	ldr	r2, [r7, #20]
 800fcd6:	69fb      	ldr	r3, [r7, #28]
 800fcd8:	4413      	add	r3, r2
 800fcda:	1e5a      	subs	r2, r3, #1
 800fcdc:	697b      	ldr	r3, [r7, #20]
 800fcde:	425b      	negs	r3, r3
 800fce0:	401a      	ands	r2, r3
 800fce2:	69fb      	ldr	r3, [r7, #28]
 800fce4:	1ad3      	subs	r3, r2, r3
 800fce6:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800fce8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fcec:	2b03      	cmp	r3, #3
 800fcee:	d108      	bne.n	800fd02 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800fcf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fcf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcf4:	4413      	add	r3, r2
 800fcf6:	657b      	str	r3, [r7, #84]	; 0x54
 800fcf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fcfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcfc:	4413      	add	r3, r2
 800fcfe:	65bb      	str	r3, [r7, #88]	; 0x58
 800fd00:	e006      	b.n	800fd10 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800fd02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd06:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fd0c:	4413      	add	r3, r2
 800fd0e:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800fd10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd12:	011a      	lsls	r2, r3, #4
 800fd14:	69fb      	ldr	r3, [r7, #28]
 800fd16:	441a      	add	r2, r3
 800fd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1a:	1ad2      	subs	r2, r2, r3
 800fd1c:	693b      	ldr	r3, [r7, #16]
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d901      	bls.n	800fd26 <f_mkfs+0x336>
 800fd22:	230e      	movs	r3, #14
 800fd24:	e28a      	b.n	801023c <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800fd26:	693a      	ldr	r2, [r7, #16]
 800fd28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd2a:	1ad2      	subs	r2, r2, r3
 800fd2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd30:	fb01 f303 	mul.w	r3, r1, r3
 800fd34:	1ad2      	subs	r2, r2, r3
 800fd36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd38:	1ad2      	subs	r2, r2, r3
 800fd3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd40:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800fd42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fd46:	2b03      	cmp	r3, #3
 800fd48:	d10f      	bne.n	800fd6a <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800fd4a:	6a3b      	ldr	r3, [r7, #32]
 800fd4c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fd50:	4293      	cmp	r3, r2
 800fd52:	d80a      	bhi.n	800fd6a <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d105      	bne.n	800fd66 <f_mkfs+0x376>
 800fd5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd5c:	085b      	lsrs	r3, r3, #1
 800fd5e:	607b      	str	r3, [r7, #4]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d144      	bne.n	800fdf0 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800fd66:	230e      	movs	r3, #14
 800fd68:	e268      	b.n	801023c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800fd6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fd6e:	2b02      	cmp	r3, #2
 800fd70:	d133      	bne.n	800fdda <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800fd72:	6a3b      	ldr	r3, [r7, #32]
 800fd74:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fd78:	4293      	cmp	r3, r2
 800fd7a:	d91e      	bls.n	800fdba <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d107      	bne.n	800fd92 <f_mkfs+0x3a2>
 800fd82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd84:	005b      	lsls	r3, r3, #1
 800fd86:	2b40      	cmp	r3, #64	; 0x40
 800fd88:	d803      	bhi.n	800fd92 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800fd8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd8c:	005b      	lsls	r3, r3, #1
 800fd8e:	607b      	str	r3, [r7, #4]
 800fd90:	e033      	b.n	800fdfa <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800fd92:	7afb      	ldrb	r3, [r7, #11]
 800fd94:	f003 0302 	and.w	r3, r3, #2
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d003      	beq.n	800fda4 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800fd9c:	2303      	movs	r3, #3
 800fd9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800fda2:	e02a      	b.n	800fdfa <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d105      	bne.n	800fdb6 <f_mkfs+0x3c6>
 800fdaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdac:	005b      	lsls	r3, r3, #1
 800fdae:	607b      	str	r3, [r7, #4]
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2b80      	cmp	r3, #128	; 0x80
 800fdb4:	d91e      	bls.n	800fdf4 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800fdb6:	230e      	movs	r3, #14
 800fdb8:	e240      	b.n	801023c <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800fdba:	6a3b      	ldr	r3, [r7, #32]
 800fdbc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fdc0:	4293      	cmp	r3, r2
 800fdc2:	d80a      	bhi.n	800fdda <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d105      	bne.n	800fdd6 <f_mkfs+0x3e6>
 800fdca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdcc:	005b      	lsls	r3, r3, #1
 800fdce:	607b      	str	r3, [r7, #4]
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2b80      	cmp	r3, #128	; 0x80
 800fdd4:	d910      	bls.n	800fdf8 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800fdd6:	230e      	movs	r3, #14
 800fdd8:	e230      	b.n	801023c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800fdda:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fdde:	2b01      	cmp	r3, #1
 800fde0:	d10c      	bne.n	800fdfc <f_mkfs+0x40c>
 800fde2:	6a3b      	ldr	r3, [r7, #32]
 800fde4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fde8:	4293      	cmp	r3, r2
 800fdea:	d907      	bls.n	800fdfc <f_mkfs+0x40c>
 800fdec:	230e      	movs	r3, #14
 800fdee:	e225      	b.n	801023c <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800fdf0:	bf00      	nop
 800fdf2:	e6ce      	b.n	800fb92 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800fdf4:	bf00      	nop
 800fdf6:	e6cc      	b.n	800fb92 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800fdf8:	bf00      	nop
			pau = au;
 800fdfa:	e6ca      	b.n	800fb92 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800fdfc:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800fdfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fe00:	461a      	mov	r2, r3
 800fe02:	2100      	movs	r1, #0
 800fe04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe06:	f7fd f9e8 	bl	800d1da <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800fe0a:	220b      	movs	r2, #11
 800fe0c:	49b2      	ldr	r1, [pc, #712]	; (80100d8 <f_mkfs+0x6e8>)
 800fe0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe10:	f7fd f9c2 	bl	800d198 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800fe14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe16:	330b      	adds	r3, #11
 800fe18:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fe1a:	4611      	mov	r1, r2
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7fd f974 	bl	800d10a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800fe22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe24:	330d      	adds	r3, #13
 800fe26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe28:	b2d2      	uxtb	r2, r2
 800fe2a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800fe2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe2e:	330e      	adds	r3, #14
 800fe30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fe32:	b292      	uxth	r2, r2
 800fe34:	4611      	mov	r1, r2
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7fd f967 	bl	800d10a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800fe3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe3e:	3310      	adds	r3, #16
 800fe40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe42:	b2d2      	uxtb	r2, r2
 800fe44:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800fe46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe48:	f103 0211 	add.w	r2, r3, #17
 800fe4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fe50:	2b03      	cmp	r3, #3
 800fe52:	d002      	beq.n	800fe5a <f_mkfs+0x46a>
 800fe54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe56:	b29b      	uxth	r3, r3
 800fe58:	e000      	b.n	800fe5c <f_mkfs+0x46c>
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	4619      	mov	r1, r3
 800fe5e:	4610      	mov	r0, r2
 800fe60:	f7fd f953 	bl	800d10a <st_word>
		if (sz_vol < 0x10000) {
 800fe64:	693b      	ldr	r3, [r7, #16]
 800fe66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe6a:	d208      	bcs.n	800fe7e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800fe6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe6e:	3313      	adds	r3, #19
 800fe70:	693a      	ldr	r2, [r7, #16]
 800fe72:	b292      	uxth	r2, r2
 800fe74:	4611      	mov	r1, r2
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7fd f947 	bl	800d10a <st_word>
 800fe7c:	e006      	b.n	800fe8c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800fe7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe80:	3320      	adds	r3, #32
 800fe82:	693a      	ldr	r2, [r7, #16]
 800fe84:	4611      	mov	r1, r2
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7fd f95a 	bl	800d140 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800fe8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe8e:	3315      	adds	r3, #21
 800fe90:	22f8      	movs	r2, #248	; 0xf8
 800fe92:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800fe94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe96:	3318      	adds	r3, #24
 800fe98:	213f      	movs	r1, #63	; 0x3f
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f7fd f935 	bl	800d10a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800fea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea2:	331a      	adds	r3, #26
 800fea4:	21ff      	movs	r1, #255	; 0xff
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7fd f92f 	bl	800d10a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800feac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feae:	331c      	adds	r3, #28
 800feb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7fd f944 	bl	800d140 <st_dword>
		if (fmt == FS_FAT32) {
 800feb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800febc:	2b03      	cmp	r3, #3
 800febe:	d131      	bne.n	800ff24 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800fec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec2:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800fec6:	f7fd f821 	bl	800cf0c <get_fattime>
 800feca:	4603      	mov	r3, r0
 800fecc:	4619      	mov	r1, r3
 800fece:	4620      	mov	r0, r4
 800fed0:	f7fd f936 	bl	800d140 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800fed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed6:	3324      	adds	r3, #36	; 0x24
 800fed8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800feda:	4618      	mov	r0, r3
 800fedc:	f7fd f930 	bl	800d140 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800fee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee2:	332c      	adds	r3, #44	; 0x2c
 800fee4:	2102      	movs	r1, #2
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7fd f92a 	bl	800d140 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800feec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feee:	3330      	adds	r3, #48	; 0x30
 800fef0:	2101      	movs	r1, #1
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7fd f909 	bl	800d10a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800fef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fefa:	3332      	adds	r3, #50	; 0x32
 800fefc:	2106      	movs	r1, #6
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7fd f903 	bl	800d10a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800ff04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff06:	3340      	adds	r3, #64	; 0x40
 800ff08:	2280      	movs	r2, #128	; 0x80
 800ff0a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800ff0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff0e:	3342      	adds	r3, #66	; 0x42
 800ff10:	2229      	movs	r2, #41	; 0x29
 800ff12:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800ff14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff16:	3347      	adds	r3, #71	; 0x47
 800ff18:	2213      	movs	r2, #19
 800ff1a:	4970      	ldr	r1, [pc, #448]	; (80100dc <f_mkfs+0x6ec>)
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f7fd f93b 	bl	800d198 <mem_cpy>
 800ff22:	e020      	b.n	800ff66 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800ff24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff26:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800ff2a:	f7fc ffef 	bl	800cf0c <get_fattime>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	4619      	mov	r1, r3
 800ff32:	4620      	mov	r0, r4
 800ff34:	f7fd f904 	bl	800d140 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800ff38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff3a:	3316      	adds	r3, #22
 800ff3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ff3e:	b292      	uxth	r2, r2
 800ff40:	4611      	mov	r1, r2
 800ff42:	4618      	mov	r0, r3
 800ff44:	f7fd f8e1 	bl	800d10a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800ff48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff4a:	3324      	adds	r3, #36	; 0x24
 800ff4c:	2280      	movs	r2, #128	; 0x80
 800ff4e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800ff50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff52:	3326      	adds	r3, #38	; 0x26
 800ff54:	2229      	movs	r2, #41	; 0x29
 800ff56:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800ff58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff5a:	332b      	adds	r3, #43	; 0x2b
 800ff5c:	2213      	movs	r2, #19
 800ff5e:	4960      	ldr	r1, [pc, #384]	; (80100e0 <f_mkfs+0x6f0>)
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7fd f919 	bl	800d198 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800ff66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff68:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ff6c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7fd f8ca 	bl	800d10a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800ff76:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ff80:	f7fd f84a 	bl	800d018 <disk_write>
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d001      	beq.n	800ff8e <f_mkfs+0x59e>
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	e156      	b.n	801023c <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800ff8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ff92:	2b03      	cmp	r3, #3
 800ff94:	d140      	bne.n	8010018 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800ff96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff98:	1d9a      	adds	r2, r3, #6
 800ff9a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ffa2:	f7fd f839 	bl	800d018 <disk_write>
			mem_set(buf, 0, ss);
 800ffa6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	2100      	movs	r1, #0
 800ffac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffae:	f7fd f914 	bl	800d1da <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800ffb2:	494c      	ldr	r1, [pc, #304]	; (80100e4 <f_mkfs+0x6f4>)
 800ffb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffb6:	f7fd f8c3 	bl	800d140 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800ffba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffbc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ffc0:	4949      	ldr	r1, [pc, #292]	; (80100e8 <f_mkfs+0x6f8>)
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7fd f8bc 	bl	800d140 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800ffc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffca:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ffce:	6a3b      	ldr	r3, [r7, #32]
 800ffd0:	3b01      	subs	r3, #1
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	4610      	mov	r0, r2
 800ffd6:	f7fd f8b3 	bl	800d140 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800ffda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffdc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ffe0:	2102      	movs	r1, #2
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f7fd f8ac 	bl	800d140 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800ffe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ffee:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7fd f889 	bl	800d10a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800fff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fffa:	1dda      	adds	r2, r3, #7
 800fffc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010000:	2301      	movs	r3, #1
 8010002:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010004:	f7fd f808 	bl	800d018 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8010008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000a:	1c5a      	adds	r2, r3, #1
 801000c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010010:	2301      	movs	r3, #1
 8010012:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010014:	f7fd f800 	bl	800d018 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8010018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801001a:	2100      	movs	r1, #0
 801001c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801001e:	f7fd f8dc 	bl	800d1da <mem_set>
		sect = b_fat;		/* FAT start sector */
 8010022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010024:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8010026:	2300      	movs	r3, #0
 8010028:	64bb      	str	r3, [r7, #72]	; 0x48
 801002a:	e04b      	b.n	80100c4 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 801002c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010030:	2b03      	cmp	r3, #3
 8010032:	d113      	bne.n	801005c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8010034:	f06f 0107 	mvn.w	r1, #7
 8010038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801003a:	f7fd f881 	bl	800d140 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 801003e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010040:	3304      	adds	r3, #4
 8010042:	f04f 31ff 	mov.w	r1, #4294967295
 8010046:	4618      	mov	r0, r3
 8010048:	f7fd f87a 	bl	800d140 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 801004c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801004e:	3308      	adds	r3, #8
 8010050:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8010054:	4618      	mov	r0, r3
 8010056:	f7fd f873 	bl	800d140 <st_dword>
 801005a:	e00b      	b.n	8010074 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 801005c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010060:	2b01      	cmp	r3, #1
 8010062:	d101      	bne.n	8010068 <f_mkfs+0x678>
 8010064:	4b21      	ldr	r3, [pc, #132]	; (80100ec <f_mkfs+0x6fc>)
 8010066:	e001      	b.n	801006c <f_mkfs+0x67c>
 8010068:	f06f 0307 	mvn.w	r3, #7
 801006c:	4619      	mov	r1, r3
 801006e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010070:	f7fd f866 	bl	800d140 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8010074:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010076:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8010078:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801007a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801007c:	4293      	cmp	r3, r2
 801007e:	bf28      	it	cs
 8010080:	4613      	movcs	r3, r2
 8010082:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8010084:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801008a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801008c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801008e:	f7fc ffc3 	bl	800d018 <disk_write>
 8010092:	4603      	mov	r3, r0
 8010094:	2b00      	cmp	r3, #0
 8010096:	d001      	beq.n	801009c <f_mkfs+0x6ac>
 8010098:	2301      	movs	r3, #1
 801009a:	e0cf      	b.n	801023c <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 801009c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801009e:	461a      	mov	r2, r3
 80100a0:	2100      	movs	r1, #0
 80100a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100a4:	f7fd f899 	bl	800d1da <mem_set>
				sect += n; nsect -= n;
 80100a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80100aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100ac:	4413      	add	r3, r2
 80100ae:	667b      	str	r3, [r7, #100]	; 0x64
 80100b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80100b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100b4:	1ad3      	subs	r3, r2, r3
 80100b6:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 80100b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d1dc      	bne.n	8010078 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80100be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100c0:	3301      	adds	r3, #1
 80100c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80100c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80100c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100c8:	429a      	cmp	r2, r3
 80100ca:	d3af      	bcc.n	801002c <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80100cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80100d0:	2b03      	cmp	r3, #3
 80100d2:	d10d      	bne.n	80100f0 <f_mkfs+0x700>
 80100d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100d6:	e00c      	b.n	80100f2 <f_mkfs+0x702>
 80100d8:	080119a4 	.word	0x080119a4
 80100dc:	080119b0 	.word	0x080119b0
 80100e0:	080119c4 	.word	0x080119c4
 80100e4:	41615252 	.word	0x41615252
 80100e8:	61417272 	.word	0x61417272
 80100ec:	00fffff8 	.word	0x00fffff8
 80100f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100f2:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80100f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80100f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f8:	4293      	cmp	r3, r2
 80100fa:	bf28      	it	cs
 80100fc:	4613      	movcs	r3, r2
 80100fe:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8010100:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010106:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010108:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801010a:	f7fc ff85 	bl	800d018 <disk_write>
 801010e:	4603      	mov	r3, r0
 8010110:	2b00      	cmp	r3, #0
 8010112:	d001      	beq.n	8010118 <f_mkfs+0x728>
 8010114:	2301      	movs	r3, #1
 8010116:	e091      	b.n	801023c <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8010118:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801011a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801011c:	4413      	add	r3, r2
 801011e:	667b      	str	r3, [r7, #100]	; 0x64
 8010120:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010124:	1ad3      	subs	r3, r2, r3
 8010126:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8010128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801012a:	2b00      	cmp	r3, #0
 801012c:	d1e2      	bne.n	80100f4 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 801012e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010132:	2b03      	cmp	r3, #3
 8010134:	d103      	bne.n	801013e <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8010136:	230c      	movs	r3, #12
 8010138:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 801013c:	e010      	b.n	8010160 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010144:	d303      	bcc.n	801014e <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8010146:	2306      	movs	r3, #6
 8010148:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 801014c:	e008      	b.n	8010160 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 801014e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010152:	2b02      	cmp	r3, #2
 8010154:	d101      	bne.n	801015a <f_mkfs+0x76a>
 8010156:	2304      	movs	r3, #4
 8010158:	e000      	b.n	801015c <f_mkfs+0x76c>
 801015a:	2301      	movs	r3, #1
 801015c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8010160:	7afb      	ldrb	r3, [r7, #11]
 8010162:	f003 0308 	and.w	r3, r3, #8
 8010166:	2b00      	cmp	r3, #0
 8010168:	d15b      	bne.n	8010222 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 801016a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801016c:	461a      	mov	r2, r3
 801016e:	2100      	movs	r1, #0
 8010170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010172:	f7fd f832 	bl	800d1da <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8010176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010178:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801017c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010180:	4618      	mov	r0, r3
 8010182:	f7fc ffc2 	bl	800d10a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8010186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010188:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801018c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 801018e:	69bb      	ldr	r3, [r7, #24]
 8010190:	2200      	movs	r2, #0
 8010192:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8010194:	69bb      	ldr	r3, [r7, #24]
 8010196:	3301      	adds	r3, #1
 8010198:	2201      	movs	r2, #1
 801019a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 801019c:	69bb      	ldr	r3, [r7, #24]
 801019e:	3302      	adds	r3, #2
 80101a0:	2201      	movs	r2, #1
 80101a2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80101a4:	69bb      	ldr	r3, [r7, #24]
 80101a6:	3303      	adds	r3, #3
 80101a8:	2200      	movs	r2, #0
 80101aa:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80101ac:	69bb      	ldr	r3, [r7, #24]
 80101ae:	3304      	adds	r3, #4
 80101b0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80101b4:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80101b6:	693a      	ldr	r2, [r7, #16]
 80101b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ba:	441a      	add	r2, r3
 80101bc:	4b21      	ldr	r3, [pc, #132]	; (8010244 <f_mkfs+0x854>)
 80101be:	fba3 1302 	umull	r1, r3, r3, r2
 80101c2:	1ad2      	subs	r2, r2, r3
 80101c4:	0852      	lsrs	r2, r2, #1
 80101c6:	4413      	add	r3, r2
 80101c8:	0b5b      	lsrs	r3, r3, #13
 80101ca:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80101cc:	69bb      	ldr	r3, [r7, #24]
 80101ce:	3305      	adds	r3, #5
 80101d0:	22fe      	movs	r2, #254	; 0xfe
 80101d2:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80101d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101d6:	089b      	lsrs	r3, r3, #2
 80101d8:	b2da      	uxtb	r2, r3
 80101da:	69bb      	ldr	r3, [r7, #24]
 80101dc:	3306      	adds	r3, #6
 80101de:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80101e2:	b2d2      	uxtb	r2, r2
 80101e4:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80101e6:	69bb      	ldr	r3, [r7, #24]
 80101e8:	3307      	adds	r3, #7
 80101ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80101ec:	b2d2      	uxtb	r2, r2
 80101ee:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80101f0:	69bb      	ldr	r3, [r7, #24]
 80101f2:	3308      	adds	r3, #8
 80101f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7fc ffa2 	bl	800d140 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80101fc:	69bb      	ldr	r3, [r7, #24]
 80101fe:	330c      	adds	r3, #12
 8010200:	693a      	ldr	r2, [r7, #16]
 8010202:	4611      	mov	r1, r2
 8010204:	4618      	mov	r0, r3
 8010206:	f7fc ff9b 	bl	800d140 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 801020a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801020e:	2301      	movs	r3, #1
 8010210:	2200      	movs	r2, #0
 8010212:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010214:	f7fc ff00 	bl	800d018 <disk_write>
 8010218:	4603      	mov	r3, r0
 801021a:	2b00      	cmp	r3, #0
 801021c:	d001      	beq.n	8010222 <f_mkfs+0x832>
 801021e:	2301      	movs	r3, #1
 8010220:	e00c      	b.n	801023c <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8010222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010226:	2200      	movs	r2, #0
 8010228:	2100      	movs	r1, #0
 801022a:	4618      	mov	r0, r3
 801022c:	f7fc ff14 	bl	800d058 <disk_ioctl>
 8010230:	4603      	mov	r3, r0
 8010232:	2b00      	cmp	r3, #0
 8010234:	d001      	beq.n	801023a <f_mkfs+0x84a>
 8010236:	2301      	movs	r3, #1
 8010238:	e000      	b.n	801023c <f_mkfs+0x84c>

	return FR_OK;
 801023a:	2300      	movs	r3, #0
}
 801023c:	4618      	mov	r0, r3
 801023e:	3774      	adds	r7, #116	; 0x74
 8010240:	46bd      	mov	sp, r7
 8010242:	bd90      	pop	{r4, r7, pc}
 8010244:	0515565b 	.word	0x0515565b

08010248 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010248:	b480      	push	{r7}
 801024a:	b087      	sub	sp, #28
 801024c:	af00      	add	r7, sp, #0
 801024e:	60f8      	str	r0, [r7, #12]
 8010250:	60b9      	str	r1, [r7, #8]
 8010252:	4613      	mov	r3, r2
 8010254:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010256:	2301      	movs	r3, #1
 8010258:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801025a:	2300      	movs	r3, #0
 801025c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801025e:	4b1f      	ldr	r3, [pc, #124]	; (80102dc <FATFS_LinkDriverEx+0x94>)
 8010260:	7a5b      	ldrb	r3, [r3, #9]
 8010262:	b2db      	uxtb	r3, r3
 8010264:	2b00      	cmp	r3, #0
 8010266:	d131      	bne.n	80102cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010268:	4b1c      	ldr	r3, [pc, #112]	; (80102dc <FATFS_LinkDriverEx+0x94>)
 801026a:	7a5b      	ldrb	r3, [r3, #9]
 801026c:	b2db      	uxtb	r3, r3
 801026e:	461a      	mov	r2, r3
 8010270:	4b1a      	ldr	r3, [pc, #104]	; (80102dc <FATFS_LinkDriverEx+0x94>)
 8010272:	2100      	movs	r1, #0
 8010274:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010276:	4b19      	ldr	r3, [pc, #100]	; (80102dc <FATFS_LinkDriverEx+0x94>)
 8010278:	7a5b      	ldrb	r3, [r3, #9]
 801027a:	b2db      	uxtb	r3, r3
 801027c:	4a17      	ldr	r2, [pc, #92]	; (80102dc <FATFS_LinkDriverEx+0x94>)
 801027e:	009b      	lsls	r3, r3, #2
 8010280:	4413      	add	r3, r2
 8010282:	68fa      	ldr	r2, [r7, #12]
 8010284:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010286:	4b15      	ldr	r3, [pc, #84]	; (80102dc <FATFS_LinkDriverEx+0x94>)
 8010288:	7a5b      	ldrb	r3, [r3, #9]
 801028a:	b2db      	uxtb	r3, r3
 801028c:	461a      	mov	r2, r3
 801028e:	4b13      	ldr	r3, [pc, #76]	; (80102dc <FATFS_LinkDriverEx+0x94>)
 8010290:	4413      	add	r3, r2
 8010292:	79fa      	ldrb	r2, [r7, #7]
 8010294:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010296:	4b11      	ldr	r3, [pc, #68]	; (80102dc <FATFS_LinkDriverEx+0x94>)
 8010298:	7a5b      	ldrb	r3, [r3, #9]
 801029a:	b2db      	uxtb	r3, r3
 801029c:	1c5a      	adds	r2, r3, #1
 801029e:	b2d1      	uxtb	r1, r2
 80102a0:	4a0e      	ldr	r2, [pc, #56]	; (80102dc <FATFS_LinkDriverEx+0x94>)
 80102a2:	7251      	strb	r1, [r2, #9]
 80102a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80102a6:	7dbb      	ldrb	r3, [r7, #22]
 80102a8:	3330      	adds	r3, #48	; 0x30
 80102aa:	b2da      	uxtb	r2, r3
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	3301      	adds	r3, #1
 80102b4:	223a      	movs	r2, #58	; 0x3a
 80102b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	3302      	adds	r3, #2
 80102bc:	222f      	movs	r2, #47	; 0x2f
 80102be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	3303      	adds	r3, #3
 80102c4:	2200      	movs	r2, #0
 80102c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80102c8:	2300      	movs	r3, #0
 80102ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80102cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	371c      	adds	r7, #28
 80102d2:	46bd      	mov	sp, r7
 80102d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d8:	4770      	bx	lr
 80102da:	bf00      	nop
 80102dc:	2001fc14 	.word	0x2001fc14

080102e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b082      	sub	sp, #8
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80102ea:	2200      	movs	r2, #0
 80102ec:	6839      	ldr	r1, [r7, #0]
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f7ff ffaa 	bl	8010248 <FATFS_LinkDriverEx>
 80102f4:	4603      	mov	r3, r0
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3708      	adds	r7, #8
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}

080102fe <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80102fe:	b580      	push	{r7, lr}
 8010300:	b082      	sub	sp, #8
 8010302:	af00      	add	r7, sp, #0
 8010304:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f000 f930 	bl	801056c <malloc>
 801030c:	4603      	mov	r3, r0
}
 801030e:	4618      	mov	r0, r3
 8010310:	3708      	adds	r7, #8
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}

08010316 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8010316:	b580      	push	{r7, lr}
 8010318:	b082      	sub	sp, #8
 801031a:	af00      	add	r7, sp, #0
 801031c:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f000 f92c 	bl	801057c <free>
}
 8010324:	bf00      	nop
 8010326:	3708      	adds	r7, #8
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}

0801032c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801032c:	b480      	push	{r7}
 801032e:	b085      	sub	sp, #20
 8010330:	af00      	add	r7, sp, #0
 8010332:	4603      	mov	r3, r0
 8010334:	6039      	str	r1, [r7, #0]
 8010336:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010338:	88fb      	ldrh	r3, [r7, #6]
 801033a:	2b7f      	cmp	r3, #127	; 0x7f
 801033c:	d802      	bhi.n	8010344 <ff_convert+0x18>
		c = chr;
 801033e:	88fb      	ldrh	r3, [r7, #6]
 8010340:	81fb      	strh	r3, [r7, #14]
 8010342:	e025      	b.n	8010390 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d00b      	beq.n	8010362 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801034a:	88fb      	ldrh	r3, [r7, #6]
 801034c:	2bff      	cmp	r3, #255	; 0xff
 801034e:	d805      	bhi.n	801035c <ff_convert+0x30>
 8010350:	88fb      	ldrh	r3, [r7, #6]
 8010352:	3b80      	subs	r3, #128	; 0x80
 8010354:	4a12      	ldr	r2, [pc, #72]	; (80103a0 <ff_convert+0x74>)
 8010356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801035a:	e000      	b.n	801035e <ff_convert+0x32>
 801035c:	2300      	movs	r3, #0
 801035e:	81fb      	strh	r3, [r7, #14]
 8010360:	e016      	b.n	8010390 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010362:	2300      	movs	r3, #0
 8010364:	81fb      	strh	r3, [r7, #14]
 8010366:	e009      	b.n	801037c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010368:	89fb      	ldrh	r3, [r7, #14]
 801036a:	4a0d      	ldr	r2, [pc, #52]	; (80103a0 <ff_convert+0x74>)
 801036c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010370:	88fa      	ldrh	r2, [r7, #6]
 8010372:	429a      	cmp	r2, r3
 8010374:	d006      	beq.n	8010384 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010376:	89fb      	ldrh	r3, [r7, #14]
 8010378:	3301      	adds	r3, #1
 801037a:	81fb      	strh	r3, [r7, #14]
 801037c:	89fb      	ldrh	r3, [r7, #14]
 801037e:	2b7f      	cmp	r3, #127	; 0x7f
 8010380:	d9f2      	bls.n	8010368 <ff_convert+0x3c>
 8010382:	e000      	b.n	8010386 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010384:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010386:	89fb      	ldrh	r3, [r7, #14]
 8010388:	3380      	adds	r3, #128	; 0x80
 801038a:	b29b      	uxth	r3, r3
 801038c:	b2db      	uxtb	r3, r3
 801038e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010390:	89fb      	ldrh	r3, [r7, #14]
}
 8010392:	4618      	mov	r0, r3
 8010394:	3714      	adds	r7, #20
 8010396:	46bd      	mov	sp, r7
 8010398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039c:	4770      	bx	lr
 801039e:	bf00      	nop
 80103a0:	080120ac 	.word	0x080120ac

080103a4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80103a4:	b480      	push	{r7}
 80103a6:	b087      	sub	sp, #28
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	4603      	mov	r3, r0
 80103ac:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80103ae:	88fb      	ldrh	r3, [r7, #6]
 80103b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103b4:	d201      	bcs.n	80103ba <ff_wtoupper+0x16>
 80103b6:	4b3e      	ldr	r3, [pc, #248]	; (80104b0 <ff_wtoupper+0x10c>)
 80103b8:	e000      	b.n	80103bc <ff_wtoupper+0x18>
 80103ba:	4b3e      	ldr	r3, [pc, #248]	; (80104b4 <ff_wtoupper+0x110>)
 80103bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	1c9a      	adds	r2, r3, #2
 80103c2:	617a      	str	r2, [r7, #20]
 80103c4:	881b      	ldrh	r3, [r3, #0]
 80103c6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80103c8:	8a7b      	ldrh	r3, [r7, #18]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d068      	beq.n	80104a0 <ff_wtoupper+0xfc>
 80103ce:	88fa      	ldrh	r2, [r7, #6]
 80103d0:	8a7b      	ldrh	r3, [r7, #18]
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d364      	bcc.n	80104a0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	1c9a      	adds	r2, r3, #2
 80103da:	617a      	str	r2, [r7, #20]
 80103dc:	881b      	ldrh	r3, [r3, #0]
 80103de:	823b      	strh	r3, [r7, #16]
 80103e0:	8a3b      	ldrh	r3, [r7, #16]
 80103e2:	0a1b      	lsrs	r3, r3, #8
 80103e4:	81fb      	strh	r3, [r7, #14]
 80103e6:	8a3b      	ldrh	r3, [r7, #16]
 80103e8:	b2db      	uxtb	r3, r3
 80103ea:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80103ec:	88fa      	ldrh	r2, [r7, #6]
 80103ee:	8a79      	ldrh	r1, [r7, #18]
 80103f0:	8a3b      	ldrh	r3, [r7, #16]
 80103f2:	440b      	add	r3, r1
 80103f4:	429a      	cmp	r2, r3
 80103f6:	da49      	bge.n	801048c <ff_wtoupper+0xe8>
			switch (cmd) {
 80103f8:	89fb      	ldrh	r3, [r7, #14]
 80103fa:	2b08      	cmp	r3, #8
 80103fc:	d84f      	bhi.n	801049e <ff_wtoupper+0xfa>
 80103fe:	a201      	add	r2, pc, #4	; (adr r2, 8010404 <ff_wtoupper+0x60>)
 8010400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010404:	08010429 	.word	0x08010429
 8010408:	0801043b 	.word	0x0801043b
 801040c:	08010451 	.word	0x08010451
 8010410:	08010459 	.word	0x08010459
 8010414:	08010461 	.word	0x08010461
 8010418:	08010469 	.word	0x08010469
 801041c:	08010471 	.word	0x08010471
 8010420:	08010479 	.word	0x08010479
 8010424:	08010481 	.word	0x08010481
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010428:	88fa      	ldrh	r2, [r7, #6]
 801042a:	8a7b      	ldrh	r3, [r7, #18]
 801042c:	1ad3      	subs	r3, r2, r3
 801042e:	005b      	lsls	r3, r3, #1
 8010430:	697a      	ldr	r2, [r7, #20]
 8010432:	4413      	add	r3, r2
 8010434:	881b      	ldrh	r3, [r3, #0]
 8010436:	80fb      	strh	r3, [r7, #6]
 8010438:	e027      	b.n	801048a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801043a:	88fa      	ldrh	r2, [r7, #6]
 801043c:	8a7b      	ldrh	r3, [r7, #18]
 801043e:	1ad3      	subs	r3, r2, r3
 8010440:	b29b      	uxth	r3, r3
 8010442:	f003 0301 	and.w	r3, r3, #1
 8010446:	b29b      	uxth	r3, r3
 8010448:	88fa      	ldrh	r2, [r7, #6]
 801044a:	1ad3      	subs	r3, r2, r3
 801044c:	80fb      	strh	r3, [r7, #6]
 801044e:	e01c      	b.n	801048a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010450:	88fb      	ldrh	r3, [r7, #6]
 8010452:	3b10      	subs	r3, #16
 8010454:	80fb      	strh	r3, [r7, #6]
 8010456:	e018      	b.n	801048a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010458:	88fb      	ldrh	r3, [r7, #6]
 801045a:	3b20      	subs	r3, #32
 801045c:	80fb      	strh	r3, [r7, #6]
 801045e:	e014      	b.n	801048a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010460:	88fb      	ldrh	r3, [r7, #6]
 8010462:	3b30      	subs	r3, #48	; 0x30
 8010464:	80fb      	strh	r3, [r7, #6]
 8010466:	e010      	b.n	801048a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010468:	88fb      	ldrh	r3, [r7, #6]
 801046a:	3b1a      	subs	r3, #26
 801046c:	80fb      	strh	r3, [r7, #6]
 801046e:	e00c      	b.n	801048a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010470:	88fb      	ldrh	r3, [r7, #6]
 8010472:	3308      	adds	r3, #8
 8010474:	80fb      	strh	r3, [r7, #6]
 8010476:	e008      	b.n	801048a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010478:	88fb      	ldrh	r3, [r7, #6]
 801047a:	3b50      	subs	r3, #80	; 0x50
 801047c:	80fb      	strh	r3, [r7, #6]
 801047e:	e004      	b.n	801048a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010480:	88fb      	ldrh	r3, [r7, #6]
 8010482:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010486:	80fb      	strh	r3, [r7, #6]
 8010488:	bf00      	nop
			}
			break;
 801048a:	e008      	b.n	801049e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801048c:	89fb      	ldrh	r3, [r7, #14]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d195      	bne.n	80103be <ff_wtoupper+0x1a>
 8010492:	8a3b      	ldrh	r3, [r7, #16]
 8010494:	005b      	lsls	r3, r3, #1
 8010496:	697a      	ldr	r2, [r7, #20]
 8010498:	4413      	add	r3, r2
 801049a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801049c:	e78f      	b.n	80103be <ff_wtoupper+0x1a>
			break;
 801049e:	bf00      	nop
	}

	return chr;
 80104a0:	88fb      	ldrh	r3, [r7, #6]
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	371c      	adds	r7, #28
 80104a6:	46bd      	mov	sp, r7
 80104a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ac:	4770      	bx	lr
 80104ae:	bf00      	nop
 80104b0:	080121ac 	.word	0x080121ac
 80104b4:	080123a0 	.word	0x080123a0

080104b8 <__assert_func>:
 80104b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80104ba:	4614      	mov	r4, r2
 80104bc:	461a      	mov	r2, r3
 80104be:	4b09      	ldr	r3, [pc, #36]	; (80104e4 <__assert_func+0x2c>)
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	4605      	mov	r5, r0
 80104c4:	68d8      	ldr	r0, [r3, #12]
 80104c6:	b14c      	cbz	r4, 80104dc <__assert_func+0x24>
 80104c8:	4b07      	ldr	r3, [pc, #28]	; (80104e8 <__assert_func+0x30>)
 80104ca:	9100      	str	r1, [sp, #0]
 80104cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80104d0:	4906      	ldr	r1, [pc, #24]	; (80104ec <__assert_func+0x34>)
 80104d2:	462b      	mov	r3, r5
 80104d4:	f000 f814 	bl	8010500 <fiprintf>
 80104d8:	f000 fd8c 	bl	8010ff4 <abort>
 80104dc:	4b04      	ldr	r3, [pc, #16]	; (80104f0 <__assert_func+0x38>)
 80104de:	461c      	mov	r4, r3
 80104e0:	e7f3      	b.n	80104ca <__assert_func+0x12>
 80104e2:	bf00      	nop
 80104e4:	200000b0 	.word	0x200000b0
 80104e8:	0801245c 	.word	0x0801245c
 80104ec:	08012469 	.word	0x08012469
 80104f0:	08012497 	.word	0x08012497

080104f4 <__errno>:
 80104f4:	4b01      	ldr	r3, [pc, #4]	; (80104fc <__errno+0x8>)
 80104f6:	6818      	ldr	r0, [r3, #0]
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop
 80104fc:	200000b0 	.word	0x200000b0

08010500 <fiprintf>:
 8010500:	b40e      	push	{r1, r2, r3}
 8010502:	b503      	push	{r0, r1, lr}
 8010504:	4601      	mov	r1, r0
 8010506:	ab03      	add	r3, sp, #12
 8010508:	4805      	ldr	r0, [pc, #20]	; (8010520 <fiprintf+0x20>)
 801050a:	f853 2b04 	ldr.w	r2, [r3], #4
 801050e:	6800      	ldr	r0, [r0, #0]
 8010510:	9301      	str	r3, [sp, #4]
 8010512:	f000 f94d 	bl	80107b0 <_vfiprintf_r>
 8010516:	b002      	add	sp, #8
 8010518:	f85d eb04 	ldr.w	lr, [sp], #4
 801051c:	b003      	add	sp, #12
 801051e:	4770      	bx	lr
 8010520:	200000b0 	.word	0x200000b0

08010524 <__libc_init_array>:
 8010524:	b570      	push	{r4, r5, r6, lr}
 8010526:	4d0d      	ldr	r5, [pc, #52]	; (801055c <__libc_init_array+0x38>)
 8010528:	4c0d      	ldr	r4, [pc, #52]	; (8010560 <__libc_init_array+0x3c>)
 801052a:	1b64      	subs	r4, r4, r5
 801052c:	10a4      	asrs	r4, r4, #2
 801052e:	2600      	movs	r6, #0
 8010530:	42a6      	cmp	r6, r4
 8010532:	d109      	bne.n	8010548 <__libc_init_array+0x24>
 8010534:	4d0b      	ldr	r5, [pc, #44]	; (8010564 <__libc_init_array+0x40>)
 8010536:	4c0c      	ldr	r4, [pc, #48]	; (8010568 <__libc_init_array+0x44>)
 8010538:	f001 f880 	bl	801163c <_init>
 801053c:	1b64      	subs	r4, r4, r5
 801053e:	10a4      	asrs	r4, r4, #2
 8010540:	2600      	movs	r6, #0
 8010542:	42a6      	cmp	r6, r4
 8010544:	d105      	bne.n	8010552 <__libc_init_array+0x2e>
 8010546:	bd70      	pop	{r4, r5, r6, pc}
 8010548:	f855 3b04 	ldr.w	r3, [r5], #4
 801054c:	4798      	blx	r3
 801054e:	3601      	adds	r6, #1
 8010550:	e7ee      	b.n	8010530 <__libc_init_array+0xc>
 8010552:	f855 3b04 	ldr.w	r3, [r5], #4
 8010556:	4798      	blx	r3
 8010558:	3601      	adds	r6, #1
 801055a:	e7f2      	b.n	8010542 <__libc_init_array+0x1e>
 801055c:	08012538 	.word	0x08012538
 8010560:	08012538 	.word	0x08012538
 8010564:	08012538 	.word	0x08012538
 8010568:	0801253c 	.word	0x0801253c

0801056c <malloc>:
 801056c:	4b02      	ldr	r3, [pc, #8]	; (8010578 <malloc+0xc>)
 801056e:	4601      	mov	r1, r0
 8010570:	6818      	ldr	r0, [r3, #0]
 8010572:	f000 b87f 	b.w	8010674 <_malloc_r>
 8010576:	bf00      	nop
 8010578:	200000b0 	.word	0x200000b0

0801057c <free>:
 801057c:	4b02      	ldr	r3, [pc, #8]	; (8010588 <free+0xc>)
 801057e:	4601      	mov	r1, r0
 8010580:	6818      	ldr	r0, [r3, #0]
 8010582:	f000 b80b 	b.w	801059c <_free_r>
 8010586:	bf00      	nop
 8010588:	200000b0 	.word	0x200000b0

0801058c <memset>:
 801058c:	4402      	add	r2, r0
 801058e:	4603      	mov	r3, r0
 8010590:	4293      	cmp	r3, r2
 8010592:	d100      	bne.n	8010596 <memset+0xa>
 8010594:	4770      	bx	lr
 8010596:	f803 1b01 	strb.w	r1, [r3], #1
 801059a:	e7f9      	b.n	8010590 <memset+0x4>

0801059c <_free_r>:
 801059c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801059e:	2900      	cmp	r1, #0
 80105a0:	d044      	beq.n	801062c <_free_r+0x90>
 80105a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105a6:	9001      	str	r0, [sp, #4]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	f1a1 0404 	sub.w	r4, r1, #4
 80105ae:	bfb8      	it	lt
 80105b0:	18e4      	addlt	r4, r4, r3
 80105b2:	f000 ff47 	bl	8011444 <__malloc_lock>
 80105b6:	4a1e      	ldr	r2, [pc, #120]	; (8010630 <_free_r+0x94>)
 80105b8:	9801      	ldr	r0, [sp, #4]
 80105ba:	6813      	ldr	r3, [r2, #0]
 80105bc:	b933      	cbnz	r3, 80105cc <_free_r+0x30>
 80105be:	6063      	str	r3, [r4, #4]
 80105c0:	6014      	str	r4, [r2, #0]
 80105c2:	b003      	add	sp, #12
 80105c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105c8:	f000 bf42 	b.w	8011450 <__malloc_unlock>
 80105cc:	42a3      	cmp	r3, r4
 80105ce:	d908      	bls.n	80105e2 <_free_r+0x46>
 80105d0:	6825      	ldr	r5, [r4, #0]
 80105d2:	1961      	adds	r1, r4, r5
 80105d4:	428b      	cmp	r3, r1
 80105d6:	bf01      	itttt	eq
 80105d8:	6819      	ldreq	r1, [r3, #0]
 80105da:	685b      	ldreq	r3, [r3, #4]
 80105dc:	1949      	addeq	r1, r1, r5
 80105de:	6021      	streq	r1, [r4, #0]
 80105e0:	e7ed      	b.n	80105be <_free_r+0x22>
 80105e2:	461a      	mov	r2, r3
 80105e4:	685b      	ldr	r3, [r3, #4]
 80105e6:	b10b      	cbz	r3, 80105ec <_free_r+0x50>
 80105e8:	42a3      	cmp	r3, r4
 80105ea:	d9fa      	bls.n	80105e2 <_free_r+0x46>
 80105ec:	6811      	ldr	r1, [r2, #0]
 80105ee:	1855      	adds	r5, r2, r1
 80105f0:	42a5      	cmp	r5, r4
 80105f2:	d10b      	bne.n	801060c <_free_r+0x70>
 80105f4:	6824      	ldr	r4, [r4, #0]
 80105f6:	4421      	add	r1, r4
 80105f8:	1854      	adds	r4, r2, r1
 80105fa:	42a3      	cmp	r3, r4
 80105fc:	6011      	str	r1, [r2, #0]
 80105fe:	d1e0      	bne.n	80105c2 <_free_r+0x26>
 8010600:	681c      	ldr	r4, [r3, #0]
 8010602:	685b      	ldr	r3, [r3, #4]
 8010604:	6053      	str	r3, [r2, #4]
 8010606:	4421      	add	r1, r4
 8010608:	6011      	str	r1, [r2, #0]
 801060a:	e7da      	b.n	80105c2 <_free_r+0x26>
 801060c:	d902      	bls.n	8010614 <_free_r+0x78>
 801060e:	230c      	movs	r3, #12
 8010610:	6003      	str	r3, [r0, #0]
 8010612:	e7d6      	b.n	80105c2 <_free_r+0x26>
 8010614:	6825      	ldr	r5, [r4, #0]
 8010616:	1961      	adds	r1, r4, r5
 8010618:	428b      	cmp	r3, r1
 801061a:	bf04      	itt	eq
 801061c:	6819      	ldreq	r1, [r3, #0]
 801061e:	685b      	ldreq	r3, [r3, #4]
 8010620:	6063      	str	r3, [r4, #4]
 8010622:	bf04      	itt	eq
 8010624:	1949      	addeq	r1, r1, r5
 8010626:	6021      	streq	r1, [r4, #0]
 8010628:	6054      	str	r4, [r2, #4]
 801062a:	e7ca      	b.n	80105c2 <_free_r+0x26>
 801062c:	b003      	add	sp, #12
 801062e:	bd30      	pop	{r4, r5, pc}
 8010630:	2001fc20 	.word	0x2001fc20

08010634 <sbrk_aligned>:
 8010634:	b570      	push	{r4, r5, r6, lr}
 8010636:	4e0e      	ldr	r6, [pc, #56]	; (8010670 <sbrk_aligned+0x3c>)
 8010638:	460c      	mov	r4, r1
 801063a:	6831      	ldr	r1, [r6, #0]
 801063c:	4605      	mov	r5, r0
 801063e:	b911      	cbnz	r1, 8010646 <sbrk_aligned+0x12>
 8010640:	f000 fc08 	bl	8010e54 <_sbrk_r>
 8010644:	6030      	str	r0, [r6, #0]
 8010646:	4621      	mov	r1, r4
 8010648:	4628      	mov	r0, r5
 801064a:	f000 fc03 	bl	8010e54 <_sbrk_r>
 801064e:	1c43      	adds	r3, r0, #1
 8010650:	d00a      	beq.n	8010668 <sbrk_aligned+0x34>
 8010652:	1cc4      	adds	r4, r0, #3
 8010654:	f024 0403 	bic.w	r4, r4, #3
 8010658:	42a0      	cmp	r0, r4
 801065a:	d007      	beq.n	801066c <sbrk_aligned+0x38>
 801065c:	1a21      	subs	r1, r4, r0
 801065e:	4628      	mov	r0, r5
 8010660:	f000 fbf8 	bl	8010e54 <_sbrk_r>
 8010664:	3001      	adds	r0, #1
 8010666:	d101      	bne.n	801066c <sbrk_aligned+0x38>
 8010668:	f04f 34ff 	mov.w	r4, #4294967295
 801066c:	4620      	mov	r0, r4
 801066e:	bd70      	pop	{r4, r5, r6, pc}
 8010670:	2001fc24 	.word	0x2001fc24

08010674 <_malloc_r>:
 8010674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010678:	1ccd      	adds	r5, r1, #3
 801067a:	f025 0503 	bic.w	r5, r5, #3
 801067e:	3508      	adds	r5, #8
 8010680:	2d0c      	cmp	r5, #12
 8010682:	bf38      	it	cc
 8010684:	250c      	movcc	r5, #12
 8010686:	2d00      	cmp	r5, #0
 8010688:	4607      	mov	r7, r0
 801068a:	db01      	blt.n	8010690 <_malloc_r+0x1c>
 801068c:	42a9      	cmp	r1, r5
 801068e:	d905      	bls.n	801069c <_malloc_r+0x28>
 8010690:	230c      	movs	r3, #12
 8010692:	603b      	str	r3, [r7, #0]
 8010694:	2600      	movs	r6, #0
 8010696:	4630      	mov	r0, r6
 8010698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801069c:	4e2e      	ldr	r6, [pc, #184]	; (8010758 <_malloc_r+0xe4>)
 801069e:	f000 fed1 	bl	8011444 <__malloc_lock>
 80106a2:	6833      	ldr	r3, [r6, #0]
 80106a4:	461c      	mov	r4, r3
 80106a6:	bb34      	cbnz	r4, 80106f6 <_malloc_r+0x82>
 80106a8:	4629      	mov	r1, r5
 80106aa:	4638      	mov	r0, r7
 80106ac:	f7ff ffc2 	bl	8010634 <sbrk_aligned>
 80106b0:	1c43      	adds	r3, r0, #1
 80106b2:	4604      	mov	r4, r0
 80106b4:	d14d      	bne.n	8010752 <_malloc_r+0xde>
 80106b6:	6834      	ldr	r4, [r6, #0]
 80106b8:	4626      	mov	r6, r4
 80106ba:	2e00      	cmp	r6, #0
 80106bc:	d140      	bne.n	8010740 <_malloc_r+0xcc>
 80106be:	6823      	ldr	r3, [r4, #0]
 80106c0:	4631      	mov	r1, r6
 80106c2:	4638      	mov	r0, r7
 80106c4:	eb04 0803 	add.w	r8, r4, r3
 80106c8:	f000 fbc4 	bl	8010e54 <_sbrk_r>
 80106cc:	4580      	cmp	r8, r0
 80106ce:	d13a      	bne.n	8010746 <_malloc_r+0xd2>
 80106d0:	6821      	ldr	r1, [r4, #0]
 80106d2:	3503      	adds	r5, #3
 80106d4:	1a6d      	subs	r5, r5, r1
 80106d6:	f025 0503 	bic.w	r5, r5, #3
 80106da:	3508      	adds	r5, #8
 80106dc:	2d0c      	cmp	r5, #12
 80106de:	bf38      	it	cc
 80106e0:	250c      	movcc	r5, #12
 80106e2:	4629      	mov	r1, r5
 80106e4:	4638      	mov	r0, r7
 80106e6:	f7ff ffa5 	bl	8010634 <sbrk_aligned>
 80106ea:	3001      	adds	r0, #1
 80106ec:	d02b      	beq.n	8010746 <_malloc_r+0xd2>
 80106ee:	6823      	ldr	r3, [r4, #0]
 80106f0:	442b      	add	r3, r5
 80106f2:	6023      	str	r3, [r4, #0]
 80106f4:	e00e      	b.n	8010714 <_malloc_r+0xa0>
 80106f6:	6822      	ldr	r2, [r4, #0]
 80106f8:	1b52      	subs	r2, r2, r5
 80106fa:	d41e      	bmi.n	801073a <_malloc_r+0xc6>
 80106fc:	2a0b      	cmp	r2, #11
 80106fe:	d916      	bls.n	801072e <_malloc_r+0xba>
 8010700:	1961      	adds	r1, r4, r5
 8010702:	42a3      	cmp	r3, r4
 8010704:	6025      	str	r5, [r4, #0]
 8010706:	bf18      	it	ne
 8010708:	6059      	strne	r1, [r3, #4]
 801070a:	6863      	ldr	r3, [r4, #4]
 801070c:	bf08      	it	eq
 801070e:	6031      	streq	r1, [r6, #0]
 8010710:	5162      	str	r2, [r4, r5]
 8010712:	604b      	str	r3, [r1, #4]
 8010714:	4638      	mov	r0, r7
 8010716:	f104 060b 	add.w	r6, r4, #11
 801071a:	f000 fe99 	bl	8011450 <__malloc_unlock>
 801071e:	f026 0607 	bic.w	r6, r6, #7
 8010722:	1d23      	adds	r3, r4, #4
 8010724:	1af2      	subs	r2, r6, r3
 8010726:	d0b6      	beq.n	8010696 <_malloc_r+0x22>
 8010728:	1b9b      	subs	r3, r3, r6
 801072a:	50a3      	str	r3, [r4, r2]
 801072c:	e7b3      	b.n	8010696 <_malloc_r+0x22>
 801072e:	6862      	ldr	r2, [r4, #4]
 8010730:	42a3      	cmp	r3, r4
 8010732:	bf0c      	ite	eq
 8010734:	6032      	streq	r2, [r6, #0]
 8010736:	605a      	strne	r2, [r3, #4]
 8010738:	e7ec      	b.n	8010714 <_malloc_r+0xa0>
 801073a:	4623      	mov	r3, r4
 801073c:	6864      	ldr	r4, [r4, #4]
 801073e:	e7b2      	b.n	80106a6 <_malloc_r+0x32>
 8010740:	4634      	mov	r4, r6
 8010742:	6876      	ldr	r6, [r6, #4]
 8010744:	e7b9      	b.n	80106ba <_malloc_r+0x46>
 8010746:	230c      	movs	r3, #12
 8010748:	603b      	str	r3, [r7, #0]
 801074a:	4638      	mov	r0, r7
 801074c:	f000 fe80 	bl	8011450 <__malloc_unlock>
 8010750:	e7a1      	b.n	8010696 <_malloc_r+0x22>
 8010752:	6025      	str	r5, [r4, #0]
 8010754:	e7de      	b.n	8010714 <_malloc_r+0xa0>
 8010756:	bf00      	nop
 8010758:	2001fc20 	.word	0x2001fc20

0801075c <__sfputc_r>:
 801075c:	6893      	ldr	r3, [r2, #8]
 801075e:	3b01      	subs	r3, #1
 8010760:	2b00      	cmp	r3, #0
 8010762:	b410      	push	{r4}
 8010764:	6093      	str	r3, [r2, #8]
 8010766:	da08      	bge.n	801077a <__sfputc_r+0x1e>
 8010768:	6994      	ldr	r4, [r2, #24]
 801076a:	42a3      	cmp	r3, r4
 801076c:	db01      	blt.n	8010772 <__sfputc_r+0x16>
 801076e:	290a      	cmp	r1, #10
 8010770:	d103      	bne.n	801077a <__sfputc_r+0x1e>
 8010772:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010776:	f000 bb7d 	b.w	8010e74 <__swbuf_r>
 801077a:	6813      	ldr	r3, [r2, #0]
 801077c:	1c58      	adds	r0, r3, #1
 801077e:	6010      	str	r0, [r2, #0]
 8010780:	7019      	strb	r1, [r3, #0]
 8010782:	4608      	mov	r0, r1
 8010784:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010788:	4770      	bx	lr

0801078a <__sfputs_r>:
 801078a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801078c:	4606      	mov	r6, r0
 801078e:	460f      	mov	r7, r1
 8010790:	4614      	mov	r4, r2
 8010792:	18d5      	adds	r5, r2, r3
 8010794:	42ac      	cmp	r4, r5
 8010796:	d101      	bne.n	801079c <__sfputs_r+0x12>
 8010798:	2000      	movs	r0, #0
 801079a:	e007      	b.n	80107ac <__sfputs_r+0x22>
 801079c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107a0:	463a      	mov	r2, r7
 80107a2:	4630      	mov	r0, r6
 80107a4:	f7ff ffda 	bl	801075c <__sfputc_r>
 80107a8:	1c43      	adds	r3, r0, #1
 80107aa:	d1f3      	bne.n	8010794 <__sfputs_r+0xa>
 80107ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080107b0 <_vfiprintf_r>:
 80107b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107b4:	460d      	mov	r5, r1
 80107b6:	b09d      	sub	sp, #116	; 0x74
 80107b8:	4614      	mov	r4, r2
 80107ba:	4698      	mov	r8, r3
 80107bc:	4606      	mov	r6, r0
 80107be:	b118      	cbz	r0, 80107c8 <_vfiprintf_r+0x18>
 80107c0:	6983      	ldr	r3, [r0, #24]
 80107c2:	b90b      	cbnz	r3, 80107c8 <_vfiprintf_r+0x18>
 80107c4:	f000 fd38 	bl	8011238 <__sinit>
 80107c8:	4b89      	ldr	r3, [pc, #548]	; (80109f0 <_vfiprintf_r+0x240>)
 80107ca:	429d      	cmp	r5, r3
 80107cc:	d11b      	bne.n	8010806 <_vfiprintf_r+0x56>
 80107ce:	6875      	ldr	r5, [r6, #4]
 80107d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80107d2:	07d9      	lsls	r1, r3, #31
 80107d4:	d405      	bmi.n	80107e2 <_vfiprintf_r+0x32>
 80107d6:	89ab      	ldrh	r3, [r5, #12]
 80107d8:	059a      	lsls	r2, r3, #22
 80107da:	d402      	bmi.n	80107e2 <_vfiprintf_r+0x32>
 80107dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80107de:	f000 fdc9 	bl	8011374 <__retarget_lock_acquire_recursive>
 80107e2:	89ab      	ldrh	r3, [r5, #12]
 80107e4:	071b      	lsls	r3, r3, #28
 80107e6:	d501      	bpl.n	80107ec <_vfiprintf_r+0x3c>
 80107e8:	692b      	ldr	r3, [r5, #16]
 80107ea:	b9eb      	cbnz	r3, 8010828 <_vfiprintf_r+0x78>
 80107ec:	4629      	mov	r1, r5
 80107ee:	4630      	mov	r0, r6
 80107f0:	f000 fb92 	bl	8010f18 <__swsetup_r>
 80107f4:	b1c0      	cbz	r0, 8010828 <_vfiprintf_r+0x78>
 80107f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80107f8:	07dc      	lsls	r4, r3, #31
 80107fa:	d50e      	bpl.n	801081a <_vfiprintf_r+0x6a>
 80107fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010800:	b01d      	add	sp, #116	; 0x74
 8010802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010806:	4b7b      	ldr	r3, [pc, #492]	; (80109f4 <_vfiprintf_r+0x244>)
 8010808:	429d      	cmp	r5, r3
 801080a:	d101      	bne.n	8010810 <_vfiprintf_r+0x60>
 801080c:	68b5      	ldr	r5, [r6, #8]
 801080e:	e7df      	b.n	80107d0 <_vfiprintf_r+0x20>
 8010810:	4b79      	ldr	r3, [pc, #484]	; (80109f8 <_vfiprintf_r+0x248>)
 8010812:	429d      	cmp	r5, r3
 8010814:	bf08      	it	eq
 8010816:	68f5      	ldreq	r5, [r6, #12]
 8010818:	e7da      	b.n	80107d0 <_vfiprintf_r+0x20>
 801081a:	89ab      	ldrh	r3, [r5, #12]
 801081c:	0598      	lsls	r0, r3, #22
 801081e:	d4ed      	bmi.n	80107fc <_vfiprintf_r+0x4c>
 8010820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010822:	f000 fda8 	bl	8011376 <__retarget_lock_release_recursive>
 8010826:	e7e9      	b.n	80107fc <_vfiprintf_r+0x4c>
 8010828:	2300      	movs	r3, #0
 801082a:	9309      	str	r3, [sp, #36]	; 0x24
 801082c:	2320      	movs	r3, #32
 801082e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010832:	f8cd 800c 	str.w	r8, [sp, #12]
 8010836:	2330      	movs	r3, #48	; 0x30
 8010838:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80109fc <_vfiprintf_r+0x24c>
 801083c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010840:	f04f 0901 	mov.w	r9, #1
 8010844:	4623      	mov	r3, r4
 8010846:	469a      	mov	sl, r3
 8010848:	f813 2b01 	ldrb.w	r2, [r3], #1
 801084c:	b10a      	cbz	r2, 8010852 <_vfiprintf_r+0xa2>
 801084e:	2a25      	cmp	r2, #37	; 0x25
 8010850:	d1f9      	bne.n	8010846 <_vfiprintf_r+0x96>
 8010852:	ebba 0b04 	subs.w	fp, sl, r4
 8010856:	d00b      	beq.n	8010870 <_vfiprintf_r+0xc0>
 8010858:	465b      	mov	r3, fp
 801085a:	4622      	mov	r2, r4
 801085c:	4629      	mov	r1, r5
 801085e:	4630      	mov	r0, r6
 8010860:	f7ff ff93 	bl	801078a <__sfputs_r>
 8010864:	3001      	adds	r0, #1
 8010866:	f000 80aa 	beq.w	80109be <_vfiprintf_r+0x20e>
 801086a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801086c:	445a      	add	r2, fp
 801086e:	9209      	str	r2, [sp, #36]	; 0x24
 8010870:	f89a 3000 	ldrb.w	r3, [sl]
 8010874:	2b00      	cmp	r3, #0
 8010876:	f000 80a2 	beq.w	80109be <_vfiprintf_r+0x20e>
 801087a:	2300      	movs	r3, #0
 801087c:	f04f 32ff 	mov.w	r2, #4294967295
 8010880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010884:	f10a 0a01 	add.w	sl, sl, #1
 8010888:	9304      	str	r3, [sp, #16]
 801088a:	9307      	str	r3, [sp, #28]
 801088c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010890:	931a      	str	r3, [sp, #104]	; 0x68
 8010892:	4654      	mov	r4, sl
 8010894:	2205      	movs	r2, #5
 8010896:	f814 1b01 	ldrb.w	r1, [r4], #1
 801089a:	4858      	ldr	r0, [pc, #352]	; (80109fc <_vfiprintf_r+0x24c>)
 801089c:	f7ef fca8 	bl	80001f0 <memchr>
 80108a0:	9a04      	ldr	r2, [sp, #16]
 80108a2:	b9d8      	cbnz	r0, 80108dc <_vfiprintf_r+0x12c>
 80108a4:	06d1      	lsls	r1, r2, #27
 80108a6:	bf44      	itt	mi
 80108a8:	2320      	movmi	r3, #32
 80108aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108ae:	0713      	lsls	r3, r2, #28
 80108b0:	bf44      	itt	mi
 80108b2:	232b      	movmi	r3, #43	; 0x2b
 80108b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108b8:	f89a 3000 	ldrb.w	r3, [sl]
 80108bc:	2b2a      	cmp	r3, #42	; 0x2a
 80108be:	d015      	beq.n	80108ec <_vfiprintf_r+0x13c>
 80108c0:	9a07      	ldr	r2, [sp, #28]
 80108c2:	4654      	mov	r4, sl
 80108c4:	2000      	movs	r0, #0
 80108c6:	f04f 0c0a 	mov.w	ip, #10
 80108ca:	4621      	mov	r1, r4
 80108cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108d0:	3b30      	subs	r3, #48	; 0x30
 80108d2:	2b09      	cmp	r3, #9
 80108d4:	d94e      	bls.n	8010974 <_vfiprintf_r+0x1c4>
 80108d6:	b1b0      	cbz	r0, 8010906 <_vfiprintf_r+0x156>
 80108d8:	9207      	str	r2, [sp, #28]
 80108da:	e014      	b.n	8010906 <_vfiprintf_r+0x156>
 80108dc:	eba0 0308 	sub.w	r3, r0, r8
 80108e0:	fa09 f303 	lsl.w	r3, r9, r3
 80108e4:	4313      	orrs	r3, r2
 80108e6:	9304      	str	r3, [sp, #16]
 80108e8:	46a2      	mov	sl, r4
 80108ea:	e7d2      	b.n	8010892 <_vfiprintf_r+0xe2>
 80108ec:	9b03      	ldr	r3, [sp, #12]
 80108ee:	1d19      	adds	r1, r3, #4
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	9103      	str	r1, [sp, #12]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	bfbb      	ittet	lt
 80108f8:	425b      	neglt	r3, r3
 80108fa:	f042 0202 	orrlt.w	r2, r2, #2
 80108fe:	9307      	strge	r3, [sp, #28]
 8010900:	9307      	strlt	r3, [sp, #28]
 8010902:	bfb8      	it	lt
 8010904:	9204      	strlt	r2, [sp, #16]
 8010906:	7823      	ldrb	r3, [r4, #0]
 8010908:	2b2e      	cmp	r3, #46	; 0x2e
 801090a:	d10c      	bne.n	8010926 <_vfiprintf_r+0x176>
 801090c:	7863      	ldrb	r3, [r4, #1]
 801090e:	2b2a      	cmp	r3, #42	; 0x2a
 8010910:	d135      	bne.n	801097e <_vfiprintf_r+0x1ce>
 8010912:	9b03      	ldr	r3, [sp, #12]
 8010914:	1d1a      	adds	r2, r3, #4
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	9203      	str	r2, [sp, #12]
 801091a:	2b00      	cmp	r3, #0
 801091c:	bfb8      	it	lt
 801091e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010922:	3402      	adds	r4, #2
 8010924:	9305      	str	r3, [sp, #20]
 8010926:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010a0c <_vfiprintf_r+0x25c>
 801092a:	7821      	ldrb	r1, [r4, #0]
 801092c:	2203      	movs	r2, #3
 801092e:	4650      	mov	r0, sl
 8010930:	f7ef fc5e 	bl	80001f0 <memchr>
 8010934:	b140      	cbz	r0, 8010948 <_vfiprintf_r+0x198>
 8010936:	2340      	movs	r3, #64	; 0x40
 8010938:	eba0 000a 	sub.w	r0, r0, sl
 801093c:	fa03 f000 	lsl.w	r0, r3, r0
 8010940:	9b04      	ldr	r3, [sp, #16]
 8010942:	4303      	orrs	r3, r0
 8010944:	3401      	adds	r4, #1
 8010946:	9304      	str	r3, [sp, #16]
 8010948:	f814 1b01 	ldrb.w	r1, [r4], #1
 801094c:	482c      	ldr	r0, [pc, #176]	; (8010a00 <_vfiprintf_r+0x250>)
 801094e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010952:	2206      	movs	r2, #6
 8010954:	f7ef fc4c 	bl	80001f0 <memchr>
 8010958:	2800      	cmp	r0, #0
 801095a:	d03f      	beq.n	80109dc <_vfiprintf_r+0x22c>
 801095c:	4b29      	ldr	r3, [pc, #164]	; (8010a04 <_vfiprintf_r+0x254>)
 801095e:	bb1b      	cbnz	r3, 80109a8 <_vfiprintf_r+0x1f8>
 8010960:	9b03      	ldr	r3, [sp, #12]
 8010962:	3307      	adds	r3, #7
 8010964:	f023 0307 	bic.w	r3, r3, #7
 8010968:	3308      	adds	r3, #8
 801096a:	9303      	str	r3, [sp, #12]
 801096c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801096e:	443b      	add	r3, r7
 8010970:	9309      	str	r3, [sp, #36]	; 0x24
 8010972:	e767      	b.n	8010844 <_vfiprintf_r+0x94>
 8010974:	fb0c 3202 	mla	r2, ip, r2, r3
 8010978:	460c      	mov	r4, r1
 801097a:	2001      	movs	r0, #1
 801097c:	e7a5      	b.n	80108ca <_vfiprintf_r+0x11a>
 801097e:	2300      	movs	r3, #0
 8010980:	3401      	adds	r4, #1
 8010982:	9305      	str	r3, [sp, #20]
 8010984:	4619      	mov	r1, r3
 8010986:	f04f 0c0a 	mov.w	ip, #10
 801098a:	4620      	mov	r0, r4
 801098c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010990:	3a30      	subs	r2, #48	; 0x30
 8010992:	2a09      	cmp	r2, #9
 8010994:	d903      	bls.n	801099e <_vfiprintf_r+0x1ee>
 8010996:	2b00      	cmp	r3, #0
 8010998:	d0c5      	beq.n	8010926 <_vfiprintf_r+0x176>
 801099a:	9105      	str	r1, [sp, #20]
 801099c:	e7c3      	b.n	8010926 <_vfiprintf_r+0x176>
 801099e:	fb0c 2101 	mla	r1, ip, r1, r2
 80109a2:	4604      	mov	r4, r0
 80109a4:	2301      	movs	r3, #1
 80109a6:	e7f0      	b.n	801098a <_vfiprintf_r+0x1da>
 80109a8:	ab03      	add	r3, sp, #12
 80109aa:	9300      	str	r3, [sp, #0]
 80109ac:	462a      	mov	r2, r5
 80109ae:	4b16      	ldr	r3, [pc, #88]	; (8010a08 <_vfiprintf_r+0x258>)
 80109b0:	a904      	add	r1, sp, #16
 80109b2:	4630      	mov	r0, r6
 80109b4:	f3af 8000 	nop.w
 80109b8:	4607      	mov	r7, r0
 80109ba:	1c78      	adds	r0, r7, #1
 80109bc:	d1d6      	bne.n	801096c <_vfiprintf_r+0x1bc>
 80109be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109c0:	07d9      	lsls	r1, r3, #31
 80109c2:	d405      	bmi.n	80109d0 <_vfiprintf_r+0x220>
 80109c4:	89ab      	ldrh	r3, [r5, #12]
 80109c6:	059a      	lsls	r2, r3, #22
 80109c8:	d402      	bmi.n	80109d0 <_vfiprintf_r+0x220>
 80109ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80109cc:	f000 fcd3 	bl	8011376 <__retarget_lock_release_recursive>
 80109d0:	89ab      	ldrh	r3, [r5, #12]
 80109d2:	065b      	lsls	r3, r3, #25
 80109d4:	f53f af12 	bmi.w	80107fc <_vfiprintf_r+0x4c>
 80109d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80109da:	e711      	b.n	8010800 <_vfiprintf_r+0x50>
 80109dc:	ab03      	add	r3, sp, #12
 80109de:	9300      	str	r3, [sp, #0]
 80109e0:	462a      	mov	r2, r5
 80109e2:	4b09      	ldr	r3, [pc, #36]	; (8010a08 <_vfiprintf_r+0x258>)
 80109e4:	a904      	add	r1, sp, #16
 80109e6:	4630      	mov	r0, r6
 80109e8:	f000 f880 	bl	8010aec <_printf_i>
 80109ec:	e7e4      	b.n	80109b8 <_vfiprintf_r+0x208>
 80109ee:	bf00      	nop
 80109f0:	080124f0 	.word	0x080124f0
 80109f4:	08012510 	.word	0x08012510
 80109f8:	080124d0 	.word	0x080124d0
 80109fc:	0801249c 	.word	0x0801249c
 8010a00:	080124a6 	.word	0x080124a6
 8010a04:	00000000 	.word	0x00000000
 8010a08:	0801078b 	.word	0x0801078b
 8010a0c:	080124a2 	.word	0x080124a2

08010a10 <_printf_common>:
 8010a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a14:	4616      	mov	r6, r2
 8010a16:	4699      	mov	r9, r3
 8010a18:	688a      	ldr	r2, [r1, #8]
 8010a1a:	690b      	ldr	r3, [r1, #16]
 8010a1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010a20:	4293      	cmp	r3, r2
 8010a22:	bfb8      	it	lt
 8010a24:	4613      	movlt	r3, r2
 8010a26:	6033      	str	r3, [r6, #0]
 8010a28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010a2c:	4607      	mov	r7, r0
 8010a2e:	460c      	mov	r4, r1
 8010a30:	b10a      	cbz	r2, 8010a36 <_printf_common+0x26>
 8010a32:	3301      	adds	r3, #1
 8010a34:	6033      	str	r3, [r6, #0]
 8010a36:	6823      	ldr	r3, [r4, #0]
 8010a38:	0699      	lsls	r1, r3, #26
 8010a3a:	bf42      	ittt	mi
 8010a3c:	6833      	ldrmi	r3, [r6, #0]
 8010a3e:	3302      	addmi	r3, #2
 8010a40:	6033      	strmi	r3, [r6, #0]
 8010a42:	6825      	ldr	r5, [r4, #0]
 8010a44:	f015 0506 	ands.w	r5, r5, #6
 8010a48:	d106      	bne.n	8010a58 <_printf_common+0x48>
 8010a4a:	f104 0a19 	add.w	sl, r4, #25
 8010a4e:	68e3      	ldr	r3, [r4, #12]
 8010a50:	6832      	ldr	r2, [r6, #0]
 8010a52:	1a9b      	subs	r3, r3, r2
 8010a54:	42ab      	cmp	r3, r5
 8010a56:	dc26      	bgt.n	8010aa6 <_printf_common+0x96>
 8010a58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010a5c:	1e13      	subs	r3, r2, #0
 8010a5e:	6822      	ldr	r2, [r4, #0]
 8010a60:	bf18      	it	ne
 8010a62:	2301      	movne	r3, #1
 8010a64:	0692      	lsls	r2, r2, #26
 8010a66:	d42b      	bmi.n	8010ac0 <_printf_common+0xb0>
 8010a68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a6c:	4649      	mov	r1, r9
 8010a6e:	4638      	mov	r0, r7
 8010a70:	47c0      	blx	r8
 8010a72:	3001      	adds	r0, #1
 8010a74:	d01e      	beq.n	8010ab4 <_printf_common+0xa4>
 8010a76:	6823      	ldr	r3, [r4, #0]
 8010a78:	68e5      	ldr	r5, [r4, #12]
 8010a7a:	6832      	ldr	r2, [r6, #0]
 8010a7c:	f003 0306 	and.w	r3, r3, #6
 8010a80:	2b04      	cmp	r3, #4
 8010a82:	bf08      	it	eq
 8010a84:	1aad      	subeq	r5, r5, r2
 8010a86:	68a3      	ldr	r3, [r4, #8]
 8010a88:	6922      	ldr	r2, [r4, #16]
 8010a8a:	bf0c      	ite	eq
 8010a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a90:	2500      	movne	r5, #0
 8010a92:	4293      	cmp	r3, r2
 8010a94:	bfc4      	itt	gt
 8010a96:	1a9b      	subgt	r3, r3, r2
 8010a98:	18ed      	addgt	r5, r5, r3
 8010a9a:	2600      	movs	r6, #0
 8010a9c:	341a      	adds	r4, #26
 8010a9e:	42b5      	cmp	r5, r6
 8010aa0:	d11a      	bne.n	8010ad8 <_printf_common+0xc8>
 8010aa2:	2000      	movs	r0, #0
 8010aa4:	e008      	b.n	8010ab8 <_printf_common+0xa8>
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	4652      	mov	r2, sl
 8010aaa:	4649      	mov	r1, r9
 8010aac:	4638      	mov	r0, r7
 8010aae:	47c0      	blx	r8
 8010ab0:	3001      	adds	r0, #1
 8010ab2:	d103      	bne.n	8010abc <_printf_common+0xac>
 8010ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010abc:	3501      	adds	r5, #1
 8010abe:	e7c6      	b.n	8010a4e <_printf_common+0x3e>
 8010ac0:	18e1      	adds	r1, r4, r3
 8010ac2:	1c5a      	adds	r2, r3, #1
 8010ac4:	2030      	movs	r0, #48	; 0x30
 8010ac6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010aca:	4422      	add	r2, r4
 8010acc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010ad0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010ad4:	3302      	adds	r3, #2
 8010ad6:	e7c7      	b.n	8010a68 <_printf_common+0x58>
 8010ad8:	2301      	movs	r3, #1
 8010ada:	4622      	mov	r2, r4
 8010adc:	4649      	mov	r1, r9
 8010ade:	4638      	mov	r0, r7
 8010ae0:	47c0      	blx	r8
 8010ae2:	3001      	adds	r0, #1
 8010ae4:	d0e6      	beq.n	8010ab4 <_printf_common+0xa4>
 8010ae6:	3601      	adds	r6, #1
 8010ae8:	e7d9      	b.n	8010a9e <_printf_common+0x8e>
	...

08010aec <_printf_i>:
 8010aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010af0:	7e0f      	ldrb	r7, [r1, #24]
 8010af2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010af4:	2f78      	cmp	r7, #120	; 0x78
 8010af6:	4691      	mov	r9, r2
 8010af8:	4680      	mov	r8, r0
 8010afa:	460c      	mov	r4, r1
 8010afc:	469a      	mov	sl, r3
 8010afe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010b02:	d807      	bhi.n	8010b14 <_printf_i+0x28>
 8010b04:	2f62      	cmp	r7, #98	; 0x62
 8010b06:	d80a      	bhi.n	8010b1e <_printf_i+0x32>
 8010b08:	2f00      	cmp	r7, #0
 8010b0a:	f000 80d8 	beq.w	8010cbe <_printf_i+0x1d2>
 8010b0e:	2f58      	cmp	r7, #88	; 0x58
 8010b10:	f000 80a3 	beq.w	8010c5a <_printf_i+0x16e>
 8010b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010b1c:	e03a      	b.n	8010b94 <_printf_i+0xa8>
 8010b1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010b22:	2b15      	cmp	r3, #21
 8010b24:	d8f6      	bhi.n	8010b14 <_printf_i+0x28>
 8010b26:	a101      	add	r1, pc, #4	; (adr r1, 8010b2c <_printf_i+0x40>)
 8010b28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010b2c:	08010b85 	.word	0x08010b85
 8010b30:	08010b99 	.word	0x08010b99
 8010b34:	08010b15 	.word	0x08010b15
 8010b38:	08010b15 	.word	0x08010b15
 8010b3c:	08010b15 	.word	0x08010b15
 8010b40:	08010b15 	.word	0x08010b15
 8010b44:	08010b99 	.word	0x08010b99
 8010b48:	08010b15 	.word	0x08010b15
 8010b4c:	08010b15 	.word	0x08010b15
 8010b50:	08010b15 	.word	0x08010b15
 8010b54:	08010b15 	.word	0x08010b15
 8010b58:	08010ca5 	.word	0x08010ca5
 8010b5c:	08010bc9 	.word	0x08010bc9
 8010b60:	08010c87 	.word	0x08010c87
 8010b64:	08010b15 	.word	0x08010b15
 8010b68:	08010b15 	.word	0x08010b15
 8010b6c:	08010cc7 	.word	0x08010cc7
 8010b70:	08010b15 	.word	0x08010b15
 8010b74:	08010bc9 	.word	0x08010bc9
 8010b78:	08010b15 	.word	0x08010b15
 8010b7c:	08010b15 	.word	0x08010b15
 8010b80:	08010c8f 	.word	0x08010c8f
 8010b84:	682b      	ldr	r3, [r5, #0]
 8010b86:	1d1a      	adds	r2, r3, #4
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	602a      	str	r2, [r5, #0]
 8010b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b94:	2301      	movs	r3, #1
 8010b96:	e0a3      	b.n	8010ce0 <_printf_i+0x1f4>
 8010b98:	6820      	ldr	r0, [r4, #0]
 8010b9a:	6829      	ldr	r1, [r5, #0]
 8010b9c:	0606      	lsls	r6, r0, #24
 8010b9e:	f101 0304 	add.w	r3, r1, #4
 8010ba2:	d50a      	bpl.n	8010bba <_printf_i+0xce>
 8010ba4:	680e      	ldr	r6, [r1, #0]
 8010ba6:	602b      	str	r3, [r5, #0]
 8010ba8:	2e00      	cmp	r6, #0
 8010baa:	da03      	bge.n	8010bb4 <_printf_i+0xc8>
 8010bac:	232d      	movs	r3, #45	; 0x2d
 8010bae:	4276      	negs	r6, r6
 8010bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bb4:	485e      	ldr	r0, [pc, #376]	; (8010d30 <_printf_i+0x244>)
 8010bb6:	230a      	movs	r3, #10
 8010bb8:	e019      	b.n	8010bee <_printf_i+0x102>
 8010bba:	680e      	ldr	r6, [r1, #0]
 8010bbc:	602b      	str	r3, [r5, #0]
 8010bbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010bc2:	bf18      	it	ne
 8010bc4:	b236      	sxthne	r6, r6
 8010bc6:	e7ef      	b.n	8010ba8 <_printf_i+0xbc>
 8010bc8:	682b      	ldr	r3, [r5, #0]
 8010bca:	6820      	ldr	r0, [r4, #0]
 8010bcc:	1d19      	adds	r1, r3, #4
 8010bce:	6029      	str	r1, [r5, #0]
 8010bd0:	0601      	lsls	r1, r0, #24
 8010bd2:	d501      	bpl.n	8010bd8 <_printf_i+0xec>
 8010bd4:	681e      	ldr	r6, [r3, #0]
 8010bd6:	e002      	b.n	8010bde <_printf_i+0xf2>
 8010bd8:	0646      	lsls	r6, r0, #25
 8010bda:	d5fb      	bpl.n	8010bd4 <_printf_i+0xe8>
 8010bdc:	881e      	ldrh	r6, [r3, #0]
 8010bde:	4854      	ldr	r0, [pc, #336]	; (8010d30 <_printf_i+0x244>)
 8010be0:	2f6f      	cmp	r7, #111	; 0x6f
 8010be2:	bf0c      	ite	eq
 8010be4:	2308      	moveq	r3, #8
 8010be6:	230a      	movne	r3, #10
 8010be8:	2100      	movs	r1, #0
 8010bea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010bee:	6865      	ldr	r5, [r4, #4]
 8010bf0:	60a5      	str	r5, [r4, #8]
 8010bf2:	2d00      	cmp	r5, #0
 8010bf4:	bfa2      	ittt	ge
 8010bf6:	6821      	ldrge	r1, [r4, #0]
 8010bf8:	f021 0104 	bicge.w	r1, r1, #4
 8010bfc:	6021      	strge	r1, [r4, #0]
 8010bfe:	b90e      	cbnz	r6, 8010c04 <_printf_i+0x118>
 8010c00:	2d00      	cmp	r5, #0
 8010c02:	d04d      	beq.n	8010ca0 <_printf_i+0x1b4>
 8010c04:	4615      	mov	r5, r2
 8010c06:	fbb6 f1f3 	udiv	r1, r6, r3
 8010c0a:	fb03 6711 	mls	r7, r3, r1, r6
 8010c0e:	5dc7      	ldrb	r7, [r0, r7]
 8010c10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010c14:	4637      	mov	r7, r6
 8010c16:	42bb      	cmp	r3, r7
 8010c18:	460e      	mov	r6, r1
 8010c1a:	d9f4      	bls.n	8010c06 <_printf_i+0x11a>
 8010c1c:	2b08      	cmp	r3, #8
 8010c1e:	d10b      	bne.n	8010c38 <_printf_i+0x14c>
 8010c20:	6823      	ldr	r3, [r4, #0]
 8010c22:	07de      	lsls	r6, r3, #31
 8010c24:	d508      	bpl.n	8010c38 <_printf_i+0x14c>
 8010c26:	6923      	ldr	r3, [r4, #16]
 8010c28:	6861      	ldr	r1, [r4, #4]
 8010c2a:	4299      	cmp	r1, r3
 8010c2c:	bfde      	ittt	le
 8010c2e:	2330      	movle	r3, #48	; 0x30
 8010c30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010c34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010c38:	1b52      	subs	r2, r2, r5
 8010c3a:	6122      	str	r2, [r4, #16]
 8010c3c:	f8cd a000 	str.w	sl, [sp]
 8010c40:	464b      	mov	r3, r9
 8010c42:	aa03      	add	r2, sp, #12
 8010c44:	4621      	mov	r1, r4
 8010c46:	4640      	mov	r0, r8
 8010c48:	f7ff fee2 	bl	8010a10 <_printf_common>
 8010c4c:	3001      	adds	r0, #1
 8010c4e:	d14c      	bne.n	8010cea <_printf_i+0x1fe>
 8010c50:	f04f 30ff 	mov.w	r0, #4294967295
 8010c54:	b004      	add	sp, #16
 8010c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c5a:	4835      	ldr	r0, [pc, #212]	; (8010d30 <_printf_i+0x244>)
 8010c5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010c60:	6829      	ldr	r1, [r5, #0]
 8010c62:	6823      	ldr	r3, [r4, #0]
 8010c64:	f851 6b04 	ldr.w	r6, [r1], #4
 8010c68:	6029      	str	r1, [r5, #0]
 8010c6a:	061d      	lsls	r5, r3, #24
 8010c6c:	d514      	bpl.n	8010c98 <_printf_i+0x1ac>
 8010c6e:	07df      	lsls	r7, r3, #31
 8010c70:	bf44      	itt	mi
 8010c72:	f043 0320 	orrmi.w	r3, r3, #32
 8010c76:	6023      	strmi	r3, [r4, #0]
 8010c78:	b91e      	cbnz	r6, 8010c82 <_printf_i+0x196>
 8010c7a:	6823      	ldr	r3, [r4, #0]
 8010c7c:	f023 0320 	bic.w	r3, r3, #32
 8010c80:	6023      	str	r3, [r4, #0]
 8010c82:	2310      	movs	r3, #16
 8010c84:	e7b0      	b.n	8010be8 <_printf_i+0xfc>
 8010c86:	6823      	ldr	r3, [r4, #0]
 8010c88:	f043 0320 	orr.w	r3, r3, #32
 8010c8c:	6023      	str	r3, [r4, #0]
 8010c8e:	2378      	movs	r3, #120	; 0x78
 8010c90:	4828      	ldr	r0, [pc, #160]	; (8010d34 <_printf_i+0x248>)
 8010c92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010c96:	e7e3      	b.n	8010c60 <_printf_i+0x174>
 8010c98:	0659      	lsls	r1, r3, #25
 8010c9a:	bf48      	it	mi
 8010c9c:	b2b6      	uxthmi	r6, r6
 8010c9e:	e7e6      	b.n	8010c6e <_printf_i+0x182>
 8010ca0:	4615      	mov	r5, r2
 8010ca2:	e7bb      	b.n	8010c1c <_printf_i+0x130>
 8010ca4:	682b      	ldr	r3, [r5, #0]
 8010ca6:	6826      	ldr	r6, [r4, #0]
 8010ca8:	6961      	ldr	r1, [r4, #20]
 8010caa:	1d18      	adds	r0, r3, #4
 8010cac:	6028      	str	r0, [r5, #0]
 8010cae:	0635      	lsls	r5, r6, #24
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	d501      	bpl.n	8010cb8 <_printf_i+0x1cc>
 8010cb4:	6019      	str	r1, [r3, #0]
 8010cb6:	e002      	b.n	8010cbe <_printf_i+0x1d2>
 8010cb8:	0670      	lsls	r0, r6, #25
 8010cba:	d5fb      	bpl.n	8010cb4 <_printf_i+0x1c8>
 8010cbc:	8019      	strh	r1, [r3, #0]
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	6123      	str	r3, [r4, #16]
 8010cc2:	4615      	mov	r5, r2
 8010cc4:	e7ba      	b.n	8010c3c <_printf_i+0x150>
 8010cc6:	682b      	ldr	r3, [r5, #0]
 8010cc8:	1d1a      	adds	r2, r3, #4
 8010cca:	602a      	str	r2, [r5, #0]
 8010ccc:	681d      	ldr	r5, [r3, #0]
 8010cce:	6862      	ldr	r2, [r4, #4]
 8010cd0:	2100      	movs	r1, #0
 8010cd2:	4628      	mov	r0, r5
 8010cd4:	f7ef fa8c 	bl	80001f0 <memchr>
 8010cd8:	b108      	cbz	r0, 8010cde <_printf_i+0x1f2>
 8010cda:	1b40      	subs	r0, r0, r5
 8010cdc:	6060      	str	r0, [r4, #4]
 8010cde:	6863      	ldr	r3, [r4, #4]
 8010ce0:	6123      	str	r3, [r4, #16]
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ce8:	e7a8      	b.n	8010c3c <_printf_i+0x150>
 8010cea:	6923      	ldr	r3, [r4, #16]
 8010cec:	462a      	mov	r2, r5
 8010cee:	4649      	mov	r1, r9
 8010cf0:	4640      	mov	r0, r8
 8010cf2:	47d0      	blx	sl
 8010cf4:	3001      	adds	r0, #1
 8010cf6:	d0ab      	beq.n	8010c50 <_printf_i+0x164>
 8010cf8:	6823      	ldr	r3, [r4, #0]
 8010cfa:	079b      	lsls	r3, r3, #30
 8010cfc:	d413      	bmi.n	8010d26 <_printf_i+0x23a>
 8010cfe:	68e0      	ldr	r0, [r4, #12]
 8010d00:	9b03      	ldr	r3, [sp, #12]
 8010d02:	4298      	cmp	r0, r3
 8010d04:	bfb8      	it	lt
 8010d06:	4618      	movlt	r0, r3
 8010d08:	e7a4      	b.n	8010c54 <_printf_i+0x168>
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	4632      	mov	r2, r6
 8010d0e:	4649      	mov	r1, r9
 8010d10:	4640      	mov	r0, r8
 8010d12:	47d0      	blx	sl
 8010d14:	3001      	adds	r0, #1
 8010d16:	d09b      	beq.n	8010c50 <_printf_i+0x164>
 8010d18:	3501      	adds	r5, #1
 8010d1a:	68e3      	ldr	r3, [r4, #12]
 8010d1c:	9903      	ldr	r1, [sp, #12]
 8010d1e:	1a5b      	subs	r3, r3, r1
 8010d20:	42ab      	cmp	r3, r5
 8010d22:	dcf2      	bgt.n	8010d0a <_printf_i+0x21e>
 8010d24:	e7eb      	b.n	8010cfe <_printf_i+0x212>
 8010d26:	2500      	movs	r5, #0
 8010d28:	f104 0619 	add.w	r6, r4, #25
 8010d2c:	e7f5      	b.n	8010d1a <_printf_i+0x22e>
 8010d2e:	bf00      	nop
 8010d30:	080124ad 	.word	0x080124ad
 8010d34:	080124be 	.word	0x080124be

08010d38 <iprintf>:
 8010d38:	b40f      	push	{r0, r1, r2, r3}
 8010d3a:	4b0a      	ldr	r3, [pc, #40]	; (8010d64 <iprintf+0x2c>)
 8010d3c:	b513      	push	{r0, r1, r4, lr}
 8010d3e:	681c      	ldr	r4, [r3, #0]
 8010d40:	b124      	cbz	r4, 8010d4c <iprintf+0x14>
 8010d42:	69a3      	ldr	r3, [r4, #24]
 8010d44:	b913      	cbnz	r3, 8010d4c <iprintf+0x14>
 8010d46:	4620      	mov	r0, r4
 8010d48:	f000 fa76 	bl	8011238 <__sinit>
 8010d4c:	ab05      	add	r3, sp, #20
 8010d4e:	9a04      	ldr	r2, [sp, #16]
 8010d50:	68a1      	ldr	r1, [r4, #8]
 8010d52:	9301      	str	r3, [sp, #4]
 8010d54:	4620      	mov	r0, r4
 8010d56:	f7ff fd2b 	bl	80107b0 <_vfiprintf_r>
 8010d5a:	b002      	add	sp, #8
 8010d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d60:	b004      	add	sp, #16
 8010d62:	4770      	bx	lr
 8010d64:	200000b0 	.word	0x200000b0

08010d68 <_puts_r>:
 8010d68:	b570      	push	{r4, r5, r6, lr}
 8010d6a:	460e      	mov	r6, r1
 8010d6c:	4605      	mov	r5, r0
 8010d6e:	b118      	cbz	r0, 8010d78 <_puts_r+0x10>
 8010d70:	6983      	ldr	r3, [r0, #24]
 8010d72:	b90b      	cbnz	r3, 8010d78 <_puts_r+0x10>
 8010d74:	f000 fa60 	bl	8011238 <__sinit>
 8010d78:	69ab      	ldr	r3, [r5, #24]
 8010d7a:	68ac      	ldr	r4, [r5, #8]
 8010d7c:	b913      	cbnz	r3, 8010d84 <_puts_r+0x1c>
 8010d7e:	4628      	mov	r0, r5
 8010d80:	f000 fa5a 	bl	8011238 <__sinit>
 8010d84:	4b2c      	ldr	r3, [pc, #176]	; (8010e38 <_puts_r+0xd0>)
 8010d86:	429c      	cmp	r4, r3
 8010d88:	d120      	bne.n	8010dcc <_puts_r+0x64>
 8010d8a:	686c      	ldr	r4, [r5, #4]
 8010d8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d8e:	07db      	lsls	r3, r3, #31
 8010d90:	d405      	bmi.n	8010d9e <_puts_r+0x36>
 8010d92:	89a3      	ldrh	r3, [r4, #12]
 8010d94:	0598      	lsls	r0, r3, #22
 8010d96:	d402      	bmi.n	8010d9e <_puts_r+0x36>
 8010d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d9a:	f000 faeb 	bl	8011374 <__retarget_lock_acquire_recursive>
 8010d9e:	89a3      	ldrh	r3, [r4, #12]
 8010da0:	0719      	lsls	r1, r3, #28
 8010da2:	d51d      	bpl.n	8010de0 <_puts_r+0x78>
 8010da4:	6923      	ldr	r3, [r4, #16]
 8010da6:	b1db      	cbz	r3, 8010de0 <_puts_r+0x78>
 8010da8:	3e01      	subs	r6, #1
 8010daa:	68a3      	ldr	r3, [r4, #8]
 8010dac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010db0:	3b01      	subs	r3, #1
 8010db2:	60a3      	str	r3, [r4, #8]
 8010db4:	bb39      	cbnz	r1, 8010e06 <_puts_r+0x9e>
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	da38      	bge.n	8010e2c <_puts_r+0xc4>
 8010dba:	4622      	mov	r2, r4
 8010dbc:	210a      	movs	r1, #10
 8010dbe:	4628      	mov	r0, r5
 8010dc0:	f000 f858 	bl	8010e74 <__swbuf_r>
 8010dc4:	3001      	adds	r0, #1
 8010dc6:	d011      	beq.n	8010dec <_puts_r+0x84>
 8010dc8:	250a      	movs	r5, #10
 8010dca:	e011      	b.n	8010df0 <_puts_r+0x88>
 8010dcc:	4b1b      	ldr	r3, [pc, #108]	; (8010e3c <_puts_r+0xd4>)
 8010dce:	429c      	cmp	r4, r3
 8010dd0:	d101      	bne.n	8010dd6 <_puts_r+0x6e>
 8010dd2:	68ac      	ldr	r4, [r5, #8]
 8010dd4:	e7da      	b.n	8010d8c <_puts_r+0x24>
 8010dd6:	4b1a      	ldr	r3, [pc, #104]	; (8010e40 <_puts_r+0xd8>)
 8010dd8:	429c      	cmp	r4, r3
 8010dda:	bf08      	it	eq
 8010ddc:	68ec      	ldreq	r4, [r5, #12]
 8010dde:	e7d5      	b.n	8010d8c <_puts_r+0x24>
 8010de0:	4621      	mov	r1, r4
 8010de2:	4628      	mov	r0, r5
 8010de4:	f000 f898 	bl	8010f18 <__swsetup_r>
 8010de8:	2800      	cmp	r0, #0
 8010dea:	d0dd      	beq.n	8010da8 <_puts_r+0x40>
 8010dec:	f04f 35ff 	mov.w	r5, #4294967295
 8010df0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010df2:	07da      	lsls	r2, r3, #31
 8010df4:	d405      	bmi.n	8010e02 <_puts_r+0x9a>
 8010df6:	89a3      	ldrh	r3, [r4, #12]
 8010df8:	059b      	lsls	r3, r3, #22
 8010dfa:	d402      	bmi.n	8010e02 <_puts_r+0x9a>
 8010dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dfe:	f000 faba 	bl	8011376 <__retarget_lock_release_recursive>
 8010e02:	4628      	mov	r0, r5
 8010e04:	bd70      	pop	{r4, r5, r6, pc}
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	da04      	bge.n	8010e14 <_puts_r+0xac>
 8010e0a:	69a2      	ldr	r2, [r4, #24]
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	dc06      	bgt.n	8010e1e <_puts_r+0xb6>
 8010e10:	290a      	cmp	r1, #10
 8010e12:	d004      	beq.n	8010e1e <_puts_r+0xb6>
 8010e14:	6823      	ldr	r3, [r4, #0]
 8010e16:	1c5a      	adds	r2, r3, #1
 8010e18:	6022      	str	r2, [r4, #0]
 8010e1a:	7019      	strb	r1, [r3, #0]
 8010e1c:	e7c5      	b.n	8010daa <_puts_r+0x42>
 8010e1e:	4622      	mov	r2, r4
 8010e20:	4628      	mov	r0, r5
 8010e22:	f000 f827 	bl	8010e74 <__swbuf_r>
 8010e26:	3001      	adds	r0, #1
 8010e28:	d1bf      	bne.n	8010daa <_puts_r+0x42>
 8010e2a:	e7df      	b.n	8010dec <_puts_r+0x84>
 8010e2c:	6823      	ldr	r3, [r4, #0]
 8010e2e:	250a      	movs	r5, #10
 8010e30:	1c5a      	adds	r2, r3, #1
 8010e32:	6022      	str	r2, [r4, #0]
 8010e34:	701d      	strb	r5, [r3, #0]
 8010e36:	e7db      	b.n	8010df0 <_puts_r+0x88>
 8010e38:	080124f0 	.word	0x080124f0
 8010e3c:	08012510 	.word	0x08012510
 8010e40:	080124d0 	.word	0x080124d0

08010e44 <puts>:
 8010e44:	4b02      	ldr	r3, [pc, #8]	; (8010e50 <puts+0xc>)
 8010e46:	4601      	mov	r1, r0
 8010e48:	6818      	ldr	r0, [r3, #0]
 8010e4a:	f7ff bf8d 	b.w	8010d68 <_puts_r>
 8010e4e:	bf00      	nop
 8010e50:	200000b0 	.word	0x200000b0

08010e54 <_sbrk_r>:
 8010e54:	b538      	push	{r3, r4, r5, lr}
 8010e56:	4d06      	ldr	r5, [pc, #24]	; (8010e70 <_sbrk_r+0x1c>)
 8010e58:	2300      	movs	r3, #0
 8010e5a:	4604      	mov	r4, r0
 8010e5c:	4608      	mov	r0, r1
 8010e5e:	602b      	str	r3, [r5, #0]
 8010e60:	f7f3 fda6 	bl	80049b0 <_sbrk>
 8010e64:	1c43      	adds	r3, r0, #1
 8010e66:	d102      	bne.n	8010e6e <_sbrk_r+0x1a>
 8010e68:	682b      	ldr	r3, [r5, #0]
 8010e6a:	b103      	cbz	r3, 8010e6e <_sbrk_r+0x1a>
 8010e6c:	6023      	str	r3, [r4, #0]
 8010e6e:	bd38      	pop	{r3, r4, r5, pc}
 8010e70:	2001fc2c 	.word	0x2001fc2c

08010e74 <__swbuf_r>:
 8010e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e76:	460e      	mov	r6, r1
 8010e78:	4614      	mov	r4, r2
 8010e7a:	4605      	mov	r5, r0
 8010e7c:	b118      	cbz	r0, 8010e86 <__swbuf_r+0x12>
 8010e7e:	6983      	ldr	r3, [r0, #24]
 8010e80:	b90b      	cbnz	r3, 8010e86 <__swbuf_r+0x12>
 8010e82:	f000 f9d9 	bl	8011238 <__sinit>
 8010e86:	4b21      	ldr	r3, [pc, #132]	; (8010f0c <__swbuf_r+0x98>)
 8010e88:	429c      	cmp	r4, r3
 8010e8a:	d12b      	bne.n	8010ee4 <__swbuf_r+0x70>
 8010e8c:	686c      	ldr	r4, [r5, #4]
 8010e8e:	69a3      	ldr	r3, [r4, #24]
 8010e90:	60a3      	str	r3, [r4, #8]
 8010e92:	89a3      	ldrh	r3, [r4, #12]
 8010e94:	071a      	lsls	r2, r3, #28
 8010e96:	d52f      	bpl.n	8010ef8 <__swbuf_r+0x84>
 8010e98:	6923      	ldr	r3, [r4, #16]
 8010e9a:	b36b      	cbz	r3, 8010ef8 <__swbuf_r+0x84>
 8010e9c:	6923      	ldr	r3, [r4, #16]
 8010e9e:	6820      	ldr	r0, [r4, #0]
 8010ea0:	1ac0      	subs	r0, r0, r3
 8010ea2:	6963      	ldr	r3, [r4, #20]
 8010ea4:	b2f6      	uxtb	r6, r6
 8010ea6:	4283      	cmp	r3, r0
 8010ea8:	4637      	mov	r7, r6
 8010eaa:	dc04      	bgt.n	8010eb6 <__swbuf_r+0x42>
 8010eac:	4621      	mov	r1, r4
 8010eae:	4628      	mov	r0, r5
 8010eb0:	f000 f92e 	bl	8011110 <_fflush_r>
 8010eb4:	bb30      	cbnz	r0, 8010f04 <__swbuf_r+0x90>
 8010eb6:	68a3      	ldr	r3, [r4, #8]
 8010eb8:	3b01      	subs	r3, #1
 8010eba:	60a3      	str	r3, [r4, #8]
 8010ebc:	6823      	ldr	r3, [r4, #0]
 8010ebe:	1c5a      	adds	r2, r3, #1
 8010ec0:	6022      	str	r2, [r4, #0]
 8010ec2:	701e      	strb	r6, [r3, #0]
 8010ec4:	6963      	ldr	r3, [r4, #20]
 8010ec6:	3001      	adds	r0, #1
 8010ec8:	4283      	cmp	r3, r0
 8010eca:	d004      	beq.n	8010ed6 <__swbuf_r+0x62>
 8010ecc:	89a3      	ldrh	r3, [r4, #12]
 8010ece:	07db      	lsls	r3, r3, #31
 8010ed0:	d506      	bpl.n	8010ee0 <__swbuf_r+0x6c>
 8010ed2:	2e0a      	cmp	r6, #10
 8010ed4:	d104      	bne.n	8010ee0 <__swbuf_r+0x6c>
 8010ed6:	4621      	mov	r1, r4
 8010ed8:	4628      	mov	r0, r5
 8010eda:	f000 f919 	bl	8011110 <_fflush_r>
 8010ede:	b988      	cbnz	r0, 8010f04 <__swbuf_r+0x90>
 8010ee0:	4638      	mov	r0, r7
 8010ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ee4:	4b0a      	ldr	r3, [pc, #40]	; (8010f10 <__swbuf_r+0x9c>)
 8010ee6:	429c      	cmp	r4, r3
 8010ee8:	d101      	bne.n	8010eee <__swbuf_r+0x7a>
 8010eea:	68ac      	ldr	r4, [r5, #8]
 8010eec:	e7cf      	b.n	8010e8e <__swbuf_r+0x1a>
 8010eee:	4b09      	ldr	r3, [pc, #36]	; (8010f14 <__swbuf_r+0xa0>)
 8010ef0:	429c      	cmp	r4, r3
 8010ef2:	bf08      	it	eq
 8010ef4:	68ec      	ldreq	r4, [r5, #12]
 8010ef6:	e7ca      	b.n	8010e8e <__swbuf_r+0x1a>
 8010ef8:	4621      	mov	r1, r4
 8010efa:	4628      	mov	r0, r5
 8010efc:	f000 f80c 	bl	8010f18 <__swsetup_r>
 8010f00:	2800      	cmp	r0, #0
 8010f02:	d0cb      	beq.n	8010e9c <__swbuf_r+0x28>
 8010f04:	f04f 37ff 	mov.w	r7, #4294967295
 8010f08:	e7ea      	b.n	8010ee0 <__swbuf_r+0x6c>
 8010f0a:	bf00      	nop
 8010f0c:	080124f0 	.word	0x080124f0
 8010f10:	08012510 	.word	0x08012510
 8010f14:	080124d0 	.word	0x080124d0

08010f18 <__swsetup_r>:
 8010f18:	4b32      	ldr	r3, [pc, #200]	; (8010fe4 <__swsetup_r+0xcc>)
 8010f1a:	b570      	push	{r4, r5, r6, lr}
 8010f1c:	681d      	ldr	r5, [r3, #0]
 8010f1e:	4606      	mov	r6, r0
 8010f20:	460c      	mov	r4, r1
 8010f22:	b125      	cbz	r5, 8010f2e <__swsetup_r+0x16>
 8010f24:	69ab      	ldr	r3, [r5, #24]
 8010f26:	b913      	cbnz	r3, 8010f2e <__swsetup_r+0x16>
 8010f28:	4628      	mov	r0, r5
 8010f2a:	f000 f985 	bl	8011238 <__sinit>
 8010f2e:	4b2e      	ldr	r3, [pc, #184]	; (8010fe8 <__swsetup_r+0xd0>)
 8010f30:	429c      	cmp	r4, r3
 8010f32:	d10f      	bne.n	8010f54 <__swsetup_r+0x3c>
 8010f34:	686c      	ldr	r4, [r5, #4]
 8010f36:	89a3      	ldrh	r3, [r4, #12]
 8010f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f3c:	0719      	lsls	r1, r3, #28
 8010f3e:	d42c      	bmi.n	8010f9a <__swsetup_r+0x82>
 8010f40:	06dd      	lsls	r5, r3, #27
 8010f42:	d411      	bmi.n	8010f68 <__swsetup_r+0x50>
 8010f44:	2309      	movs	r3, #9
 8010f46:	6033      	str	r3, [r6, #0]
 8010f48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010f4c:	81a3      	strh	r3, [r4, #12]
 8010f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8010f52:	e03e      	b.n	8010fd2 <__swsetup_r+0xba>
 8010f54:	4b25      	ldr	r3, [pc, #148]	; (8010fec <__swsetup_r+0xd4>)
 8010f56:	429c      	cmp	r4, r3
 8010f58:	d101      	bne.n	8010f5e <__swsetup_r+0x46>
 8010f5a:	68ac      	ldr	r4, [r5, #8]
 8010f5c:	e7eb      	b.n	8010f36 <__swsetup_r+0x1e>
 8010f5e:	4b24      	ldr	r3, [pc, #144]	; (8010ff0 <__swsetup_r+0xd8>)
 8010f60:	429c      	cmp	r4, r3
 8010f62:	bf08      	it	eq
 8010f64:	68ec      	ldreq	r4, [r5, #12]
 8010f66:	e7e6      	b.n	8010f36 <__swsetup_r+0x1e>
 8010f68:	0758      	lsls	r0, r3, #29
 8010f6a:	d512      	bpl.n	8010f92 <__swsetup_r+0x7a>
 8010f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f6e:	b141      	cbz	r1, 8010f82 <__swsetup_r+0x6a>
 8010f70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f74:	4299      	cmp	r1, r3
 8010f76:	d002      	beq.n	8010f7e <__swsetup_r+0x66>
 8010f78:	4630      	mov	r0, r6
 8010f7a:	f7ff fb0f 	bl	801059c <_free_r>
 8010f7e:	2300      	movs	r3, #0
 8010f80:	6363      	str	r3, [r4, #52]	; 0x34
 8010f82:	89a3      	ldrh	r3, [r4, #12]
 8010f84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010f88:	81a3      	strh	r3, [r4, #12]
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	6063      	str	r3, [r4, #4]
 8010f8e:	6923      	ldr	r3, [r4, #16]
 8010f90:	6023      	str	r3, [r4, #0]
 8010f92:	89a3      	ldrh	r3, [r4, #12]
 8010f94:	f043 0308 	orr.w	r3, r3, #8
 8010f98:	81a3      	strh	r3, [r4, #12]
 8010f9a:	6923      	ldr	r3, [r4, #16]
 8010f9c:	b94b      	cbnz	r3, 8010fb2 <__swsetup_r+0x9a>
 8010f9e:	89a3      	ldrh	r3, [r4, #12]
 8010fa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fa8:	d003      	beq.n	8010fb2 <__swsetup_r+0x9a>
 8010faa:	4621      	mov	r1, r4
 8010fac:	4630      	mov	r0, r6
 8010fae:	f000 fa09 	bl	80113c4 <__smakebuf_r>
 8010fb2:	89a0      	ldrh	r0, [r4, #12]
 8010fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010fb8:	f010 0301 	ands.w	r3, r0, #1
 8010fbc:	d00a      	beq.n	8010fd4 <__swsetup_r+0xbc>
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	60a3      	str	r3, [r4, #8]
 8010fc2:	6963      	ldr	r3, [r4, #20]
 8010fc4:	425b      	negs	r3, r3
 8010fc6:	61a3      	str	r3, [r4, #24]
 8010fc8:	6923      	ldr	r3, [r4, #16]
 8010fca:	b943      	cbnz	r3, 8010fde <__swsetup_r+0xc6>
 8010fcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010fd0:	d1ba      	bne.n	8010f48 <__swsetup_r+0x30>
 8010fd2:	bd70      	pop	{r4, r5, r6, pc}
 8010fd4:	0781      	lsls	r1, r0, #30
 8010fd6:	bf58      	it	pl
 8010fd8:	6963      	ldrpl	r3, [r4, #20]
 8010fda:	60a3      	str	r3, [r4, #8]
 8010fdc:	e7f4      	b.n	8010fc8 <__swsetup_r+0xb0>
 8010fde:	2000      	movs	r0, #0
 8010fe0:	e7f7      	b.n	8010fd2 <__swsetup_r+0xba>
 8010fe2:	bf00      	nop
 8010fe4:	200000b0 	.word	0x200000b0
 8010fe8:	080124f0 	.word	0x080124f0
 8010fec:	08012510 	.word	0x08012510
 8010ff0:	080124d0 	.word	0x080124d0

08010ff4 <abort>:
 8010ff4:	b508      	push	{r3, lr}
 8010ff6:	2006      	movs	r0, #6
 8010ff8:	f000 fa58 	bl	80114ac <raise>
 8010ffc:	2001      	movs	r0, #1
 8010ffe:	f7f3 fc7b 	bl	80048f8 <_exit>
	...

08011004 <__sflush_r>:
 8011004:	898a      	ldrh	r2, [r1, #12]
 8011006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801100a:	4605      	mov	r5, r0
 801100c:	0710      	lsls	r0, r2, #28
 801100e:	460c      	mov	r4, r1
 8011010:	d458      	bmi.n	80110c4 <__sflush_r+0xc0>
 8011012:	684b      	ldr	r3, [r1, #4]
 8011014:	2b00      	cmp	r3, #0
 8011016:	dc05      	bgt.n	8011024 <__sflush_r+0x20>
 8011018:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801101a:	2b00      	cmp	r3, #0
 801101c:	dc02      	bgt.n	8011024 <__sflush_r+0x20>
 801101e:	2000      	movs	r0, #0
 8011020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011026:	2e00      	cmp	r6, #0
 8011028:	d0f9      	beq.n	801101e <__sflush_r+0x1a>
 801102a:	2300      	movs	r3, #0
 801102c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011030:	682f      	ldr	r7, [r5, #0]
 8011032:	602b      	str	r3, [r5, #0]
 8011034:	d032      	beq.n	801109c <__sflush_r+0x98>
 8011036:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011038:	89a3      	ldrh	r3, [r4, #12]
 801103a:	075a      	lsls	r2, r3, #29
 801103c:	d505      	bpl.n	801104a <__sflush_r+0x46>
 801103e:	6863      	ldr	r3, [r4, #4]
 8011040:	1ac0      	subs	r0, r0, r3
 8011042:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011044:	b10b      	cbz	r3, 801104a <__sflush_r+0x46>
 8011046:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011048:	1ac0      	subs	r0, r0, r3
 801104a:	2300      	movs	r3, #0
 801104c:	4602      	mov	r2, r0
 801104e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011050:	6a21      	ldr	r1, [r4, #32]
 8011052:	4628      	mov	r0, r5
 8011054:	47b0      	blx	r6
 8011056:	1c43      	adds	r3, r0, #1
 8011058:	89a3      	ldrh	r3, [r4, #12]
 801105a:	d106      	bne.n	801106a <__sflush_r+0x66>
 801105c:	6829      	ldr	r1, [r5, #0]
 801105e:	291d      	cmp	r1, #29
 8011060:	d82c      	bhi.n	80110bc <__sflush_r+0xb8>
 8011062:	4a2a      	ldr	r2, [pc, #168]	; (801110c <__sflush_r+0x108>)
 8011064:	40ca      	lsrs	r2, r1
 8011066:	07d6      	lsls	r6, r2, #31
 8011068:	d528      	bpl.n	80110bc <__sflush_r+0xb8>
 801106a:	2200      	movs	r2, #0
 801106c:	6062      	str	r2, [r4, #4]
 801106e:	04d9      	lsls	r1, r3, #19
 8011070:	6922      	ldr	r2, [r4, #16]
 8011072:	6022      	str	r2, [r4, #0]
 8011074:	d504      	bpl.n	8011080 <__sflush_r+0x7c>
 8011076:	1c42      	adds	r2, r0, #1
 8011078:	d101      	bne.n	801107e <__sflush_r+0x7a>
 801107a:	682b      	ldr	r3, [r5, #0]
 801107c:	b903      	cbnz	r3, 8011080 <__sflush_r+0x7c>
 801107e:	6560      	str	r0, [r4, #84]	; 0x54
 8011080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011082:	602f      	str	r7, [r5, #0]
 8011084:	2900      	cmp	r1, #0
 8011086:	d0ca      	beq.n	801101e <__sflush_r+0x1a>
 8011088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801108c:	4299      	cmp	r1, r3
 801108e:	d002      	beq.n	8011096 <__sflush_r+0x92>
 8011090:	4628      	mov	r0, r5
 8011092:	f7ff fa83 	bl	801059c <_free_r>
 8011096:	2000      	movs	r0, #0
 8011098:	6360      	str	r0, [r4, #52]	; 0x34
 801109a:	e7c1      	b.n	8011020 <__sflush_r+0x1c>
 801109c:	6a21      	ldr	r1, [r4, #32]
 801109e:	2301      	movs	r3, #1
 80110a0:	4628      	mov	r0, r5
 80110a2:	47b0      	blx	r6
 80110a4:	1c41      	adds	r1, r0, #1
 80110a6:	d1c7      	bne.n	8011038 <__sflush_r+0x34>
 80110a8:	682b      	ldr	r3, [r5, #0]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d0c4      	beq.n	8011038 <__sflush_r+0x34>
 80110ae:	2b1d      	cmp	r3, #29
 80110b0:	d001      	beq.n	80110b6 <__sflush_r+0xb2>
 80110b2:	2b16      	cmp	r3, #22
 80110b4:	d101      	bne.n	80110ba <__sflush_r+0xb6>
 80110b6:	602f      	str	r7, [r5, #0]
 80110b8:	e7b1      	b.n	801101e <__sflush_r+0x1a>
 80110ba:	89a3      	ldrh	r3, [r4, #12]
 80110bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110c0:	81a3      	strh	r3, [r4, #12]
 80110c2:	e7ad      	b.n	8011020 <__sflush_r+0x1c>
 80110c4:	690f      	ldr	r7, [r1, #16]
 80110c6:	2f00      	cmp	r7, #0
 80110c8:	d0a9      	beq.n	801101e <__sflush_r+0x1a>
 80110ca:	0793      	lsls	r3, r2, #30
 80110cc:	680e      	ldr	r6, [r1, #0]
 80110ce:	bf08      	it	eq
 80110d0:	694b      	ldreq	r3, [r1, #20]
 80110d2:	600f      	str	r7, [r1, #0]
 80110d4:	bf18      	it	ne
 80110d6:	2300      	movne	r3, #0
 80110d8:	eba6 0807 	sub.w	r8, r6, r7
 80110dc:	608b      	str	r3, [r1, #8]
 80110de:	f1b8 0f00 	cmp.w	r8, #0
 80110e2:	dd9c      	ble.n	801101e <__sflush_r+0x1a>
 80110e4:	6a21      	ldr	r1, [r4, #32]
 80110e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80110e8:	4643      	mov	r3, r8
 80110ea:	463a      	mov	r2, r7
 80110ec:	4628      	mov	r0, r5
 80110ee:	47b0      	blx	r6
 80110f0:	2800      	cmp	r0, #0
 80110f2:	dc06      	bgt.n	8011102 <__sflush_r+0xfe>
 80110f4:	89a3      	ldrh	r3, [r4, #12]
 80110f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110fa:	81a3      	strh	r3, [r4, #12]
 80110fc:	f04f 30ff 	mov.w	r0, #4294967295
 8011100:	e78e      	b.n	8011020 <__sflush_r+0x1c>
 8011102:	4407      	add	r7, r0
 8011104:	eba8 0800 	sub.w	r8, r8, r0
 8011108:	e7e9      	b.n	80110de <__sflush_r+0xda>
 801110a:	bf00      	nop
 801110c:	20400001 	.word	0x20400001

08011110 <_fflush_r>:
 8011110:	b538      	push	{r3, r4, r5, lr}
 8011112:	690b      	ldr	r3, [r1, #16]
 8011114:	4605      	mov	r5, r0
 8011116:	460c      	mov	r4, r1
 8011118:	b913      	cbnz	r3, 8011120 <_fflush_r+0x10>
 801111a:	2500      	movs	r5, #0
 801111c:	4628      	mov	r0, r5
 801111e:	bd38      	pop	{r3, r4, r5, pc}
 8011120:	b118      	cbz	r0, 801112a <_fflush_r+0x1a>
 8011122:	6983      	ldr	r3, [r0, #24]
 8011124:	b90b      	cbnz	r3, 801112a <_fflush_r+0x1a>
 8011126:	f000 f887 	bl	8011238 <__sinit>
 801112a:	4b14      	ldr	r3, [pc, #80]	; (801117c <_fflush_r+0x6c>)
 801112c:	429c      	cmp	r4, r3
 801112e:	d11b      	bne.n	8011168 <_fflush_r+0x58>
 8011130:	686c      	ldr	r4, [r5, #4]
 8011132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d0ef      	beq.n	801111a <_fflush_r+0xa>
 801113a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801113c:	07d0      	lsls	r0, r2, #31
 801113e:	d404      	bmi.n	801114a <_fflush_r+0x3a>
 8011140:	0599      	lsls	r1, r3, #22
 8011142:	d402      	bmi.n	801114a <_fflush_r+0x3a>
 8011144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011146:	f000 f915 	bl	8011374 <__retarget_lock_acquire_recursive>
 801114a:	4628      	mov	r0, r5
 801114c:	4621      	mov	r1, r4
 801114e:	f7ff ff59 	bl	8011004 <__sflush_r>
 8011152:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011154:	07da      	lsls	r2, r3, #31
 8011156:	4605      	mov	r5, r0
 8011158:	d4e0      	bmi.n	801111c <_fflush_r+0xc>
 801115a:	89a3      	ldrh	r3, [r4, #12]
 801115c:	059b      	lsls	r3, r3, #22
 801115e:	d4dd      	bmi.n	801111c <_fflush_r+0xc>
 8011160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011162:	f000 f908 	bl	8011376 <__retarget_lock_release_recursive>
 8011166:	e7d9      	b.n	801111c <_fflush_r+0xc>
 8011168:	4b05      	ldr	r3, [pc, #20]	; (8011180 <_fflush_r+0x70>)
 801116a:	429c      	cmp	r4, r3
 801116c:	d101      	bne.n	8011172 <_fflush_r+0x62>
 801116e:	68ac      	ldr	r4, [r5, #8]
 8011170:	e7df      	b.n	8011132 <_fflush_r+0x22>
 8011172:	4b04      	ldr	r3, [pc, #16]	; (8011184 <_fflush_r+0x74>)
 8011174:	429c      	cmp	r4, r3
 8011176:	bf08      	it	eq
 8011178:	68ec      	ldreq	r4, [r5, #12]
 801117a:	e7da      	b.n	8011132 <_fflush_r+0x22>
 801117c:	080124f0 	.word	0x080124f0
 8011180:	08012510 	.word	0x08012510
 8011184:	080124d0 	.word	0x080124d0

08011188 <std>:
 8011188:	2300      	movs	r3, #0
 801118a:	b510      	push	{r4, lr}
 801118c:	4604      	mov	r4, r0
 801118e:	e9c0 3300 	strd	r3, r3, [r0]
 8011192:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011196:	6083      	str	r3, [r0, #8]
 8011198:	8181      	strh	r1, [r0, #12]
 801119a:	6643      	str	r3, [r0, #100]	; 0x64
 801119c:	81c2      	strh	r2, [r0, #14]
 801119e:	6183      	str	r3, [r0, #24]
 80111a0:	4619      	mov	r1, r3
 80111a2:	2208      	movs	r2, #8
 80111a4:	305c      	adds	r0, #92	; 0x5c
 80111a6:	f7ff f9f1 	bl	801058c <memset>
 80111aa:	4b05      	ldr	r3, [pc, #20]	; (80111c0 <std+0x38>)
 80111ac:	6263      	str	r3, [r4, #36]	; 0x24
 80111ae:	4b05      	ldr	r3, [pc, #20]	; (80111c4 <std+0x3c>)
 80111b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80111b2:	4b05      	ldr	r3, [pc, #20]	; (80111c8 <std+0x40>)
 80111b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80111b6:	4b05      	ldr	r3, [pc, #20]	; (80111cc <std+0x44>)
 80111b8:	6224      	str	r4, [r4, #32]
 80111ba:	6323      	str	r3, [r4, #48]	; 0x30
 80111bc:	bd10      	pop	{r4, pc}
 80111be:	bf00      	nop
 80111c0:	080114e5 	.word	0x080114e5
 80111c4:	08011507 	.word	0x08011507
 80111c8:	0801153f 	.word	0x0801153f
 80111cc:	08011563 	.word	0x08011563

080111d0 <_cleanup_r>:
 80111d0:	4901      	ldr	r1, [pc, #4]	; (80111d8 <_cleanup_r+0x8>)
 80111d2:	f000 b8af 	b.w	8011334 <_fwalk_reent>
 80111d6:	bf00      	nop
 80111d8:	08011111 	.word	0x08011111

080111dc <__sfmoreglue>:
 80111dc:	b570      	push	{r4, r5, r6, lr}
 80111de:	2268      	movs	r2, #104	; 0x68
 80111e0:	1e4d      	subs	r5, r1, #1
 80111e2:	4355      	muls	r5, r2
 80111e4:	460e      	mov	r6, r1
 80111e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80111ea:	f7ff fa43 	bl	8010674 <_malloc_r>
 80111ee:	4604      	mov	r4, r0
 80111f0:	b140      	cbz	r0, 8011204 <__sfmoreglue+0x28>
 80111f2:	2100      	movs	r1, #0
 80111f4:	e9c0 1600 	strd	r1, r6, [r0]
 80111f8:	300c      	adds	r0, #12
 80111fa:	60a0      	str	r0, [r4, #8]
 80111fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011200:	f7ff f9c4 	bl	801058c <memset>
 8011204:	4620      	mov	r0, r4
 8011206:	bd70      	pop	{r4, r5, r6, pc}

08011208 <__sfp_lock_acquire>:
 8011208:	4801      	ldr	r0, [pc, #4]	; (8011210 <__sfp_lock_acquire+0x8>)
 801120a:	f000 b8b3 	b.w	8011374 <__retarget_lock_acquire_recursive>
 801120e:	bf00      	nop
 8011210:	2001fc29 	.word	0x2001fc29

08011214 <__sfp_lock_release>:
 8011214:	4801      	ldr	r0, [pc, #4]	; (801121c <__sfp_lock_release+0x8>)
 8011216:	f000 b8ae 	b.w	8011376 <__retarget_lock_release_recursive>
 801121a:	bf00      	nop
 801121c:	2001fc29 	.word	0x2001fc29

08011220 <__sinit_lock_acquire>:
 8011220:	4801      	ldr	r0, [pc, #4]	; (8011228 <__sinit_lock_acquire+0x8>)
 8011222:	f000 b8a7 	b.w	8011374 <__retarget_lock_acquire_recursive>
 8011226:	bf00      	nop
 8011228:	2001fc2a 	.word	0x2001fc2a

0801122c <__sinit_lock_release>:
 801122c:	4801      	ldr	r0, [pc, #4]	; (8011234 <__sinit_lock_release+0x8>)
 801122e:	f000 b8a2 	b.w	8011376 <__retarget_lock_release_recursive>
 8011232:	bf00      	nop
 8011234:	2001fc2a 	.word	0x2001fc2a

08011238 <__sinit>:
 8011238:	b510      	push	{r4, lr}
 801123a:	4604      	mov	r4, r0
 801123c:	f7ff fff0 	bl	8011220 <__sinit_lock_acquire>
 8011240:	69a3      	ldr	r3, [r4, #24]
 8011242:	b11b      	cbz	r3, 801124c <__sinit+0x14>
 8011244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011248:	f7ff bff0 	b.w	801122c <__sinit_lock_release>
 801124c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011250:	6523      	str	r3, [r4, #80]	; 0x50
 8011252:	4b13      	ldr	r3, [pc, #76]	; (80112a0 <__sinit+0x68>)
 8011254:	4a13      	ldr	r2, [pc, #76]	; (80112a4 <__sinit+0x6c>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	62a2      	str	r2, [r4, #40]	; 0x28
 801125a:	42a3      	cmp	r3, r4
 801125c:	bf04      	itt	eq
 801125e:	2301      	moveq	r3, #1
 8011260:	61a3      	streq	r3, [r4, #24]
 8011262:	4620      	mov	r0, r4
 8011264:	f000 f820 	bl	80112a8 <__sfp>
 8011268:	6060      	str	r0, [r4, #4]
 801126a:	4620      	mov	r0, r4
 801126c:	f000 f81c 	bl	80112a8 <__sfp>
 8011270:	60a0      	str	r0, [r4, #8]
 8011272:	4620      	mov	r0, r4
 8011274:	f000 f818 	bl	80112a8 <__sfp>
 8011278:	2200      	movs	r2, #0
 801127a:	60e0      	str	r0, [r4, #12]
 801127c:	2104      	movs	r1, #4
 801127e:	6860      	ldr	r0, [r4, #4]
 8011280:	f7ff ff82 	bl	8011188 <std>
 8011284:	68a0      	ldr	r0, [r4, #8]
 8011286:	2201      	movs	r2, #1
 8011288:	2109      	movs	r1, #9
 801128a:	f7ff ff7d 	bl	8011188 <std>
 801128e:	68e0      	ldr	r0, [r4, #12]
 8011290:	2202      	movs	r2, #2
 8011292:	2112      	movs	r1, #18
 8011294:	f7ff ff78 	bl	8011188 <std>
 8011298:	2301      	movs	r3, #1
 801129a:	61a3      	str	r3, [r4, #24]
 801129c:	e7d2      	b.n	8011244 <__sinit+0xc>
 801129e:	bf00      	nop
 80112a0:	08012498 	.word	0x08012498
 80112a4:	080111d1 	.word	0x080111d1

080112a8 <__sfp>:
 80112a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112aa:	4607      	mov	r7, r0
 80112ac:	f7ff ffac 	bl	8011208 <__sfp_lock_acquire>
 80112b0:	4b1e      	ldr	r3, [pc, #120]	; (801132c <__sfp+0x84>)
 80112b2:	681e      	ldr	r6, [r3, #0]
 80112b4:	69b3      	ldr	r3, [r6, #24]
 80112b6:	b913      	cbnz	r3, 80112be <__sfp+0x16>
 80112b8:	4630      	mov	r0, r6
 80112ba:	f7ff ffbd 	bl	8011238 <__sinit>
 80112be:	3648      	adds	r6, #72	; 0x48
 80112c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80112c4:	3b01      	subs	r3, #1
 80112c6:	d503      	bpl.n	80112d0 <__sfp+0x28>
 80112c8:	6833      	ldr	r3, [r6, #0]
 80112ca:	b30b      	cbz	r3, 8011310 <__sfp+0x68>
 80112cc:	6836      	ldr	r6, [r6, #0]
 80112ce:	e7f7      	b.n	80112c0 <__sfp+0x18>
 80112d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80112d4:	b9d5      	cbnz	r5, 801130c <__sfp+0x64>
 80112d6:	4b16      	ldr	r3, [pc, #88]	; (8011330 <__sfp+0x88>)
 80112d8:	60e3      	str	r3, [r4, #12]
 80112da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80112de:	6665      	str	r5, [r4, #100]	; 0x64
 80112e0:	f000 f847 	bl	8011372 <__retarget_lock_init_recursive>
 80112e4:	f7ff ff96 	bl	8011214 <__sfp_lock_release>
 80112e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80112ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80112f0:	6025      	str	r5, [r4, #0]
 80112f2:	61a5      	str	r5, [r4, #24]
 80112f4:	2208      	movs	r2, #8
 80112f6:	4629      	mov	r1, r5
 80112f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80112fc:	f7ff f946 	bl	801058c <memset>
 8011300:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011304:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011308:	4620      	mov	r0, r4
 801130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801130c:	3468      	adds	r4, #104	; 0x68
 801130e:	e7d9      	b.n	80112c4 <__sfp+0x1c>
 8011310:	2104      	movs	r1, #4
 8011312:	4638      	mov	r0, r7
 8011314:	f7ff ff62 	bl	80111dc <__sfmoreglue>
 8011318:	4604      	mov	r4, r0
 801131a:	6030      	str	r0, [r6, #0]
 801131c:	2800      	cmp	r0, #0
 801131e:	d1d5      	bne.n	80112cc <__sfp+0x24>
 8011320:	f7ff ff78 	bl	8011214 <__sfp_lock_release>
 8011324:	230c      	movs	r3, #12
 8011326:	603b      	str	r3, [r7, #0]
 8011328:	e7ee      	b.n	8011308 <__sfp+0x60>
 801132a:	bf00      	nop
 801132c:	08012498 	.word	0x08012498
 8011330:	ffff0001 	.word	0xffff0001

08011334 <_fwalk_reent>:
 8011334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011338:	4606      	mov	r6, r0
 801133a:	4688      	mov	r8, r1
 801133c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011340:	2700      	movs	r7, #0
 8011342:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011346:	f1b9 0901 	subs.w	r9, r9, #1
 801134a:	d505      	bpl.n	8011358 <_fwalk_reent+0x24>
 801134c:	6824      	ldr	r4, [r4, #0]
 801134e:	2c00      	cmp	r4, #0
 8011350:	d1f7      	bne.n	8011342 <_fwalk_reent+0xe>
 8011352:	4638      	mov	r0, r7
 8011354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011358:	89ab      	ldrh	r3, [r5, #12]
 801135a:	2b01      	cmp	r3, #1
 801135c:	d907      	bls.n	801136e <_fwalk_reent+0x3a>
 801135e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011362:	3301      	adds	r3, #1
 8011364:	d003      	beq.n	801136e <_fwalk_reent+0x3a>
 8011366:	4629      	mov	r1, r5
 8011368:	4630      	mov	r0, r6
 801136a:	47c0      	blx	r8
 801136c:	4307      	orrs	r7, r0
 801136e:	3568      	adds	r5, #104	; 0x68
 8011370:	e7e9      	b.n	8011346 <_fwalk_reent+0x12>

08011372 <__retarget_lock_init_recursive>:
 8011372:	4770      	bx	lr

08011374 <__retarget_lock_acquire_recursive>:
 8011374:	4770      	bx	lr

08011376 <__retarget_lock_release_recursive>:
 8011376:	4770      	bx	lr

08011378 <__swhatbuf_r>:
 8011378:	b570      	push	{r4, r5, r6, lr}
 801137a:	460e      	mov	r6, r1
 801137c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011380:	2900      	cmp	r1, #0
 8011382:	b096      	sub	sp, #88	; 0x58
 8011384:	4614      	mov	r4, r2
 8011386:	461d      	mov	r5, r3
 8011388:	da08      	bge.n	801139c <__swhatbuf_r+0x24>
 801138a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801138e:	2200      	movs	r2, #0
 8011390:	602a      	str	r2, [r5, #0]
 8011392:	061a      	lsls	r2, r3, #24
 8011394:	d410      	bmi.n	80113b8 <__swhatbuf_r+0x40>
 8011396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801139a:	e00e      	b.n	80113ba <__swhatbuf_r+0x42>
 801139c:	466a      	mov	r2, sp
 801139e:	f000 f907 	bl	80115b0 <_fstat_r>
 80113a2:	2800      	cmp	r0, #0
 80113a4:	dbf1      	blt.n	801138a <__swhatbuf_r+0x12>
 80113a6:	9a01      	ldr	r2, [sp, #4]
 80113a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80113ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80113b0:	425a      	negs	r2, r3
 80113b2:	415a      	adcs	r2, r3
 80113b4:	602a      	str	r2, [r5, #0]
 80113b6:	e7ee      	b.n	8011396 <__swhatbuf_r+0x1e>
 80113b8:	2340      	movs	r3, #64	; 0x40
 80113ba:	2000      	movs	r0, #0
 80113bc:	6023      	str	r3, [r4, #0]
 80113be:	b016      	add	sp, #88	; 0x58
 80113c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080113c4 <__smakebuf_r>:
 80113c4:	898b      	ldrh	r3, [r1, #12]
 80113c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80113c8:	079d      	lsls	r5, r3, #30
 80113ca:	4606      	mov	r6, r0
 80113cc:	460c      	mov	r4, r1
 80113ce:	d507      	bpl.n	80113e0 <__smakebuf_r+0x1c>
 80113d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80113d4:	6023      	str	r3, [r4, #0]
 80113d6:	6123      	str	r3, [r4, #16]
 80113d8:	2301      	movs	r3, #1
 80113da:	6163      	str	r3, [r4, #20]
 80113dc:	b002      	add	sp, #8
 80113de:	bd70      	pop	{r4, r5, r6, pc}
 80113e0:	ab01      	add	r3, sp, #4
 80113e2:	466a      	mov	r2, sp
 80113e4:	f7ff ffc8 	bl	8011378 <__swhatbuf_r>
 80113e8:	9900      	ldr	r1, [sp, #0]
 80113ea:	4605      	mov	r5, r0
 80113ec:	4630      	mov	r0, r6
 80113ee:	f7ff f941 	bl	8010674 <_malloc_r>
 80113f2:	b948      	cbnz	r0, 8011408 <__smakebuf_r+0x44>
 80113f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113f8:	059a      	lsls	r2, r3, #22
 80113fa:	d4ef      	bmi.n	80113dc <__smakebuf_r+0x18>
 80113fc:	f023 0303 	bic.w	r3, r3, #3
 8011400:	f043 0302 	orr.w	r3, r3, #2
 8011404:	81a3      	strh	r3, [r4, #12]
 8011406:	e7e3      	b.n	80113d0 <__smakebuf_r+0xc>
 8011408:	4b0d      	ldr	r3, [pc, #52]	; (8011440 <__smakebuf_r+0x7c>)
 801140a:	62b3      	str	r3, [r6, #40]	; 0x28
 801140c:	89a3      	ldrh	r3, [r4, #12]
 801140e:	6020      	str	r0, [r4, #0]
 8011410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011414:	81a3      	strh	r3, [r4, #12]
 8011416:	9b00      	ldr	r3, [sp, #0]
 8011418:	6163      	str	r3, [r4, #20]
 801141a:	9b01      	ldr	r3, [sp, #4]
 801141c:	6120      	str	r0, [r4, #16]
 801141e:	b15b      	cbz	r3, 8011438 <__smakebuf_r+0x74>
 8011420:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011424:	4630      	mov	r0, r6
 8011426:	f000 f8d5 	bl	80115d4 <_isatty_r>
 801142a:	b128      	cbz	r0, 8011438 <__smakebuf_r+0x74>
 801142c:	89a3      	ldrh	r3, [r4, #12]
 801142e:	f023 0303 	bic.w	r3, r3, #3
 8011432:	f043 0301 	orr.w	r3, r3, #1
 8011436:	81a3      	strh	r3, [r4, #12]
 8011438:	89a0      	ldrh	r0, [r4, #12]
 801143a:	4305      	orrs	r5, r0
 801143c:	81a5      	strh	r5, [r4, #12]
 801143e:	e7cd      	b.n	80113dc <__smakebuf_r+0x18>
 8011440:	080111d1 	.word	0x080111d1

08011444 <__malloc_lock>:
 8011444:	4801      	ldr	r0, [pc, #4]	; (801144c <__malloc_lock+0x8>)
 8011446:	f7ff bf95 	b.w	8011374 <__retarget_lock_acquire_recursive>
 801144a:	bf00      	nop
 801144c:	2001fc28 	.word	0x2001fc28

08011450 <__malloc_unlock>:
 8011450:	4801      	ldr	r0, [pc, #4]	; (8011458 <__malloc_unlock+0x8>)
 8011452:	f7ff bf90 	b.w	8011376 <__retarget_lock_release_recursive>
 8011456:	bf00      	nop
 8011458:	2001fc28 	.word	0x2001fc28

0801145c <_raise_r>:
 801145c:	291f      	cmp	r1, #31
 801145e:	b538      	push	{r3, r4, r5, lr}
 8011460:	4604      	mov	r4, r0
 8011462:	460d      	mov	r5, r1
 8011464:	d904      	bls.n	8011470 <_raise_r+0x14>
 8011466:	2316      	movs	r3, #22
 8011468:	6003      	str	r3, [r0, #0]
 801146a:	f04f 30ff 	mov.w	r0, #4294967295
 801146e:	bd38      	pop	{r3, r4, r5, pc}
 8011470:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011472:	b112      	cbz	r2, 801147a <_raise_r+0x1e>
 8011474:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011478:	b94b      	cbnz	r3, 801148e <_raise_r+0x32>
 801147a:	4620      	mov	r0, r4
 801147c:	f000 f830 	bl	80114e0 <_getpid_r>
 8011480:	462a      	mov	r2, r5
 8011482:	4601      	mov	r1, r0
 8011484:	4620      	mov	r0, r4
 8011486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801148a:	f000 b817 	b.w	80114bc <_kill_r>
 801148e:	2b01      	cmp	r3, #1
 8011490:	d00a      	beq.n	80114a8 <_raise_r+0x4c>
 8011492:	1c59      	adds	r1, r3, #1
 8011494:	d103      	bne.n	801149e <_raise_r+0x42>
 8011496:	2316      	movs	r3, #22
 8011498:	6003      	str	r3, [r0, #0]
 801149a:	2001      	movs	r0, #1
 801149c:	e7e7      	b.n	801146e <_raise_r+0x12>
 801149e:	2400      	movs	r4, #0
 80114a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80114a4:	4628      	mov	r0, r5
 80114a6:	4798      	blx	r3
 80114a8:	2000      	movs	r0, #0
 80114aa:	e7e0      	b.n	801146e <_raise_r+0x12>

080114ac <raise>:
 80114ac:	4b02      	ldr	r3, [pc, #8]	; (80114b8 <raise+0xc>)
 80114ae:	4601      	mov	r1, r0
 80114b0:	6818      	ldr	r0, [r3, #0]
 80114b2:	f7ff bfd3 	b.w	801145c <_raise_r>
 80114b6:	bf00      	nop
 80114b8:	200000b0 	.word	0x200000b0

080114bc <_kill_r>:
 80114bc:	b538      	push	{r3, r4, r5, lr}
 80114be:	4d07      	ldr	r5, [pc, #28]	; (80114dc <_kill_r+0x20>)
 80114c0:	2300      	movs	r3, #0
 80114c2:	4604      	mov	r4, r0
 80114c4:	4608      	mov	r0, r1
 80114c6:	4611      	mov	r1, r2
 80114c8:	602b      	str	r3, [r5, #0]
 80114ca:	f7f3 fa05 	bl	80048d8 <_kill>
 80114ce:	1c43      	adds	r3, r0, #1
 80114d0:	d102      	bne.n	80114d8 <_kill_r+0x1c>
 80114d2:	682b      	ldr	r3, [r5, #0]
 80114d4:	b103      	cbz	r3, 80114d8 <_kill_r+0x1c>
 80114d6:	6023      	str	r3, [r4, #0]
 80114d8:	bd38      	pop	{r3, r4, r5, pc}
 80114da:	bf00      	nop
 80114dc:	2001fc2c 	.word	0x2001fc2c

080114e0 <_getpid_r>:
 80114e0:	f7f3 b9f2 	b.w	80048c8 <_getpid>

080114e4 <__sread>:
 80114e4:	b510      	push	{r4, lr}
 80114e6:	460c      	mov	r4, r1
 80114e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114ec:	f000 f894 	bl	8011618 <_read_r>
 80114f0:	2800      	cmp	r0, #0
 80114f2:	bfab      	itete	ge
 80114f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80114f6:	89a3      	ldrhlt	r3, [r4, #12]
 80114f8:	181b      	addge	r3, r3, r0
 80114fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80114fe:	bfac      	ite	ge
 8011500:	6563      	strge	r3, [r4, #84]	; 0x54
 8011502:	81a3      	strhlt	r3, [r4, #12]
 8011504:	bd10      	pop	{r4, pc}

08011506 <__swrite>:
 8011506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801150a:	461f      	mov	r7, r3
 801150c:	898b      	ldrh	r3, [r1, #12]
 801150e:	05db      	lsls	r3, r3, #23
 8011510:	4605      	mov	r5, r0
 8011512:	460c      	mov	r4, r1
 8011514:	4616      	mov	r6, r2
 8011516:	d505      	bpl.n	8011524 <__swrite+0x1e>
 8011518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801151c:	2302      	movs	r3, #2
 801151e:	2200      	movs	r2, #0
 8011520:	f000 f868 	bl	80115f4 <_lseek_r>
 8011524:	89a3      	ldrh	r3, [r4, #12]
 8011526:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801152a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801152e:	81a3      	strh	r3, [r4, #12]
 8011530:	4632      	mov	r2, r6
 8011532:	463b      	mov	r3, r7
 8011534:	4628      	mov	r0, r5
 8011536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801153a:	f000 b817 	b.w	801156c <_write_r>

0801153e <__sseek>:
 801153e:	b510      	push	{r4, lr}
 8011540:	460c      	mov	r4, r1
 8011542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011546:	f000 f855 	bl	80115f4 <_lseek_r>
 801154a:	1c43      	adds	r3, r0, #1
 801154c:	89a3      	ldrh	r3, [r4, #12]
 801154e:	bf15      	itete	ne
 8011550:	6560      	strne	r0, [r4, #84]	; 0x54
 8011552:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011556:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801155a:	81a3      	strheq	r3, [r4, #12]
 801155c:	bf18      	it	ne
 801155e:	81a3      	strhne	r3, [r4, #12]
 8011560:	bd10      	pop	{r4, pc}

08011562 <__sclose>:
 8011562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011566:	f000 b813 	b.w	8011590 <_close_r>
	...

0801156c <_write_r>:
 801156c:	b538      	push	{r3, r4, r5, lr}
 801156e:	4d07      	ldr	r5, [pc, #28]	; (801158c <_write_r+0x20>)
 8011570:	4604      	mov	r4, r0
 8011572:	4608      	mov	r0, r1
 8011574:	4611      	mov	r1, r2
 8011576:	2200      	movs	r2, #0
 8011578:	602a      	str	r2, [r5, #0]
 801157a:	461a      	mov	r2, r3
 801157c:	f7f1 f910 	bl	80027a0 <_write>
 8011580:	1c43      	adds	r3, r0, #1
 8011582:	d102      	bne.n	801158a <_write_r+0x1e>
 8011584:	682b      	ldr	r3, [r5, #0]
 8011586:	b103      	cbz	r3, 801158a <_write_r+0x1e>
 8011588:	6023      	str	r3, [r4, #0]
 801158a:	bd38      	pop	{r3, r4, r5, pc}
 801158c:	2001fc2c 	.word	0x2001fc2c

08011590 <_close_r>:
 8011590:	b538      	push	{r3, r4, r5, lr}
 8011592:	4d06      	ldr	r5, [pc, #24]	; (80115ac <_close_r+0x1c>)
 8011594:	2300      	movs	r3, #0
 8011596:	4604      	mov	r4, r0
 8011598:	4608      	mov	r0, r1
 801159a:	602b      	str	r3, [r5, #0]
 801159c:	f7f3 f9d3 	bl	8004946 <_close>
 80115a0:	1c43      	adds	r3, r0, #1
 80115a2:	d102      	bne.n	80115aa <_close_r+0x1a>
 80115a4:	682b      	ldr	r3, [r5, #0]
 80115a6:	b103      	cbz	r3, 80115aa <_close_r+0x1a>
 80115a8:	6023      	str	r3, [r4, #0]
 80115aa:	bd38      	pop	{r3, r4, r5, pc}
 80115ac:	2001fc2c 	.word	0x2001fc2c

080115b0 <_fstat_r>:
 80115b0:	b538      	push	{r3, r4, r5, lr}
 80115b2:	4d07      	ldr	r5, [pc, #28]	; (80115d0 <_fstat_r+0x20>)
 80115b4:	2300      	movs	r3, #0
 80115b6:	4604      	mov	r4, r0
 80115b8:	4608      	mov	r0, r1
 80115ba:	4611      	mov	r1, r2
 80115bc:	602b      	str	r3, [r5, #0]
 80115be:	f7f3 f9ce 	bl	800495e <_fstat>
 80115c2:	1c43      	adds	r3, r0, #1
 80115c4:	d102      	bne.n	80115cc <_fstat_r+0x1c>
 80115c6:	682b      	ldr	r3, [r5, #0]
 80115c8:	b103      	cbz	r3, 80115cc <_fstat_r+0x1c>
 80115ca:	6023      	str	r3, [r4, #0]
 80115cc:	bd38      	pop	{r3, r4, r5, pc}
 80115ce:	bf00      	nop
 80115d0:	2001fc2c 	.word	0x2001fc2c

080115d4 <_isatty_r>:
 80115d4:	b538      	push	{r3, r4, r5, lr}
 80115d6:	4d06      	ldr	r5, [pc, #24]	; (80115f0 <_isatty_r+0x1c>)
 80115d8:	2300      	movs	r3, #0
 80115da:	4604      	mov	r4, r0
 80115dc:	4608      	mov	r0, r1
 80115de:	602b      	str	r3, [r5, #0]
 80115e0:	f7f3 f9cd 	bl	800497e <_isatty>
 80115e4:	1c43      	adds	r3, r0, #1
 80115e6:	d102      	bne.n	80115ee <_isatty_r+0x1a>
 80115e8:	682b      	ldr	r3, [r5, #0]
 80115ea:	b103      	cbz	r3, 80115ee <_isatty_r+0x1a>
 80115ec:	6023      	str	r3, [r4, #0]
 80115ee:	bd38      	pop	{r3, r4, r5, pc}
 80115f0:	2001fc2c 	.word	0x2001fc2c

080115f4 <_lseek_r>:
 80115f4:	b538      	push	{r3, r4, r5, lr}
 80115f6:	4d07      	ldr	r5, [pc, #28]	; (8011614 <_lseek_r+0x20>)
 80115f8:	4604      	mov	r4, r0
 80115fa:	4608      	mov	r0, r1
 80115fc:	4611      	mov	r1, r2
 80115fe:	2200      	movs	r2, #0
 8011600:	602a      	str	r2, [r5, #0]
 8011602:	461a      	mov	r2, r3
 8011604:	f7f3 f9c6 	bl	8004994 <_lseek>
 8011608:	1c43      	adds	r3, r0, #1
 801160a:	d102      	bne.n	8011612 <_lseek_r+0x1e>
 801160c:	682b      	ldr	r3, [r5, #0]
 801160e:	b103      	cbz	r3, 8011612 <_lseek_r+0x1e>
 8011610:	6023      	str	r3, [r4, #0]
 8011612:	bd38      	pop	{r3, r4, r5, pc}
 8011614:	2001fc2c 	.word	0x2001fc2c

08011618 <_read_r>:
 8011618:	b538      	push	{r3, r4, r5, lr}
 801161a:	4d07      	ldr	r5, [pc, #28]	; (8011638 <_read_r+0x20>)
 801161c:	4604      	mov	r4, r0
 801161e:	4608      	mov	r0, r1
 8011620:	4611      	mov	r1, r2
 8011622:	2200      	movs	r2, #0
 8011624:	602a      	str	r2, [r5, #0]
 8011626:	461a      	mov	r2, r3
 8011628:	f7f3 f970 	bl	800490c <_read>
 801162c:	1c43      	adds	r3, r0, #1
 801162e:	d102      	bne.n	8011636 <_read_r+0x1e>
 8011630:	682b      	ldr	r3, [r5, #0]
 8011632:	b103      	cbz	r3, 8011636 <_read_r+0x1e>
 8011634:	6023      	str	r3, [r4, #0]
 8011636:	bd38      	pop	{r3, r4, r5, pc}
 8011638:	2001fc2c 	.word	0x2001fc2c

0801163c <_init>:
 801163c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801163e:	bf00      	nop
 8011640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011642:	bc08      	pop	{r3}
 8011644:	469e      	mov	lr, r3
 8011646:	4770      	bx	lr

08011648 <_fini>:
 8011648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801164a:	bf00      	nop
 801164c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801164e:	bc08      	pop	{r3}
 8011650:	469e      	mov	lr, r3
 8011652:	4770      	bx	lr
